{"version":3,"file":"4a6f5fe48b069b0f.js","mappings":"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","sources":["webpack://keybr.com/./packages/keybr-binary/lib/errors.ts","webpack://keybr.com/./packages/keybr-binary/lib/util.ts","webpack://keybr.com/./packages/keybr-binary/lib/io.ts","webpack://keybr.com/./packages/keybr-binary/lib/utf8.ts","webpack://keybr.com/./packages/keybr-binary/lib/crc32.ts","webpack://keybr.com/./packages/keybr-binary/lib/secret.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/Alphabet.tsx","webpack://keybr.com/./packages/keybr-phonetic-model/lib/letter.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/transitiontable.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/blacklist/scramble.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/blacklist/blacklist.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/phoneticmodel.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/censor.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/context.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/fake.ts","webpack://keybr.com/./packages/keybr-rand/lib/rng/fake.ts","webpack://keybr.com/./packages/keybr-phonetic-model/lib/filter.ts","webpack://keybr.com/./packages/keybr-unicode/lib/codepoints.ts","webpack://keybr.com/./packages/keybr-unicode/lib/diacritics.ts","webpack://keybr.com/./packages/keybr-unicode/lib/format.ts","webpack://keybr.com/./packages/keybr-unicode/lib/normalize.ts","webpack://keybr.com/./packages/keybr-unicode/lib/whitespace.ts","webpack://keybr.com/./packages/keybr-unicode/lib/textstats.ts"],"sourcesContent":["export class DataError extends Error {\n  override name = \"DataError\";\n\n  constructor(message?: string, options?: ErrorOptions) {\n    super(message, options);\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DataError\";\n  }\n}\n","export function asUint8Array(\n  buffer: ArrayBufferLike | ArrayBufferView,\n): Uint8Array {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  }\n  if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  }\n  return new Uint8Array(buffer);\n}\n","import { DataError } from \"./errors.ts\";\nimport { decode, encode, encodedByteCount } from \"./utf8.ts\";\nimport { asUint8Array } from \"./util.ts\";\n\nexport class Writer {\n  #dataView: DataView;\n  #byteOffset: number;\n\n  constructor(byteLength: number = 64) {\n    this.#dataView = new DataView(new ArrayBuffer(Math.max(byteLength, 64)));\n    this.#byteOffset = 0;\n  }\n\n  #ensureSize(byteLength: number): void {\n    if (this.#dataView.byteLength < byteLength) {\n      let totalSize = 64;\n      while (totalSize < byteLength) {\n        totalSize *= totalSize;\n      }\n      const buffer = new ArrayBuffer(totalSize);\n      new Uint8Array(buffer).set(new Uint8Array(this.#dataView.buffer));\n      this.#dataView = new DataView(buffer);\n    }\n  }\n\n  #ensureAvailable(byteLength: number): void {\n    this.#ensureSize(this.#byteOffset + byteLength);\n  }\n\n  putInt8(value: number): this {\n    if (!Number.isInteger(value) || value < -0x80 || value > 0x7f) {\n      throw new TypeError(\"Value is not int8\");\n    }\n    this.#ensureAvailable(1);\n    this.#dataView.setInt8(this.#byteOffset, value);\n    this.#byteOffset += 1;\n    return this;\n  }\n\n  putUint8(value: number): this {\n    if (!Number.isInteger(value) || value < 0 || value > 0xff) {\n      throw new TypeError(\"Value is not uint8\");\n    }\n    this.#ensureAvailable(1);\n    this.#dataView.setUint8(this.#byteOffset, value);\n    this.#byteOffset += 1;\n    return this;\n  }\n\n  putInt16(value: number): this {\n    if (!Number.isInteger(value) || value < -0x8000 || value > 0x7fff) {\n      throw new TypeError(\"Value is not int16\");\n    }\n    this.#ensureAvailable(2);\n    this.#dataView.setInt16(this.#byteOffset, value, false);\n    this.#byteOffset += 2;\n    return this;\n  }\n\n  putUint16(value: number): this {\n    if (!Number.isInteger(value) || value < 0 || value > 0xffff) {\n      throw new TypeError(\"Value is not uint16\");\n    }\n    this.#ensureAvailable(2);\n    this.#dataView.setUint16(this.#byteOffset, value, false);\n    this.#byteOffset += 2;\n    return this;\n  }\n\n  putInt32(value: number): this {\n    if (!Number.isInteger(value) || value < -0x80000000 || value > 0x7fffffff) {\n      throw new TypeError(\"Value is not int32\");\n    }\n    this.#ensureAvailable(4);\n    this.#dataView.setInt32(this.#byteOffset, value, false);\n    this.#byteOffset += 4;\n    return this;\n  }\n\n  putUint32(value: number): this {\n    if (!Number.isInteger(value) || value < 0 || value > 0xffffffff) {\n      throw new TypeError(\"Value is not uint32\");\n    }\n    this.#ensureAvailable(4);\n    this.#dataView.setUint32(this.#byteOffset, value, false);\n    this.#byteOffset += 4;\n    return this;\n  }\n\n  putFloat32(value: number): this {\n    this.#ensureAvailable(4);\n    this.#dataView.setFloat32(this.#byteOffset, value, false);\n    this.#byteOffset += 4;\n    return this;\n  }\n\n  putFloat64(value: number): this {\n    this.#ensureAvailable(8);\n    this.#dataView.setFloat64(this.#byteOffset, value, false);\n    this.#byteOffset += 8;\n    return this;\n  }\n\n  putIntVlq(value: number): this {\n    if (!Number.isInteger(value) || value < -0x80000000 || value > 0x7fffffff) {\n      throw new TypeError(\"Value is not int32\");\n    }\n    this.putUintVlq(((value << 1) ^ (value >> 31)) >>> 0);\n    return this;\n  }\n\n  putUintVlq(value: number): this {\n    if (!Number.isInteger(value) || value < 0 || value > 0xffffffff) {\n      throw new TypeError(\"Value is not uint32\");\n    }\n    this.#putVlq(value);\n    return this;\n  }\n\n  #putVlq(value: number): void {\n    if (value > 266338304) {\n      this.putUint8(((value >>> 28) & 15) | 128);\n    }\n    if (value > 2080768) {\n      this.putUint8(((value >>> 21) & 127) | 128);\n    }\n    if (value > 16256) {\n      this.putUint8(((value >>> 14) & 127) | 128);\n    }\n    if (value > 127) {\n      this.putUint8(((value >>> 7) & 127) | 128);\n    }\n    this.putUint8(value & 127);\n  }\n\n  putString(value: string): this {\n    const byteLength = encodedByteCount(value);\n    this.putUintVlq(byteLength);\n    this.#ensureAvailable(byteLength);\n    encode(value, this.#dataView, this.#byteOffset);\n    this.#byteOffset += byteLength;\n    return this;\n  }\n\n  putBuffer(buffer: ArrayBufferLike | ArrayBufferView): this {\n    const array = asUint8Array(buffer);\n    this.#ensureAvailable(array.byteLength);\n    new Uint8Array(this.#dataView.buffer).set(array, this.#byteOffset);\n    this.#byteOffset += array.byteLength;\n    return this;\n  }\n\n  buffer(): Uint8Array {\n    return new Uint8Array(this.#dataView.buffer, 0, this.#byteOffset);\n  }\n}\n\nexport class Reader {\n  readonly #dataView: DataView;\n  #byteOffset: number = 0;\n\n  constructor(buffer: ArrayBufferLike | ArrayBufferView) {\n    if (ArrayBuffer.isView(buffer)) {\n      this.#dataView = new DataView(\n        buffer.buffer,\n        buffer.byteOffset,\n        buffer.byteLength,\n      );\n    } else {\n      this.#dataView = new DataView(buffer);\n    }\n  }\n\n  #ensureAvailable(byteLength: number): void {\n    if (this.#byteOffset + byteLength > this.#dataView.byteLength) {\n      throw new DataError(\"Premature end of data\");\n    }\n  }\n\n  getInt8(): number {\n    this.#ensureAvailable(1);\n    const value = this.#dataView.getInt8(this.#byteOffset);\n    this.#byteOffset += 1;\n    return value;\n  }\n\n  getUint8(): number {\n    this.#ensureAvailable(1);\n    const value = this.#dataView.getUint8(this.#byteOffset);\n    this.#byteOffset += 1;\n    return value;\n  }\n\n  getInt16(): number {\n    this.#ensureAvailable(2);\n    const value = this.#dataView.getInt16(this.#byteOffset, false);\n    this.#byteOffset += 2;\n    return value;\n  }\n\n  getUint16(): number {\n    this.#ensureAvailable(2);\n    const value = this.#dataView.getUint16(this.#byteOffset, false);\n    this.#byteOffset += 2;\n    return value;\n  }\n\n  getInt32(): number {\n    this.#ensureAvailable(4);\n    const value = this.#dataView.getInt32(this.#byteOffset, false);\n    this.#byteOffset += 4;\n    return value;\n  }\n\n  getUint32(): number {\n    this.#ensureAvailable(4);\n    const value = this.#dataView.getUint32(this.#byteOffset, false);\n    this.#byteOffset += 4;\n    return value;\n  }\n\n  getFloat32(): number {\n    this.#ensureAvailable(4);\n    const value = this.#dataView.getFloat32(this.#byteOffset, false);\n    this.#byteOffset += 4;\n    return value;\n  }\n\n  getFloat64(): number {\n    this.#ensureAvailable(8);\n    const value = this.#dataView.getFloat64(this.#byteOffset, false);\n    this.#byteOffset += 8;\n    return value;\n  }\n\n  getIntVlq(): number {\n    const value = this.getUintVlq();\n    return (value >>> 1) ^ -(value & 1); // from zig-zag back to two's-complement\n  }\n\n  getUintVlq(): number {\n    return this.#getVlq();\n  }\n\n  #getVlq(): number {\n    let value = 0;\n    const b0 = this.getUint8();\n    value = ((value << 7) | (b0 & 0x7f)) >>> 0;\n    if ((b0 & 0x80) === 0) {\n      return value;\n    }\n    const b1 = this.getUint8();\n    value = ((value << 7) | (b1 & 0x7f)) >>> 0;\n    if ((b1 & 0x80) === 0) {\n      return value;\n    }\n    const b2 = this.getUint8();\n    value = ((value << 7) | (b2 & 0x7f)) >>> 0;\n    if ((b2 & 0x80) === 0) {\n      return value;\n    }\n    const b3 = this.getUint8();\n    value = ((value << 7) | (b3 & 0x7f)) >>> 0;\n    if ((b3 & 0x80) === 0) {\n      return value;\n    }\n    const b4 = this.getUint8();\n    value = ((value << 7) | (b4 & 0x7f)) >>> 0;\n    if ((b4 & 0x80) === 0) {\n      if ((b0 & 0x7f) > 15) {\n        throw new DataError(\"Too many leading bits\");\n      }\n      return value;\n    }\n    throw new DataError(\"Too many trailing bits\");\n  }\n\n  getString(): string {\n    const byteLength = this.getUintVlq();\n    this.#ensureAvailable(byteLength);\n    const value = decode(this.#dataView, this.#byteOffset, byteLength);\n    this.#byteOffset += byteLength;\n    return value;\n  }\n\n  getBuffer(byteLength: number): Uint8Array {\n    this.#ensureAvailable(byteLength);\n    const buffer = new Uint8Array(\n      this.#dataView.buffer,\n      this.#byteOffset,\n      byteLength,\n    );\n    this.#byteOffset += byteLength;\n    return buffer;\n  }\n\n  position(): number {\n    return this.#byteOffset;\n  }\n\n  remaining(): number {\n    return this.#dataView.byteLength - this.#byteOffset;\n  }\n}\n","import { DataError } from \"./errors.ts\";\n\n/**\n * Get number of UTF8 bytes for the specified string.\n * @param value A string.\n * @return Number of UTF8 bytes.\n */\nexport function encodedByteCount(value: string): number {\n  // length   byte[0]    byte[1]    byte[2]    byte[3]\n  // 1        0b0xxxxxxx\n  // 2        0b110xxxxx 0b10xxxxxx\n  // 3        0b1110xxxx 0b10xxxxxx 0b10xxxxxx\n  // 4        0b11110xxx 0b10xxxxxx 0b10xxxxxx 0b10xxxxxx\n\n  let byteCount = 0;\n  let i = 0;\n  while (i < value.length) {\n    const codePoint = value.codePointAt(i) ?? 0;\n    if (codePoint <= 0x7f) {\n      byteCount += 1;\n      i += 1;\n    } else if (codePoint <= 0x7ff) {\n      byteCount += 2;\n      i += 1;\n    } else if (codePoint <= 0xffff) {\n      byteCount += 3;\n      i += 1;\n    } else if (codePoint <= 0x10ffff) {\n      byteCount += 4;\n      i += 2;\n    }\n  }\n  return byteCount;\n}\n\n/**\n * Write string as UTF8 bytes.\n * @param value A string to encode.\n * @param buffer An array to write bytes to.\n * @param byteOffset Byte offset in the array.\n * @return Updated byte offset in the array.\n */\nexport function encode(\n  value: string,\n  buffer: DataView,\n  byteOffset: number,\n): number {\n  let i = 0;\n  while (i < value.length) {\n    const codePoint = value.codePointAt(i) ?? 0;\n    if (codePoint <= 0x7f) {\n      buffer.setUint8(byteOffset++, codePoint);\n      i += 1;\n    } else if (codePoint <= 0x7ff) {\n      buffer.setUint8(byteOffset++, ((codePoint >> 6) & 0x1f) | 0xc0);\n      buffer.setUint8(byteOffset++, ((codePoint >> 0) & 0x3f) | 0x80);\n      i += 1;\n    } else if (codePoint <= 0xffff) {\n      buffer.setUint8(byteOffset++, ((codePoint >> 12) & 0x0f) | 0xe0);\n      buffer.setUint8(byteOffset++, ((codePoint >> 6) & 0x3f) | 0x80);\n      buffer.setUint8(byteOffset++, ((codePoint >> 0) & 0x3f) | 0x80);\n      i += 1;\n    } else if (codePoint <= 0x10ffff) {\n      buffer.setUint8(byteOffset++, ((codePoint >> 18) & 0x7f) | 0xf0);\n      buffer.setUint8(byteOffset++, ((codePoint >> 12) & 0x3f) | 0x80);\n      buffer.setUint8(byteOffset++, ((codePoint >> 6) & 0x3f) | 0x80);\n      buffer.setUint8(byteOffset++, ((codePoint >> 0) & 0x3f) | 0x80);\n      i += 2;\n    }\n  }\n  return byteOffset;\n}\n\n/**\n * Read string from UTF8 bytes.\n * @param buffer An array to read bytes from.\n * @param byteOffset Byte offset in the array.\n * @param byteLength Number of bytes to read.\n * @return String from UTF8 bytes.\n */\nexport function decode(\n  buffer: DataView,\n  byteOffset: number,\n  byteLength: number,\n): string {\n  let value = \"\";\n  const endOffset = byteOffset + byteLength;\n  while (byteOffset < endOffset) {\n    const b0 = buffer.getUint8(byteOffset++);\n    if (b0 < 0x80) {\n      value += String.fromCodePoint(b0);\n    } else if ((b0 & 0xe0) === 0xc0) {\n      if (byteOffset + 1 > endOffset) {\n        throw new DataError(\"Truncated UTF-8 stream\");\n      }\n      const b1 = buffer.getUint8(byteOffset++);\n      const codePoint = ((b0 & 0x1f) << 6) | ((b1 & 0x3f) << 0);\n      value += String.fromCodePoint(codePoint);\n    } else if ((b0 & 0xf0) === 0xe0) {\n      if (byteOffset + 2 > endOffset) {\n        throw new DataError(\"Truncated UTF-8 stream\");\n      }\n      const b1 = buffer.getUint8(byteOffset++);\n      const b2 = buffer.getUint8(byteOffset++);\n      const codePoint =\n        ((b0 & 0x0f) << 12) | ((b1 & 0x3f) << 6) | ((b2 & 0x3f) << 0);\n      value += String.fromCodePoint(codePoint);\n    } else if ((b0 & 0xf8) === 0xf0) {\n      if (byteOffset + 3 > endOffset) {\n        throw new DataError(\"Truncated UTF-8 stream\");\n      }\n      const b1 = buffer.getUint8(byteOffset++);\n      const b2 = buffer.getUint8(byteOffset++);\n      const b3 = buffer.getUint8(byteOffset++);\n      const codePoint =\n        ((b0 & 0x07) << 18) |\n        ((b1 & 0x3f) << 12) |\n        ((b2 & 0x3f) << 6) |\n        ((b3 & 0x3f) << 0);\n      if (codePoint > 0x10ffff) {\n        throw new DataError(\"Invalid code point\");\n      }\n      value += String.fromCodePoint(codePoint);\n    } else {\n      throw new DataError(\"Broken UTF-8 stream\");\n    }\n  }\n  return value;\n}\n","import { asUint8Array } from \"./util.ts\";\n\nconst table: readonly number[] = (() => {\n  const table: number[] = [];\n  for (let i = 0; i < 256; i++) {\n    let c = i;\n    for (let j = 0; j < 8; j++) {\n      c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;\n    }\n    table[i] = c;\n  }\n  return table;\n})();\n\n/**\n * Calculate CRC32 of the specified array.\n */\nexport function crc32(buffer: ArrayBufferLike | ArrayBufferView): number {\n  const array = asUint8Array(buffer);\n  let crc = 0xffffffff;\n  for (let i = 0; i < array.length; i++) {\n    crc = (crc >>> 8) ^ table[(crc ^ array[i]) & 0xff];\n  }\n  return (crc ^ 0xffffffff) >>> 0;\n}\n","import { crc32 } from \"./crc32.ts\";\nimport { DataError } from \"./errors.ts\";\nimport { asUint8Array } from \"./util.ts\";\n\nexport function scramble(\n  buffer: ArrayBufferLike | ArrayBufferView,\n): Uint8Array {\n  const array = asUint8Array(buffer);\n  const k = key();\n  const r = new Uint8Array(array.length + 8);\n  setUint32(r, 0, k);\n  setUint32(r, 4, crc32(array));\n  r.set(array, 8);\n  update(k, r);\n  return r;\n}\n\nexport function unscramble(\n  buffer: ArrayBufferLike | ArrayBufferView,\n): Uint8Array {\n  const array = asUint8Array(buffer);\n  if (array.length < 8) {\n    throw new DataError();\n  }\n  const k = getUint32(array, 0);\n  update(k, array);\n  const c = getUint32(array, 4);\n  const r = array.subarray(8);\n  if (crc32(r) !== c) {\n    throw new DataError();\n  }\n  return r;\n}\n\nfunction update(k: number, a: Uint8Array): void {\n  const g = stream(k);\n  for (let i = 4; i < a.length; i++) {\n    a[i] = a[i] ^ g();\n  }\n}\n\nfunction key(): number {\n  return Math.floor(Math.random() * 0x100000000);\n}\n\nfunction stream(seed: number): () => number {\n  let v = (modMultiply(seed, 0x7fffffed) + 0x00c39ec3) >>> 0;\n  return function (): number {\n    return (v = (modMultiply(v, 0x0019660d) + 0x3c6ef35f) >>> 0);\n  };\n}\n\nfunction getUint32(a: Uint8Array, p: number): number {\n  const v0 = (a[p + 0] << 0x18) >>> 0;\n  const v1 = (a[p + 1] << 0x10) >>> 0;\n  const v2 = (a[p + 2] << 0x08) >>> 0;\n  const v3 = (a[p + 3] << 0x00) >>> 0;\n  return (v0 | v1 | v2 | v3) >>> 0;\n}\n\nfunction setUint32(a: Uint8Array, p: number, v: number): void {\n  a[p + 0] = v >>> 0x18;\n  a[p + 1] = v >>> 0x10;\n  a[p + 2] = v >>> 0x08;\n  a[p + 3] = v >>> 0x00;\n}\n\n/**\n * Multiply modulo 0xFFFFFFFF.\n */\nfunction modMultiply(a: number, b: number): number {\n  a = a >>> 0;\n  b = b >>> 0;\n  let r = 0;\n  for (let i = 0; i < 32; i++) {\n    if (((b >>> i) & 1) === 1) {\n      r += a << i;\n    }\n  }\n  return r >>> 0;\n}\n","import { type ClassName } from \"@keybr/widget\";\nimport { type ElementType, type HTMLAttributes, type ReactNode } from \"react\";\nimport { type PhoneticModel } from \"./phoneticmodel.ts\";\n\nexport function Alphabet({\n  as: Component = \"strong\",\n  className,\n  id,\n  title,\n  model: { language, letters },\n}: {\n  readonly as?: ElementType<HTMLAttributes<HTMLElement>>;\n  readonly className?: ClassName;\n  readonly id?: string;\n  readonly title?: string;\n  readonly model: PhoneticModel;\n}): ReactNode {\n  return (\n    <Component\n      id={id}\n      className={className}\n      title={title}\n      dir={language.direction}\n    >\n      {letters.map(({ label }) => label).join(\"\")}\n    </Component>\n  );\n}\n","import { type CodePoint, type CodePointSet } from \"@keybr/unicode\";\n\nexport type HasLetter = {\n  readonly letter: Letter;\n};\n\nexport type LetterLike = Letter | HasLetter;\n\nexport class Letter {\n  constructor(\n    /** Unicode character code point. */\n    readonly codePoint: CodePoint,\n    /** Relative frequency. */\n    readonly f: number,\n    /** Letter display label. */\n    readonly label: string = String.fromCodePoint(codePoint),\n  ) {}\n\n  toString() {\n    return this.label;\n  }\n}\n\nexport namespace Letter {\n  export const digits: readonly Letter[] = [\n    new Letter(/* \"0\" */ 0x0030, 0.0),\n    new Letter(/* \"1\" */ 0x0031, 0.301),\n    new Letter(/* \"2\" */ 0x0032, 0.176),\n    new Letter(/* \"3\" */ 0x0033, 0.125),\n    new Letter(/* \"4\" */ 0x0034, 0.097),\n    new Letter(/* \"5\" */ 0x0035, 0.079),\n    new Letter(/* \"6\" */ 0x0036, 0.067),\n    new Letter(/* \"7\" */ 0x0037, 0.058),\n    new Letter(/* \"8\" */ 0x0038, 0.051),\n    new Letter(/* \"9\" */ 0x0039, 0.046),\n  ];\n  export const punctuators: readonly Letter[] = [\n    new Letter(/* \",\" */ 0x002c, 9.0),\n    new Letter(/* \".\" */ 0x002e, 8.0),\n    new Letter(/* \"!\" */ 0x0021, 2.0),\n    new Letter(/* \"?\" */ 0x003f, 2.0),\n    new Letter(/* \";\" */ 0x003b, 1.0),\n    new Letter(/* \":\" */ 0x003a, 1.0),\n    new Letter(/* \"'\" */ 0x0027, 1.0),\n    new Letter(/* '\"' */ 0x0022, 1.0),\n    new Letter(/* \"-\" */ 0x002d, 1.0),\n  ];\n  export const specials: readonly Letter[] = [\n    // new Letter(/* \"!\" */ 0x0021, 1),\n    // new Letter(/* '\"' */ 0x0022, 1),\n    new Letter(/* \"#\" */ 0x0023, 1),\n    new Letter(/* \"$\" */ 0x0024, 1),\n    new Letter(/* \"%\" */ 0x0025, 1),\n    new Letter(/* \"&\" */ 0x0026, 1),\n    // new Letter(/* \"'\" */ 0x0027, 1),\n    new Letter(/* \"(\" */ 0x0028, 1),\n    new Letter(/* \")\" */ 0x0029, 1),\n    new Letter(/* \"*\" */ 0x002a, 1),\n    new Letter(/* \"+\" */ 0x002b, 1),\n    // new Letter(/* \",\" */ 0x002c, 1),\n    new Letter(/* \"-\" */ 0x002d, 1),\n    // new Letter(/* \".\" */ 0x002e, 1),\n    new Letter(/* \"/\" */ 0x002f, 1),\n    // new Letter(/* \":\" */ 0x003a, 1),\n    // new Letter(/* \";\" */ 0x003b, 1),\n    new Letter(/* \"<\" */ 0x003c, 1),\n    new Letter(/* \"=\" */ 0x003d, 1),\n    new Letter(/* \">\" */ 0x003e, 1),\n    // new Letter(/* \"?\" */ 0x003f, 1),\n    new Letter(/* \"@\" */ 0x0040, 1),\n    new Letter(/* \"[\" */ 0x005b, 1),\n    new Letter(/* \"\\\" */ 0x005c, 1),\n    new Letter(/* \"]\" */ 0x005d, 1),\n    new Letter(/* \"^\" */ 0x005e, 1),\n    new Letter(/* \"_\" */ 0x005f, 1),\n    new Letter(/* \"`\" */ 0x0060, 1),\n    new Letter(/* \"{\" */ 0x007b, 1),\n    new Letter(/* \"|\" */ 0x007c, 1),\n    new Letter(/* \"}\" */ 0x007d, 1),\n    new Letter(/* \"~\" */ 0x007e, 1),\n  ];\n\n  // For paired characters, the frequency is halved to account for the fact that they are used in pairs.\n  export const programming: readonly Letter[] = [\n    new Letter(/* \"(\" */ 0x0028, 2.5),\n    new Letter(/* \")\" */ 0x0029, 2.4),\n    new Letter(/* \"{\" */ 0x007b, 1.8),\n    new Letter(/* \"}\" */ 0x007d, 1.7),\n    new Letter(/* '\"' */ 0x0022, 1.7),\n    new Letter(/* \"'\" */ 0x0027, 1.7),\n    new Letter(/* \",\" */ 0x002c, 1.6),\n    new Letter(/* \";\" */ 0x003b, 1.5),\n    new Letter(/* \"[\" */ 0x005b, 1.5),\n    new Letter(/* \"]\" */ 0x005d, 1.5),\n    new Letter(/* \":\" */ 0x003a, 1.4),\n    new Letter(/* \".\" */ 0x002e, 1.3),\n    new Letter(/* \"=\" */ 0x003d, 1.2),\n    new Letter(/* \"+\" */ 0x002b, 1.1),\n    new Letter(/* \"-\" */ 0x002d, 1.0),\n    new Letter(/* \"*\" */ 0x002a, 0.9),\n    new Letter(/* \"/\" */ 0x002f, 0.8),\n    new Letter(/* \"%\" */ 0x0025, 0.7),\n    new Letter(/* \"|\" */ 0x007c, 0.6),\n    new Letter(/* \"&\" */ 0x0026, 0.5),\n    new Letter(/* \"!\" */ 0x0021, 0.4),\n    new Letter(/* \"?\" */ 0x003f, 0.3),\n    new Letter(/* \"<\" */ 0x003c, 0.2),\n    new Letter(/* \">\" */ 0x003e, 0.1),\n    new Letter(/* \"_\" */ 0x005f, 0.1),\n    new Letter(/* \"#\" */ 0x0023, 0.1),\n    new Letter(/* \"@\" */ 0x0040, 0.1),\n    new Letter(/* \"$\" */ 0x0024, 0.1),\n    new Letter(/* \"^\" */ 0x005e, 0.1),\n    new Letter(/* \"~\" */ 0x007e, 0.1),\n    new Letter(/* \"\\\" */ 0x005c, 0.1),\n    new Letter(/* \"`\" */ 0x0060, 0.1),\n  ];\n\n  export const toLetter = (letter: LetterLike): Letter => {\n    return \"letter\" in letter ? letter.letter : letter;\n  };\n\n  export const codePointOrder = (letters: Iterable<Letter>): Letter[] => {\n    return [...letters].sort((a, b) => a.codePoint - b.codePoint);\n  };\n\n  export const frequencyOrder = (letters: Iterable<Letter>): Letter[] => {\n    return [...letters].sort((a, b) => b.f - a.f || a.codePoint - b.codePoint);\n  };\n\n  export const weightedFrequencyOrder = (\n    letters: Iterable<Letter>,\n    weight: (letter: Letter) => number,\n  ): Letter[] => {\n    return [...letters].sort(\n      (a, b) => weight(a) - weight(b) || b.f - a.f || a.codePoint - b.codePoint,\n    );\n  };\n\n  export const restrict = (\n    letters: Iterable<Letter>,\n    codePoints: CodePointSet,\n  ): Letter[] => {\n    return [...letters].filter(({ codePoint }) => codePoints.has(codePoint));\n  };\n\n  export const normalize = (letters: readonly Letter[]): Letter[] => {\n    const sum = letters.reduce((sum, { f }) => sum + f, 0);\n    return letters.map(\n      ({ codePoint, f, label }) =>\n        new Letter(codePoint, sum > 0 ? f / sum : 0, label),\n    );\n  };\n}\n","import { DataError, Reader, Writer } from \"@keybr/binary\";\nimport { type Language, Ngram1, Ngram2 } from \"@keybr/keyboard\";\nimport { type CodePoint } from \"@keybr/unicode\";\nimport { Letter } from \"./letter.ts\";\n\nconst signature = Object.freeze([\n  0x6b, 0x65, 0x79, 0x62, 0x72, 0x2e, 0x63, 0x6f, 0x6d,\n]);\n\nexport type Entry = {\n  readonly codePoint: CodePoint;\n  readonly frequency: number;\n};\n\nexport type Segment = readonly Entry[];\n\nexport class TransitionTable {\n  static load(buffer: Uint8Array): TransitionTable {\n    const reader = new Reader(buffer);\n    readSignature(reader);\n    const chain = readChain(reader);\n    const segments = readSegments(reader, chain);\n    if (reader.remaining() > 0) {\n      throw new DataError();\n    }\n    return new TransitionTable(chain, segments);\n  }\n\n  readonly chain: Chain;\n  readonly segments: readonly Segment[];\n\n  constructor(chain: Chain, segments: readonly Segment[]) {\n    if (segments.length !== chain.segments) {\n      throw new Error();\n    }\n    this.chain = chain;\n    this.segments = segments;\n  }\n\n  get order(): number {\n    return this.chain.order;\n  }\n\n  get alphabet(): readonly CodePoint[] {\n    return this.chain.alphabet;\n  }\n\n  get size(): number {\n    return this.chain.size;\n  }\n\n  segment(chain: readonly CodePoint[]): Segment {\n    return this.segments[this.chain.segmentIndex(chain)];\n  }\n\n  compress(): Uint8Array {\n    const writer = new Writer();\n    writeSignature(writer);\n    writeChain(writer, this.chain);\n    writeSegments(writer, this.chain, this.segments);\n    return writer.buffer();\n  }\n\n  letters({ letterName }: Language): Letter[] {\n    const map = new Map<CodePoint, number>(\n      this.alphabet.map((codePoint) => [codePoint, 0]),\n    );\n    for (const segment of this.segments) {\n      for (const { codePoint, frequency } of segment) {\n        map.set(codePoint, (map.get(codePoint) ?? 0) + frequency);\n      }\n    }\n    return [...map.entries()].map(\n      ([codePoint, f]) => new Letter(codePoint, f, letterName(codePoint)),\n    );\n  }\n\n  toNgram1(): Ngram1 {\n    const ngram = new Ngram1(this.alphabet);\n    for (const segment of this.segments) {\n      for (const { codePoint, frequency } of segment) {\n        ngram.add(codePoint, frequency);\n      }\n    }\n    return ngram;\n  }\n\n  toNgram2(): Ngram2 {\n    const ngram = new Ngram2(this.alphabet);\n    let index = 0;\n    for (const segment of this.segments) {\n      const codePoint0 = this.chain.codePoint(index);\n      for (const { codePoint, frequency } of segment) {\n        ngram.add(codePoint0, codePoint, frequency);\n      }\n      index += 1;\n      if (index === this.chain.size) {\n        index = 0;\n      }\n    }\n    return ngram;\n  }\n}\n\nexport class Chain {\n  readonly order: number;\n  readonly alphabet: readonly CodePoint[];\n  readonly size: number;\n  readonly segments: number;\n  readonly width: number;\n  readonly offsets: readonly number[];\n\n  constructor(order: number, alphabet: readonly CodePoint[]) {\n    this.order = order;\n    this.alphabet = alphabet;\n    this.size = this.alphabet.length;\n    this.segments = Math.pow(this.size, this.order - 1);\n    this.width = Math.pow(this.size, this.order);\n    this.offsets = offsets(this.size, this.order);\n  }\n\n  segmentIndex(chain: readonly CodePoint[]): number {\n    const { order, offsets } = this;\n    const { length } = chain;\n    let index = 0;\n    for (let i = 0; i < order - 1; i++) {\n      const codePoint = chain[length - order + i + 1] || 0x0020;\n      index += this.index(codePoint) * offsets[i + 1];\n    }\n    return index;\n  }\n\n  entryIndex(chain: readonly CodePoint[]): number {\n    const { order, offsets } = this;\n    const { length } = chain;\n    let index = 0;\n    for (let i = 0; i < order; i++) {\n      const codePoint = chain[length - order + i] || 0x0020;\n      index += this.index(codePoint) * offsets[i];\n    }\n    return index;\n  }\n\n  codePoint(index: number): CodePoint {\n    return this.alphabet[index];\n  }\n\n  index(codePoint: CodePoint): number {\n    return this.alphabet.indexOf(codePoint);\n  }\n}\n\nfunction writeSignature(writer: Writer): void {\n  for (const c of signature) {\n    writer.putUint8(c);\n  }\n}\n\nfunction readSignature(reader: Reader): void {\n  for (const c of signature) {\n    if (reader.getUint8() !== c) {\n      throw new DataError();\n    }\n  }\n}\n\nfunction writeChain(writer: Writer, chain: Chain): void {\n  writer.putUint8(chain.order);\n  writer.putUint8(chain.size);\n  for (let i = 0; i < chain.size; i++) {\n    writer.putUint16(chain.alphabet[i]);\n  }\n}\n\nfunction readChain(reader: Reader): Chain {\n  const order = reader.getUint8();\n  const size = reader.getUint8();\n  const alphabet = [];\n  for (let i = 0; i < size; i++) {\n    alphabet.push(reader.getUint16());\n  }\n  return new Chain(order, alphabet);\n}\n\nfunction writeSegments(\n  writer: Writer,\n  chain: Chain,\n  segments: readonly Segment[],\n): void {\n  for (let segmentIndex = 0; segmentIndex < chain.segments; segmentIndex++) {\n    const segment = segments[segmentIndex];\n    writer.putUint8(segment.length);\n    for (const { codePoint, frequency } of segment) {\n      writer.putUint8(chain.index(codePoint));\n      writer.putUint8(frequency);\n    }\n  }\n}\n\nfunction readSegments(reader: Reader, chain: Chain): Segment[] {\n  const segments = [];\n  for (let segmentIndex = 0; segmentIndex < chain.segments; segmentIndex++) {\n    const segment = [];\n    const length = reader.getUint8();\n    if (length >= chain.size) {\n      throw new DataError();\n    }\n    for (let entryIndex = 0; entryIndex < length; entryIndex++) {\n      const index = reader.getUint8();\n      if (index >= chain.size) {\n        throw new DataError();\n      }\n      const frequency = reader.getUint8();\n      if (frequency === 0) {\n        throw new DataError();\n      }\n      segment.push({ codePoint: chain.codePoint(index), frequency });\n    }\n    segments.push(segment);\n  }\n  return segments;\n}\n\nfunction offsets(size: number, order: number): number[] {\n  const offsets = new Array<number>(order);\n  for (let i = 0; i < order; i++) {\n    offsets[i] = Math.pow(size, order - i - 1);\n  }\n  return offsets;\n}\n","import { toCodePoints } from \"@keybr/unicode\";\n\nconst X = 23;\nconst Y = 13;\n\nexport function scrambleWord(word: string): string {\n  const a = [...toCodePoints(word)];\n  const { length } = a;\n  const s = new Array(length);\n  for (let i = 0; i < length; i++) {\n    s[(X * i + Y) % length] = a[i];\n  }\n  return String.fromCodePoint(...s);\n}\n\nexport function unscrambleWord(word: string): string {\n  const a = [...toCodePoints(word)];\n  const { length } = a;\n  const s = new Array(length);\n  for (let i = 0; i < length; i++) {\n    s[i] = a[(X * i + Y) % length];\n  }\n  return String.fromCodePoint(...s);\n}\n","import { Language } from \"@keybr/keyboard\";\nimport AR from \"./blacklist-ar.json\" with { type: \"json\" };\nimport BE from \"./blacklist-be.json\" with { type: \"json\" };\nimport DE from \"./blacklist-de.json\" with { type: \"json\" };\nimport EN from \"./blacklist-en.json\" with { type: \"json\" };\nimport ES from \"./blacklist-es.json\" with { type: \"json\" };\nimport FA from \"./blacklist-fa.json\" with { type: \"json\" };\nimport FR from \"./blacklist-fr.json\" with { type: \"json\" };\nimport HE from \"./blacklist-he.json\" with { type: \"json\" };\nimport IT from \"./blacklist-it.json\" with { type: \"json\" };\nimport NL from \"./blacklist-nl.json\" with { type: \"json\" };\nimport PL from \"./blacklist-pl.json\" with { type: \"json\" };\nimport PT from \"./blacklist-pt.json\" with { type: \"json\" };\nimport RU from \"./blacklist-ru.json\" with { type: \"json\" };\nimport SV from \"./blacklist-sv.json\" with { type: \"json\" };\nimport TR from \"./blacklist-tr.json\" with { type: \"json\" };\nimport UK from \"./blacklist-uk.json\" with { type: \"json\" };\nimport { unscrambleWord } from \"./scramble.ts\";\n\nconst blacklistByLanguage = ((items: [Language, string[]][]) =>\n  new Map<Language, Set<string>>(\n    items.map(([language, list]) => [\n      language,\n      new Set(list.map(unscrambleWord)),\n    ]),\n  ))([\n  [Language.AR, AR],\n  [Language.BE, BE],\n  [Language.DE, DE],\n  [Language.EN, EN],\n  [Language.ES, ES],\n  [Language.FA, FA],\n  [Language.FR, FR],\n  [Language.HE, HE],\n  [Language.IT, IT],\n  [Language.NL, NL],\n  [Language.PL, PL],\n  [Language.PT, PT],\n  [Language.RU, RU],\n  [Language.SV, SV],\n  [Language.TR, TR],\n  [Language.UK, UK],\n]);\n\nexport type Blacklist = { readonly allow: (word: string) => boolean };\n\nexport function getBlacklist(language: Language): Blacklist {\n  const blacklist = blacklistByLanguage.get(language) ?? null;\n  if (blacklist != null && blacklist.size > 0) {\n    return new (class implements Blacklist {\n      allow(word: string): boolean {\n        return !blacklist.has(language.lowerCase(word));\n      }\n    })();\n  } else {\n    return new (class implements Blacklist {\n      allow(word: string): boolean {\n        return true;\n      }\n    })();\n  }\n}\n","import { type Language, type Ngram1, type Ngram2 } from \"@keybr/keyboard\";\nimport { randomSample, type RNG, weightedRandomSample } from \"@keybr/rand\";\nimport { type CodePoint, type CodePointSet } from \"@keybr/unicode\";\nimport { type Filter } from \"./filter.ts\";\nimport { Letter } from \"./letter.ts\";\nimport { TransitionTable } from \"./transitiontable.ts\";\n\nconst minLength = 3;\nconst maxLength = 10;\n\nexport abstract class PhoneticModel {\n  constructor(\n    readonly language: Language,\n    readonly letters: readonly Letter[],\n  ) {}\n\n  abstract nextWord(filter: Filter, random?: RNG): string;\n\n  abstract ngram1(): Ngram1;\n\n  abstract ngram2(): Ngram2;\n\n  static restrict(\n    model: PhoneticModel,\n    codePoints: CodePointSet,\n  ): PhoneticModel {\n    return new (class extends PhoneticModel {\n      constructor() {\n        super(model.language, Letter.restrict(model.letters, codePoints));\n      }\n\n      override nextWord(filter: Filter, random?: RNG): string {\n        return model.nextWord(filter, random);\n      }\n\n      override ngram1(): Ngram1 {\n        return model.ngram1();\n      }\n\n      override ngram2(): Ngram2 {\n        return model.ngram2();\n      }\n    })();\n  }\n}\n\nexport namespace PhoneticModel {\n  export type Loader = {\n    (language: Language): Promise<PhoneticModel>;\n  };\n}\n\nexport function makePhoneticModel(\n  language: Language,\n  data: TransitionTable | Uint8Array,\n): PhoneticModel {\n  const table =\n    data instanceof TransitionTable ? data : TransitionTable.load(data);\n  const letters = Letter.normalize(\n    table.letters(language).filter(({ codePoint }) => codePoint !== 0x0020),\n  );\n  const prefixList = new PrefixList(table);\n\n  const nextWord = (filter: Filter, random: RNG): CodePoint[] => {\n    const prefixes = prefixList.findPrefixes(filter);\n    const word: CodePoint[] = [];\n    let attempt = 0;\n\n    const retry = (): boolean => {\n      if (attempt < 5) {\n        attempt++;\n        word.length = 0;\n        if (prefixes.length > 0) {\n          word.push(...randomSample(prefixes, random).codePoints);\n        }\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    retry();\n\n    while (true) {\n      const entries = table\n        .segment(word)\n        .filter(({ codePoint }) => {\n          if (codePoint === 0x0020) {\n            if (word.length < minLength) {\n              // Remove the space character if the word is still too short.\n              return false;\n            }\n          } else {\n            if (!filter.includes(codePoint)) {\n              // Remove a letter if it does not match the filter.\n              return false;\n            }\n          }\n          return true;\n        })\n        .map(({ codePoint, frequency }) => {\n          if (codePoint === 0x0020) {\n            // Boost the space character to generate shorter words.\n            frequency = frequency * Math.pow(1.3, word.length);\n          }\n          return { codePoint, frequency };\n        });\n\n      if (entries.length === 0) {\n        // Cannot continue a word from this prefix.\n        if (retry()) {\n          continue;\n        } else {\n          return word;\n        }\n      }\n\n      const entry = weightedRandomSample(\n        entries,\n        ({ frequency }) => frequency,\n        random,\n      );\n      if (entry.codePoint === 0x0020) {\n        // A whole word was generated.\n        return word;\n      }\n\n      if (word.length > maxLength) {\n        // A word is too long already.\n        if (retry()) {\n          continue;\n        } else {\n          return word;\n        }\n      }\n\n      word.push(entry.codePoint);\n    }\n  };\n\n  return new (class extends PhoneticModel {\n    constructor() {\n      super(language, letters);\n    }\n\n    override nextWord(filter: Filter, random: RNG = Math.random): string {\n      return String.fromCodePoint(...nextWord(filter, random));\n    }\n\n    override ngram1(): Ngram1 {\n      return table.toNgram1();\n    }\n\n    override ngram2(): Ngram2 {\n      return table.toNgram2();\n    }\n  })();\n}\n\nclass Prefix {\n  constructor(readonly codePoints: readonly CodePoint[]) {}\n\n  matches(filter: Filter): boolean {\n    return this.codePoints.every((codePoint) => filter.includes(codePoint));\n  }\n}\n\nclass PrefixList {\n  readonly table: TransitionTable;\n  readonly map: Map<CodePoint, Prefix[]>;\n\n  constructor(table: TransitionTable) {\n    this.table = table;\n    this.map = new Map<CodePoint, Prefix[]>(\n      table.alphabet.map((codePoint) => [codePoint, []]),\n    );\n\n    const walk = (word: CodePoint[]): void => {\n      for (const { codePoint } of this.table.segment(word)) {\n        if (codePoint !== 0x0020) {\n          word.push(codePoint);\n\n          const prefix = new Prefix([...word]);\n          for (const index of new Set(word)) {\n            this.map.get(codePoint)!.push(prefix);\n          }\n\n          if (word.length < minLength) {\n            walk(word);\n          }\n\n          word.pop();\n        }\n      }\n    };\n\n    walk([]);\n  }\n\n  findPrefixes(filter: Filter): Prefix[] {\n    const { focusedCodePoint } = filter;\n    if (focusedCodePoint != null) {\n      const prefixes = this.map\n        .get(focusedCodePoint)!\n        .filter((prefix) => prefix.matches(filter));\n      if (prefixes.length > 0) {\n        return prefixes;\n      } else {\n        return [new Prefix([focusedCodePoint])];\n      }\n    } else {\n      return [];\n    }\n  }\n}\n","import { type Ngram1, type Ngram2 } from \"@keybr/keyboard\";\nimport { type RNG } from \"@keybr/rand\";\nimport { getBlacklist } from \"./blacklist/blacklist.ts\";\nimport { type Filter } from \"./filter.ts\";\nimport { PhoneticModel } from \"./phoneticmodel.ts\";\n\nexport function censor(model: PhoneticModel): PhoneticModel {\n  const { language, letters } = model;\n\n  const blacklist = getBlacklist(language);\n\n  return new (class extends PhoneticModel {\n    constructor() {\n      super(language, letters);\n    }\n\n    override nextWord(filter: Filter, random?: RNG): string {\n      while (true) {\n        const word = model.nextWord(filter, random);\n        if (blacklist.allow(word)) {\n          return word;\n        }\n      }\n    }\n\n    override ngram1(): Ngram1 {\n      return model.ngram1();\n    }\n\n    override ngram2(): Ngram2 {\n      return model.ngram2();\n    }\n  })();\n}\n","import { createContext, useContext } from \"react\";\nimport { type PhoneticModel } from \"./phoneticmodel.ts\";\n\nexport const PhoneticModelContext = createContext<PhoneticModel>(null!);\n\nexport function usePhoneticModel(): PhoneticModel {\n  const value = useContext(PhoneticModelContext);\n  if (value == null) {\n    throw new Error(\n      process.env.NODE_ENV !== \"production\"\n        ? \"PhoneticModelContext is missing\"\n        : undefined,\n    );\n  }\n  return value;\n}\n","import { Language, Ngram1, Ngram2 } from \"@keybr/keyboard\";\nimport {\n  FakeRNGStream,\n  randomSample,\n  type RNG,\n  type RNGStream,\n} from \"@keybr/rand\";\nimport { type Filter } from \"./filter.ts\";\nimport { Letter } from \"./letter.ts\";\nimport { PhoneticModel } from \"./phoneticmodel.ts\";\n\nexport class FakePhoneticModel extends PhoneticModel {\n  static readonly loader: PhoneticModel.Loader = async () =>\n    new FakePhoneticModel();\n\n  static readonly letter1 = new Letter(/* \"a\" */ 0x0061, 0.1, \"A\");\n  static readonly letter2 = new Letter(/* \"b\" */ 0x0062, 0.09, \"B\");\n  static readonly letter3 = new Letter(/* \"c\" */ 0x0063, 0.08, \"C\");\n  static readonly letter4 = new Letter(/* \"d\" */ 0x0064, 0.07, \"D\");\n  static readonly letter5 = new Letter(/* \"e\" */ 0x0065, 0.06, \"E\");\n  static readonly letter6 = new Letter(/* \"f\" */ 0x0066, 0.05, \"F\");\n  static readonly letter7 = new Letter(/* \"g\" */ 0x0067, 0.04, \"G\");\n  static readonly letter8 = new Letter(/* \"h\" */ 0x0068, 0.03, \"H\");\n  static readonly letter9 = new Letter(/* \"i\" */ 0x0069, 0.02, \"I\");\n  static readonly letter10 = new Letter(/* \"j\" */ 0x006a, 0.01, \"J\");\n\n  static readonly letters: readonly Letter[] = [\n    FakePhoneticModel.letter1,\n    FakePhoneticModel.letter2,\n    FakePhoneticModel.letter3,\n    FakePhoneticModel.letter4,\n    FakePhoneticModel.letter5,\n    FakePhoneticModel.letter6,\n    FakePhoneticModel.letter7,\n    FakePhoneticModel.letter8,\n    FakePhoneticModel.letter9,\n    FakePhoneticModel.letter10,\n  ];\n\n  readonly words: readonly string[];\n  readonly rng: RNGStream;\n\n  constructor(\n    words: readonly string[] = [\"abc\", \"def\", \"ghi\"],\n    rng: RNGStream = FakeRNGStream(words.length),\n  ) {\n    super(Language.EN, FakePhoneticModel.letters);\n    this.words = [...words];\n    this.rng = rng;\n  }\n\n  override nextWord(filter: Filter, rng: RNG = this.rng): string {\n    return randomSample(this.words, rng);\n  }\n\n  override ngram1(): Ngram1 {\n    const alphabet = this.letters.map(({ codePoint }) => codePoint);\n    const { length } = alphabet;\n    const ngram = new Ngram1(alphabet);\n    for (let i = 0; i < length; i++) {\n      ngram.set(alphabet[i], 1);\n    }\n    return ngram;\n  }\n\n  override ngram2(): Ngram2 {\n    const alphabet = this.letters.map(({ codePoint }) => codePoint);\n    const { length } = alphabet;\n    const ngram = new Ngram2(alphabet);\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length; j++) {\n        ngram.set(alphabet[i], alphabet[j], 1);\n      }\n    }\n    return ngram;\n  }\n}\n","import { type RNGStream } from \"../types.ts\";\n\ntype Mark = number;\n\nexport const FakeRNGStream = (length: number): RNGStream => {\n  let index = 0;\n\n  const rng: RNGStream<Mark> = (): number => {\n    const r = index / length;\n    index += 1;\n    if (index === length) {\n      index = 0;\n    }\n    return r;\n  };\n  rng.mark = (): Mark => {\n    return index;\n  };\n  rng.reset = (mark: Mark): void => {\n    index = mark;\n  };\n\n  return rng;\n};\n","import {\n  type CodePoint,\n  type CodePointSet,\n  type HasCodePoint,\n} from \"@keybr/unicode\";\nimport { Letter, type LetterLike } from \"./letter.ts\";\n\nexport class Filter {\n  static readonly empty = new Filter(null, null);\n\n  /**\n   * Codepoints of the letters from which to generate words.\n   */\n  readonly codePoints: CodePointSet | null;\n  /**\n   * Codepoint of the letter which must appear in each generated word.\n   */\n  readonly focusedCodePoint: CodePoint | null;\n\n  constructor(\n    letters0: readonly LetterLike[] | null = null,\n    focused0: LetterLike | null = null,\n  ) {\n    const letters = letters0 && letters0.map(Letter.toLetter);\n    const focused = focused0 && Letter.toLetter(focused0);\n    if (letters != null && letters.length === 0) {\n      throw new Error();\n    }\n    if (letters != null && focused != null && !letters.includes(focused)) {\n      throw new Error();\n    }\n    this.codePoints = letters && new Set(letters.map(codePointOf));\n    this.focusedCodePoint = focused && codePointOf(focused);\n  }\n\n  /**\n   * Returns a value indicating whether the given codepoint\n   * is allowed by this filter.\n   *\n   * Empty filter allows all characters.\n   */\n  includes(codePoint: CodePoint): boolean {\n    return this.codePoints == null || this.codePoints.has(codePoint);\n  }\n}\n\nconst codePointOf = ({ codePoint }: HasCodePoint): CodePoint => {\n  return codePoint;\n};\n","import { type CodePoint } from \"./types.ts\";\n\nexport const isCodePoint = (value: number): boolean =>\n  Number.isSafeInteger(value) && value >= 0 && value < 0x11_0000;\n\nexport const charCount = (codePoint: CodePoint): number =>\n  codePoint >= 0x01_0000 ? 2 : 1;\n\nexport const toCodePoints = (text: string): Iterable<CodePoint> => {\n  const { length } = text;\n  return {\n    [Symbol.iterator](): IterableIterator<CodePoint> {\n      let index = 0;\n      const result = { done: true, value: -1 } as IteratorResult<CodePoint>;\n      const iterator = {\n        [Symbol.iterator](): IterableIterator<CodePoint> {\n          return iterator;\n        },\n        next(): IteratorResult<CodePoint> {\n          if (index < length) {\n            const codePoint = text.codePointAt(index) ?? 0;\n            index += charCount(codePoint);\n            result.done = false;\n            result.value = codePoint;\n          } else {\n            result.done = true;\n            result.value = -1;\n          }\n          return result;\n        },\n      };\n      return iterator;\n    },\n  };\n};\n\nexport const codePointLength = (text: string): number => {\n  const it = toCodePoints(text)[Symbol.iterator]();\n  let length = 0;\n  while (true) {\n    const { done } = it.next();\n    if (done) {\n      return length;\n    }\n    length += 1;\n  }\n};\n","// https://en.wikipedia.org/wiki/Combining_character\n// https://en.wikipedia.org/wiki/Diacritic\n// https://en.wikipedia.org/wiki/List_of_precomposed_Latin_characters_in_Unicode\n// https://bepo.fr/wiki/Touches_mortes\n\nimport { type CodePoint } from \"./types.ts\";\n\nconst toCombined = new Map<number, CodePoint>();\nconst toBase = new Map<CodePoint, CodePoint>();\n\nexport const isDiacritic = (codePoint: CodePoint): boolean =>\n  codePoint >= 0x0300 && codePoint <= 0x036f;\n\nexport const combineDiacritic = (\n  base: CodePoint,\n  combining: CodePoint,\n): CodePoint => {\n  return toCombined.get((combining << 16) | base) ?? base;\n};\n\nexport const stripDiacritic = (combined: CodePoint): CodePoint => {\n  return toBase.get(combined) ?? combined;\n};\n\nfor (const [codePoint, baseList, combinedList] of [\n  [\n    /* COMBINING GRAVE ACCENT */ 0x0300, //\n    \"AEINOUWYaeinouwy\",\n    \"ÀÈÌǸÒÙẀỲàèìǹòùẁỳ\",\n  ],\n  [\n    /* COMBINING ACUTE ACCENT */ 0x0301, //\n    \"ACEGIKLMNOPRSUWYZacegiklmnoprsuwyzΑΕΗΙΟΥΩαεηιουω\",\n    \"ÁĆÉǴÍḰĹḾŃÓṔŔŚÚẂÝŹáćéǵíḱĺḿńóṕŕśúẃýźΆΈΉΊΌΎΏάέήίόύώ\",\n  ],\n  [\n    /* COMBINING CIRCUMFLEX ACCENT */ 0x0302, //\n    \"ACEGHIJOSUWYZaceghijosuwyz\",\n    \"ÂĈÊĜĤÎĴÔŜÛŴŶẐâĉêĝĥîĵôŝûŵŷẑ\",\n  ],\n  [\n    /* COMBINING TILDE */ 0x0303, //\n    \"AEINOUVYaeinouvy\",\n    \"ÃẼĨÑÕŨṼỸãẽĩñõũṽỹ\",\n  ],\n  [\n    /* COMBINING MACRON */ 0x0304, //\n    \"AEGIOUYaegiouy\",\n    \"ĀĒḠĪŌŪȲāēḡīōūȳ\",\n  ],\n  [\n    /* COMBINING BREVE */ 0x0306, //\n    \"AEGIOUaegiou\",\n    \"ĂĔĞĬŎŬăĕğĭŏŭ\",\n  ],\n  [\n    /* COMBINING DOT ABOVE */ 0x0307,\n    \"ABCDEFGHIMNOPRSTWXYZabcdefghmnoprstwxyz\",\n    \"ȦḂĊḊĖḞĠḢİṀṄȮṖṘṠṪẆẊẎŻȧḃċḋėḟġḣṁṅȯṗṙṡṫẇẋẏż\",\n  ],\n  [\n    /* COMBINING DIAERESIS */ 0x0308, //\n    \"AEHIOUWXYaehiotuwxyΙΥιυ\",\n    \"ÄËḦÏÖÜẄẌŸäëḧïöẗüẅẍÿΪΫϊϋ\",\n  ],\n  [\n    /* COMBINING RING ABOVE */ 0x030a, //\n    \"AUauwy\",\n    \"ÅŮåůẘẙ\",\n  ],\n  [\n    /* COMBINING DOUBLE ACUTE ACCENT */ 0x030b, //\n    \"OUou\",\n    \"ŐŰőű\",\n  ],\n  [\n    /* COMBINING CARON */ 0x030c, //\n    \"ACDEGHIKLNORSTUZacdeghijklnorstuz\",\n    \"ǍČĎĚǦȞǏǨĽŇǑŘŠŤǓŽǎčďěǧȟǐǰǩľňǒřšťǔž\",\n  ],\n  [\n    /* COMBINING DOUBLE GRAVE ACCENT */ 0x030f, //\n    \"AEIORUaeioru\",\n    \"ȀȄȈȌȐȔȁȅȉȍȑȕ\",\n  ],\n  [\n    /* COMBINING CEDILLA */ 0x0327, //\n    \"CDEGHKLNRSTcdeghklnrst\",\n    \"ÇḐȨĢḨĶĻŅŖŞŢçḑȩģḩķļņŗşţ\",\n  ],\n  [\n    /* COMBINING OGONEK */ 0x0328, //\n    \"AEIOUaeiou\",\n    \"ĄĘĮǪŲąęįǫų\",\n  ],\n] as [CodePoint, string, string][]) {\n  for (let i = 0; i < baseList.length; i++) {\n    const base = baseList.codePointAt(i)!;\n    const combined = combinedList.codePointAt(i)!;\n    toCombined.set((codePoint << 16) | base, combined);\n    toBase.set(combined, base);\n  }\n}\n","import { type CodePoint } from \"./types.ts\";\n\nexport function formatCodePoint(codePoint: CodePoint): string {\n  return \"U+\" + codePoint.toString(16).padStart(4, \"0\");\n}\n","import { type CodePoint } from \"./types.ts\";\n\nexport function expand(codePoint: CodePoint): readonly CodePoint[] | null {\n  return expandMap.get(codePoint) ?? null;\n}\n\nexport function replace(codePoint: CodePoint): CodePoint | null {\n  return replaceMap.get(codePoint) ?? null;\n}\n\nconst expandMap = ((data: [to: CodePoint[], from: CodePoint[]][]) => {\n  const map = new Map<CodePoint, readonly CodePoint[]>();\n  for (const [to, from] of data) {\n    for (const codePoint of from) {\n      map.set(codePoint, to);\n    }\n  }\n  return map;\n})([\n  // ----- Letters -----\n  [\n    [/* \"A\" */ 0x0041],\n    [\n      /* \"À\" */ 0x00c0, /* \"Á\" */ 0x00c1, /* \"Â\" */ 0x00c2, /* \"Ã\" */ 0x00c3,\n      /* \"Ä\" */ 0x00c4, /* \"Å\" */ 0x00c5, /* \"Ā\" */ 0x0100, /* \"Ă\" */ 0x0102,\n      /* \"Ą\" */ 0x0104, /* \"Ǎ\" */ 0x01cd, /* \"Ǟ\" */ 0x01de, /* \"Ǡ\" */ 0x01e0,\n      /* \"Ǻ\" */ 0x01fa, /* \"Ȁ\" */ 0x0200, /* \"Ȃ\" */ 0x0202, /* \"Ȧ\" */ 0x0226,\n      /* \"Ⱥ\" */ 0x023a, /* \"Ḁ\" */ 0x1e00, /* \"Ạ\" */ 0x1ea0, /* \"Ả\" */ 0x1ea2,\n      /* \"Ấ\" */ 0x1ea4, /* \"Ầ\" */ 0x1ea6, /* \"Ẩ\" */ 0x1ea8, /* \"Ẫ\" */ 0x1eaa,\n      /* \"Ậ\" */ 0x1eac, /* \"Ắ\" */ 0x1eae, /* \"Ằ\" */ 0x1eb0, /* \"Ẳ\" */ 0x1eb2,\n      /* \"Ẵ\" */ 0x1eb4, /* \"Ặ\" */ 0x1eb6, /* \"Ⓐ\" */ 0x24b6, /* \"Ɐ\" */ 0x2c6f,\n      /* \"Ａ\" */ 0xff21,\n    ],\n  ],\n  [[/* \"A\" */ 0x0041, /* \"A\" */ 0x0041], [/* \"Ꜳ\" */ 0xa732]],\n  [\n    [/* \"A\" */ 0x0041, /* \"E\" */ 0x0045],\n    [/* \"Æ\" */ 0x00c6, /* \"Ǣ\" */ 0x01e2, /* \"Ǽ\" */ 0x01fc],\n  ],\n  [[/* \"A\" */ 0x0041, /* \"O\" */ 0x004f], [/* \"Ꜵ\" */ 0xa734]],\n  [[/* \"A\" */ 0x0041, /* \"U\" */ 0x0055], [/* \"Ꜷ\" */ 0xa736]],\n  [\n    [/* \"A\" */ 0x0041, /* \"V\" */ 0x0056],\n    [/* \"Ꜹ\" */ 0xa738, /* \"Ꜻ\" */ 0xa73a],\n  ],\n  [[/* \"A\" */ 0x0041, /* \"Y\" */ 0x0059], [/* \"Ꜽ\" */ 0xa73c]],\n  [\n    [/* \"B\" */ 0x0042],\n    [\n      /* \"Ɓ\" */ 0x0181, /* \"Ƀ\" */ 0x0243, /* \"Ḃ\" */ 0x1e02, /* \"Ḅ\" */ 0x1e04,\n      /* \"Ḇ\" */ 0x1e06, /* \"Ⓑ\" */ 0x24b7, /* \"Ｂ\" */ 0xff22,\n    ],\n  ],\n  [\n    [/* \"C\" */ 0x0043],\n    [\n      /* \"C\" */ 0x0043, /* \"Ç\" */ 0x00c7, /* \"Ć\" */ 0x0106, /* \"Ĉ\" */ 0x0108,\n      /* \"Ċ\" */ 0x010a, /* \"Č\" */ 0x010c, /* \"Ƈ\" */ 0x0187, /* \"Ȼ\" */ 0x023b,\n      /* \"Ḉ\" */ 0x1e08, /* \"Ⓒ\" */ 0x24b8, /* \"Ꜿ\" */ 0xa73e, /* \"Ｃ\" */ 0xff23,\n    ],\n  ],\n  [\n    [/* \"D\" */ 0x0044],\n    [\n      /* \"Ď\" */ 0x010e, /* \"Đ\" */ 0x0110, /* \"Ɖ\" */ 0x0189, /* \"Ɗ\" */ 0x018a,\n      /* \"ᴅ\" */ 0x1d05, /* \"Ḋ\" */ 0x1e0a, /* \"Ḍ\" */ 0x1e0c, /* \"Ḏ\" */ 0x1e0e,\n      /* \"Ḑ\" */ 0x1e10, /* \"Ḓ\" */ 0x1e12, /* \"Ⓓ\" */ 0x24b9, /* \"Ꝺ\" */ 0xa779,\n      /* \"Ｄ\" */ 0xff24,\n    ],\n  ],\n  [\n    [/* \"D\" */ 0x0044, /* \"Z\" */ 0x005a],\n    [/* \"Ǆ\" */ 0x01c4, /* \"Ǳ\" */ 0x01f1],\n  ],\n  [[/* \"D\" */ 0x0044, /* \"h\" */ 0x0068], [/* \"Ð\" */ 0x00d0]],\n  [\n    [/* \"D\" */ 0x0044, /* \"z\" */ 0x007a],\n    [/* \"ǅ\" */ 0x01c5, /* \"ǲ\" */ 0x01f2],\n  ],\n  [\n    [/* \"E\" */ 0x0045],\n    [\n      /* \"È\" */ 0x00c8, /* \"É\" */ 0x00c9, /* \"Ê\" */ 0x00ca, /* \"Ë\" */ 0x00cb,\n      /* \"Ē\" */ 0x0112, /* \"Ĕ\" */ 0x0114, /* \"Ė\" */ 0x0116, /* \"Ę\" */ 0x0118,\n      /* \"Ě\" */ 0x011a, /* \"Ǝ\" */ 0x018e, /* \"Ɛ\" */ 0x0190, /* \"Ȅ\" */ 0x0204,\n      /* \"Ȇ\" */ 0x0206, /* \"Ȩ\" */ 0x0228, /* \"ɛ\" */ 0x025b, /* \"ᴇ\" */ 0x1d07,\n      /* \"Ḕ\" */ 0x1e14, /* \"Ḗ\" */ 0x1e16, /* \"Ḙ\" */ 0x1e18, /* \"Ḛ\" */ 0x1e1a,\n      /* \"Ḝ\" */ 0x1e1c, /* \"Ẹ\" */ 0x1eb8, /* \"Ẻ\" */ 0x1eba, /* \"Ẽ\" */ 0x1ebc,\n      /* \"Ế\" */ 0x1ebe, /* \"Ề\" */ 0x1ec0, /* \"Ể\" */ 0x1ec2, /* \"Ễ\" */ 0x1ec4,\n      /* \"Ệ\" */ 0x1ec6, /* \"Ⓔ\" */ 0x24ba, /* \"Ｅ\" */ 0xff25,\n    ],\n  ],\n  [\n    [/* \"F\" */ 0x0046],\n    [\n      /* \"Ƒ\" */ 0x0191, /* \"Ḟ\" */ 0x1e1e, /* \"Ⓕ\" */ 0x24bb, /* \"Ꝼ\" */ 0xa77b,\n      /* \"ꝼ\" */ 0xa77c, /* \"Ｆ\" */ 0xff26,\n    ],\n  ],\n  [\n    [/* \"G\" */ 0x0047],\n    [\n      /* \"Ĝ\" */ 0x011c, /* \"Ğ\" */ 0x011e, /* \"Ġ\" */ 0x0120, /* \"Ģ\" */ 0x0122,\n      /* \"Ɠ\" */ 0x0193, /* \"Ǥ\" */ 0x01e4, /* \"Ǧ\" */ 0x01e6, /* \"Ǵ\" */ 0x01f4,\n      /* \"ɢ\" */ 0x0262, /* \"Ḡ\" */ 0x1e20, /* \"Ⓖ\" */ 0x24bc, /* \"Ᵹ\" */ 0xa77d,\n      /* \"Ꝿ\" */ 0xa77e, /* \"Ꞡ\" */ 0xa7a0, /* \"Ｇ\" */ 0xff27,\n    ],\n  ],\n  [\n    [/* \"H\" */ 0x0048],\n    [\n      /* \"Ĥ\" */ 0x0124, /* \"Ħ\" */ 0x0126, /* \"Ȟ\" */ 0x021e, /* \"Ḣ\" */ 0x1e22,\n      /* \"Ḥ\" */ 0x1e24, /* \"Ḧ\" */ 0x1e26, /* \"Ḩ\" */ 0x1e28, /* \"Ḫ\" */ 0x1e2a,\n      /* \"Ⓗ\" */ 0x24bd, /* \"Ⱨ\" */ 0x2c67, /* \"Ⱶ\" */ 0x2c75, /* \"Ɥ\" */ 0xa78d,\n      /* \"Ｈ\" */ 0xff28,\n    ],\n  ],\n  [\n    [/* \"I\" */ 0x0049],\n    [\n      /* \"Ì\" */ 0x00cc, /* \"Í\" */ 0x00cd, /* \"Î\" */ 0x00ce, /* \"Ï\" */ 0x00cf,\n      /* \"Ĩ\" */ 0x0128, /* \"Ī\" */ 0x012a, /* \"Ĭ\" */ 0x012c, /* \"Į\" */ 0x012e,\n      /* \"İ\" */ 0x0130, /* \"Ɨ\" */ 0x0197, /* \"Ǐ\" */ 0x01cf, /* \"Ȉ\" */ 0x0208,\n      /* \"Ȋ\" */ 0x020a, /* \"Ḭ\" */ 0x1e2c, /* \"Ḯ\" */ 0x1e2e, /* \"Ỉ\" */ 0x1ec8,\n      /* \"Ị\" */ 0x1eca, /* \"Ⓘ\" */ 0x24be, /* \"Ｉ\" */ 0xff29,\n    ],\n  ],\n  [\n    [/* \"J\" */ 0x004a],\n    [\n      /* \"Ĵ\" */ 0x0134, /* \"ȷ\" */ 0x0237, /* \"Ɉ\" */ 0x0248, /* \"Ⓙ\" */ 0x24bf,\n      /* \"Ｊ\" */ 0xff2a,\n    ],\n  ],\n  [\n    [/* \"K\" */ 0x004b],\n    [\n      /* \"Ķ\" */ 0x0136, /* \"Ƙ\" */ 0x0198, /* \"Ǩ\" */ 0x01e8, /* \"Ḱ\" */ 0x1e30,\n      /* \"Ḳ\" */ 0x1e32, /* \"Ḵ\" */ 0x1e34, /* \"Ⓚ\" */ 0x24c0, /* \"Ⱪ\" */ 0x2c69,\n      /* \"Ꝁ\" */ 0xa740, /* \"Ꝃ\" */ 0xa742, /* \"Ꝅ\" */ 0xa744, /* \"Ꞣ\" */ 0xa7a2,\n      /* \"Ｋ\" */ 0xff2b,\n    ],\n  ],\n  [\n    [/* \"L\" */ 0x004c],\n    [\n      /* \"Ĺ\" */ 0x0139, /* \"Ļ\" */ 0x013b, /* \"Ľ\" */ 0x013d, /* \"Ŀ\" */ 0x013f,\n      /* \"Ł\" */ 0x0141, /* \"Ƚ\" */ 0x023d, /* \"Ḷ\" */ 0x1e36, /* \"Ḹ\" */ 0x1e38,\n      /* \"Ḻ\" */ 0x1e3a, /* \"Ḽ\" */ 0x1e3c, /* \"Ⓛ\" */ 0x24c1, /* \"Ⱡ\" */ 0x2c60,\n      /* \"Ɫ\" */ 0x2c62, /* \"Ꝇ\" */ 0xa746, /* \"Ꝉ\" */ 0xa748, /* \"Ꞁ\" */ 0xa780,\n      /* \"Ｌ\" */ 0xff2c,\n    ],\n  ],\n  [[/* \"L\" */ 0x004c, /* \"J\" */ 0x004a], [/* \"Ǉ\" */ 0x01c7]],\n  [[/* \"L\" */ 0x004c, /* \"j\" */ 0x006a], [/* \"ǈ\" */ 0x01c8]],\n  [\n    [/* \"M\" */ 0x004d],\n    [\n      /* \"Ɯ\" */ 0x019c, /* \"ϻ\" */ 0x03fb, /* \"Ḿ\" */ 0x1e3e, /* \"Ṁ\" */ 0x1e40,\n      /* \"Ṃ\" */ 0x1e42, /* \"Ⓜ\" */ 0x24c2, /* \"Ɱ\" */ 0x2c6e, /* \"Ｍ\" */ 0xff2d,\n    ],\n  ],\n  [\n    [/* \"N\" */ 0x004e],\n    [\n      /* \"Ñ\" */ 0x00d1, /* \"Ń\" */ 0x0143, /* \"Ņ\" */ 0x0145, /* \"Ň\" */ 0x0147,\n      /* \"Ɲ\" */ 0x019d, /* \"Ǹ\" */ 0x01f8, /* \"Ƞ\" */ 0x0220, /* \"ᴎ\" */ 0x1d0e,\n      /* \"Ṅ\" */ 0x1e44, /* \"Ṇ\" */ 0x1e46, /* \"Ṉ\" */ 0x1e48, /* \"Ṋ\" */ 0x1e4a,\n      /* \"Ⓝ\" */ 0x24c3, /* \"Ꞑ\" */ 0xa790, /* \"Ꞥ\" */ 0xa7a4, /* \"Ｎ\" */ 0xff2e,\n    ],\n  ],\n  [[/* \"N\" */ 0x004e, /* \"J\" */ 0x004a], [/* \"Ǌ\" */ 0x01ca]],\n  [[/* \"N\" */ 0x004e, /* \"j\" */ 0x006a], [/* \"ǋ\" */ 0x01cb]],\n  [\n    [/* \"O\" */ 0x004f],\n    [\n      /* \"Ò\" */ 0x00d2, /* \"Ó\" */ 0x00d3, /* \"Ô\" */ 0x00d4, /* \"Õ\" */ 0x00d5,\n      /* \"Ö\" */ 0x00d6, /* \"Ø\" */ 0x00d8, /* \"Ō\" */ 0x014c, /* \"Ŏ\" */ 0x014e,\n      /* \"Ő\" */ 0x0150, /* \"Ɔ\" */ 0x0186, /* \"Ɵ\" */ 0x019f, /* \"Ơ\" */ 0x01a0,\n      /* \"Ǒ\" */ 0x01d1, /* \"Ǫ\" */ 0x01ea, /* \"Ǭ\" */ 0x01ec, /* \"Ǿ\" */ 0x01fe,\n      /* \"Ȍ\" */ 0x020c, /* \"Ȏ\" */ 0x020e, /* \"Ȫ\" */ 0x022a, /* \"Ȭ\" */ 0x022c,\n      /* \"Ȯ\" */ 0x022e, /* \"Ȱ\" */ 0x0230, /* \"Ṍ\" */ 0x1e4c, /* \"Ṏ\" */ 0x1e4e,\n      /* \"Ṑ\" */ 0x1e50, /* \"Ṓ\" */ 0x1e52, /* \"Ọ\" */ 0x1ecc, /* \"Ỏ\" */ 0x1ece,\n      /* \"Ố\" */ 0x1ed0, /* \"Ồ\" */ 0x1ed2, /* \"Ổ\" */ 0x1ed4, /* \"Ỗ\" */ 0x1ed6,\n      /* \"Ộ\" */ 0x1ed8, /* \"Ớ\" */ 0x1eda, /* \"Ờ\" */ 0x1edc, /* \"Ở\" */ 0x1ede,\n      /* \"Ỡ\" */ 0x1ee0, /* \"Ợ\" */ 0x1ee2, /* \"Ⓞ\" */ 0x24c4, /* \"Ꝋ\" */ 0xa74a,\n      /* \"Ꝍ\" */ 0xa74c, /* \"Ｏ\" */ 0xff2f,\n    ],\n  ],\n  [[/* \"O\" */ 0x004f, /* \"E\" */ 0x0045], [/* \"Œ\" */ 0x0152]],\n  [[/* \"O\" */ 0x004f, /* \"I\" */ 0x0049], [/* \"Ƣ\" */ 0x01a2]],\n  [[/* \"O\" */ 0x004f, /* \"O\" */ 0x004f], [/* \"Ꝏ\" */ 0xa74e]],\n  [[/* \"O\" */ 0x004f, /* \"U\" */ 0x0055], [/* \"Ȣ\" */ 0x0222]],\n  [\n    [/* \"P\" */ 0x0050],\n    [\n      /* \"Ƥ\" */ 0x01a4, /* \"Ṕ\" */ 0x1e54, /* \"Ṗ\" */ 0x1e56, /* \"Ⓟ\" */ 0x24c5,\n      /* \"Ᵽ\" */ 0x2c63, /* \"Ꝑ\" */ 0xa750, /* \"Ꝓ\" */ 0xa752, /* \"Ꝕ\" */ 0xa754,\n      /* \"Ｐ\" */ 0xff30,\n    ],\n  ],\n  [\n    [/* \"Q\" */ 0x0051],\n    [\n      /* \"Ɋ\" */ 0x024a, /* \"Ⓠ\" */ 0x24c6, /* \"Ꝗ\" */ 0xa756, /* \"Ꝙ\" */ 0xa758,\n      /* \"Ｑ\" */ 0xff31,\n    ],\n  ],\n  [\n    [/* \"R\" */ 0x0052],\n    [\n      /* \"Ŕ\" */ 0x0154, /* \"Ŗ\" */ 0x0156, /* \"Ř\" */ 0x0158, /* \"Ȑ\" */ 0x0210,\n      /* \"Ȓ\" */ 0x0212, /* \"Ɍ\" */ 0x024c, /* \"Ṙ\" */ 0x1e58, /* \"Ṛ\" */ 0x1e5a,\n      /* \"Ṝ\" */ 0x1e5c, /* \"Ṟ\" */ 0x1e5e, /* \"Ⓡ\" */ 0x24c7, /* \"Ɽ\" */ 0x2c64,\n      /* \"Ꝛ\" */ 0xa75a, /* \"Ꞃ\" */ 0xa782, /* \"Ꞧ\" */ 0xa7a6, /* \"Ｒ\" */ 0xff32,\n    ],\n  ],\n  [\n    [/* \"S\" */ 0x0053],\n    [\n      /* \"Ś\" */ 0x015a, /* \"Ŝ\" */ 0x015c, /* \"Ş\" */ 0x015e, /* \"Š\" */ 0x0160,\n      /* \"Ș\" */ 0x0218, /* \"Ṡ\" */ 0x1e60, /* \"Ṣ\" */ 0x1e62, /* \"Ṥ\" */ 0x1e64,\n      /* \"Ṧ\" */ 0x1e66, /* \"Ṩ\" */ 0x1e68, /* \"ẞ\" */ 0x1e9e, /* \"Ⓢ\" */ 0x24c8,\n      /* \"Ȿ\" */ 0x2c7e, /* \"Ꞅ\" */ 0xa784, /* \"Ꞩ\" */ 0xa7a8, /* \"Ｓ\" */ 0xff33,\n    ],\n  ],\n  [\n    [/* \"T\" */ 0x0054],\n    [\n      /* \"Ţ\" */ 0x0162, /* \"Ť\" */ 0x0164, /* \"Ŧ\" */ 0x0166, /* \"Ƭ\" */ 0x01ac,\n      /* \"Ʈ\" */ 0x01ae, /* \"Ț\" */ 0x021a, /* \"Ⱦ\" */ 0x023e, /* \"Ṫ\" */ 0x1e6a,\n      /* \"Ṭ\" */ 0x1e6c, /* \"Ṯ\" */ 0x1e6e, /* \"Ṱ\" */ 0x1e70, /* \"Ⓣ\" */ 0x24c9,\n      /* \"Ꞇ\" */ 0xa786, /* \"Ｔ\" */ 0xff34,\n    ],\n  ],\n  [[/* \"T\" */ 0x0054, /* \"Z\" */ 0x005a], [/* \"Ꜩ\" */ 0xa728]],\n  [[/* \"T\" */ 0x0054, /* \"h\" */ 0x0068], [/* \"Þ\" */ 0x00de]],\n  [\n    [/* \"U\" */ 0x0055],\n    [\n      /* \"Ù\" */ 0x00d9, /* \"Ú\" */ 0x00da, /* \"Û\" */ 0x00db, /* \"Ü\" */ 0x00dc,\n      /* \"Ũ\" */ 0x0168, /* \"Ū\" */ 0x016a, /* \"Ŭ\" */ 0x016c, /* \"Ů\" */ 0x016e,\n      /* \"Ű\" */ 0x0170, /* \"Ų\" */ 0x0172, /* \"Ư\" */ 0x01af, /* \"Ǔ\" */ 0x01d3,\n      /* \"Ǖ\" */ 0x01d5, /* \"Ǘ\" */ 0x01d7, /* \"Ǚ\" */ 0x01d9, /* \"Ǜ\" */ 0x01db,\n      /* \"Ȕ\" */ 0x0214, /* \"Ȗ\" */ 0x0216, /* \"Ʉ\" */ 0x0244, /* \"Ṳ\" */ 0x1e72,\n      /* \"Ṵ\" */ 0x1e74, /* \"Ṷ\" */ 0x1e76, /* \"Ṹ\" */ 0x1e78, /* \"Ṻ\" */ 0x1e7a,\n      /* \"Ụ\" */ 0x1ee4, /* \"Ủ\" */ 0x1ee6, /* \"Ứ\" */ 0x1ee8, /* \"Ừ\" */ 0x1eea,\n      /* \"Ử\" */ 0x1eec, /* \"Ữ\" */ 0x1eee, /* \"Ự\" */ 0x1ef0, /* \"Ⓤ\" */ 0x24ca,\n      /* \"Ｕ\" */ 0xff35,\n    ],\n  ],\n  [\n    [/* \"V\" */ 0x0056],\n    [\n      /* \"Ʋ\" */ 0x01b2, /* \"Ʌ\" */ 0x0245, /* \"Ṽ\" */ 0x1e7c, /* \"Ṿ\" */ 0x1e7e,\n      /* \"Ⓥ\" */ 0x24cb, /* \"Ꝟ\" */ 0xa75e, /* \"Ｖ\" */ 0xff36,\n    ],\n  ],\n  [[/* \"V\" */ 0x0056, /* \"Y\" */ 0x0059], [/* \"Ꝡ\" */ 0xa760]],\n  [\n    [/* \"W\" */ 0x0057],\n    [\n      /* \"Ŵ\" */ 0x0174, /* \"Ẁ\" */ 0x1e80, /* \"Ẃ\" */ 0x1e82, /* \"Ẅ\" */ 0x1e84,\n      /* \"Ẇ\" */ 0x1e86, /* \"Ẉ\" */ 0x1e88, /* \"Ⓦ\" */ 0x24cc, /* \"Ⱳ\" */ 0x2c72,\n      /* \"Ｗ\" */ 0xff37,\n    ],\n  ],\n  [\n    [/* \"X\" */ 0x0058],\n    [/* \"Ẋ\" */ 0x1e8a, /* \"Ẍ\" */ 0x1e8c, /* \"Ⓧ\" */ 0x24cd, /* \"Ｘ\" */ 0xff38],\n  ],\n  [\n    [/* \"Y\" */ 0x0059],\n    [\n      /* \"Ý\" */ 0x00dd, /* \"Ŷ\" */ 0x0176, /* \"Ÿ\" */ 0x0178, /* \"Ƴ\" */ 0x01b3,\n      /* \"Ȳ\" */ 0x0232, /* \"Ɏ\" */ 0x024e, /* \"Ẏ\" */ 0x1e8e, /* \"Ỳ\" */ 0x1ef2,\n      /* \"Ỵ\" */ 0x1ef4, /* \"Ỷ\" */ 0x1ef6, /* \"Ỹ\" */ 0x1ef8, /* \"Ỿ\" */ 0x1efe,\n      /* \"Ⓨ\" */ 0x24ce, /* \"Ｙ\" */ 0xff39,\n    ],\n  ],\n  [\n    [/* \"Z\" */ 0x005a],\n    [\n      /* \"Ź\" */ 0x0179, /* \"Ż\" */ 0x017b, /* \"Ž\" */ 0x017d, /* \"Ƶ\" */ 0x01b5,\n      /* \"Ȥ\" */ 0x0224, /* \"Ẑ\" */ 0x1e90, /* \"Ẓ\" */ 0x1e92, /* \"Ẕ\" */ 0x1e94,\n      /* \"Ⓩ\" */ 0x24cf, /* \"Ⱬ\" */ 0x2c6b, /* \"Ɀ\" */ 0x2c7f, /* \"Ꝣ\" */ 0xa762,\n      /* \"Ｚ\" */ 0xff3a,\n    ],\n  ],\n  [\n    [/* \"a\" */ 0x0061],\n    [\n      /* \"à\" */ 0x00e0, /* \"á\" */ 0x00e1, /* \"â\" */ 0x00e2, /* \"ã\" */ 0x00e3,\n      /* \"ä\" */ 0x00e4, /* \"å\" */ 0x00e5, /* \"ā\" */ 0x0101, /* \"ă\" */ 0x0103,\n      /* \"ą\" */ 0x0105, /* \"ǎ\" */ 0x01ce, /* \"ǟ\" */ 0x01df, /* \"ǡ\" */ 0x01e1,\n      /* \"ǻ\" */ 0x01fb, /* \"ȁ\" */ 0x0201, /* \"ȃ\" */ 0x0203, /* \"ȧ\" */ 0x0227,\n      /* \"ɐ\" */ 0x0250, /* \"ɑ\" */ 0x0251, /* \"ḁ\" */ 0x1e01, /* \"ẚ\" */ 0x1e9a,\n      /* \"ạ\" */ 0x1ea1, /* \"ả\" */ 0x1ea3, /* \"ấ\" */ 0x1ea5, /* \"ầ\" */ 0x1ea7,\n      /* \"ẩ\" */ 0x1ea9, /* \"ẫ\" */ 0x1eab, /* \"ậ\" */ 0x1ead, /* \"ắ\" */ 0x1eaf,\n      /* \"ằ\" */ 0x1eb1, /* \"ẳ\" */ 0x1eb3, /* \"ẵ\" */ 0x1eb5, /* \"ặ\" */ 0x1eb7,\n      /* \"ⓐ\" */ 0x24d0, /* \"ⱥ\" */ 0x2c65, /* \"ａ\" */ 0xff41,\n    ],\n  ],\n  [[/* \"a\" */ 0x0061, /* \"a\" */ 0x0061], [/* \"ꜳ\" */ 0xa733]],\n  [\n    [/* \"a\" */ 0x0061, /* \"e\" */ 0x0065],\n    [/* \"æ\" */ 0x00e6, /* \"ǣ\" */ 0x01e3, /* \"ǽ\" */ 0x01fd],\n  ],\n  [[/* \"a\" */ 0x0061, /* \"o\" */ 0x006f], [/* \"ꜵ\" */ 0xa735]],\n  [[/* \"a\" */ 0x0061, /* \"u\" */ 0x0075], [/* \"ꜷ\" */ 0xa737]],\n  [\n    [/* \"a\" */ 0x0061, /* \"v\" */ 0x0076],\n    [/* \"ꜹ\" */ 0xa739, /* \"ꜻ\" */ 0xa73b],\n  ],\n  [[/* \"a\" */ 0x0061, /* \"y\" */ 0x0079], [/* \"ꜽ\" */ 0xa73d]],\n  [\n    [/* \"b\" */ 0x0062],\n    [\n      /* \"ƀ\" */ 0x0180, /* \"Ƃ\" */ 0x0182, /* \"ƃ\" */ 0x0183, /* \"ɓ\" */ 0x0253,\n      /* \"ḃ\" */ 0x1e03, /* \"ḅ\" */ 0x1e05, /* \"ḇ\" */ 0x1e07, /* \"ⓑ\" */ 0x24d1,\n      /* \"ｂ\" */ 0xff42,\n    ],\n  ],\n  [\n    [/* \"c\" */ 0x0063],\n    [\n      /* \"ç\" */ 0x00e7, /* \"ć\" */ 0x0107, /* \"ĉ\" */ 0x0109, /* \"ċ\" */ 0x010b,\n      /* \"č\" */ 0x010d, /* \"ƈ\" */ 0x0188, /* \"ȼ\" */ 0x023c, /* \"ḉ\" */ 0x1e09,\n      /* \"ↄ\" */ 0x2184, /* \"ⓒ\" */ 0x24d2, /* \"ꜿ\" */ 0xa73f, /* \"ｃ\" */ 0xff43,\n    ],\n  ],\n  [\n    [/* \"d\" */ 0x0064],\n    [\n      /* \"ď\" */ 0x010f, /* \"đ\" */ 0x0111, /* \"Ƌ\" */ 0x018b, /* \"ƌ\" */ 0x018c,\n      /* \"ɖ\" */ 0x0256, /* \"ɗ\" */ 0x0257, /* \"ԁ\" */ 0x0501, /* \"Ꮷ\" */ 0x13e7,\n      /* \"ḋ\" */ 0x1e0b, /* \"ḍ\" */ 0x1e0d, /* \"ḏ\" */ 0x1e0f, /* \"ḑ\" */ 0x1e11,\n      /* \"ḓ\" */ 0x1e13, /* \"ⓓ\" */ 0x24d3, /* \"Ɦ\" */ 0xa7aa, /* \"ｄ\" */ 0xff44,\n    ],\n  ],\n  [[/* \"d\" */ 0x0064, /* \"h\" */ 0x0068], [/* \"ð\" */ 0x00f0]],\n  [\n    [/* \"d\" */ 0x0064, /* \"z\" */ 0x007a],\n    [/* \"ǆ\" */ 0x01c6, /* \"ǳ\" */ 0x01f3],\n  ],\n  [\n    [/* \"e\" */ 0x0065],\n    [\n      /* \"è\" */ 0x00e8, /* \"é\" */ 0x00e9, /* \"ê\" */ 0x00ea, /* \"ë\" */ 0x00eb,\n      /* \"ē\" */ 0x0113, /* \"ĕ\" */ 0x0115, /* \"ė\" */ 0x0117, /* \"ę\" */ 0x0119,\n      /* \"ě\" */ 0x011b, /* \"ǝ\" */ 0x01dd, /* \"ȅ\" */ 0x0205, /* \"ȇ\" */ 0x0207,\n      /* \"ȩ\" */ 0x0229, /* \"ɇ\" */ 0x0247, /* \"ḕ\" */ 0x1e15, /* \"ḗ\" */ 0x1e17,\n      /* \"ḙ\" */ 0x1e19, /* \"ḛ\" */ 0x1e1b, /* \"ḝ\" */ 0x1e1d, /* \"ẹ\" */ 0x1eb9,\n      /* \"ẻ\" */ 0x1ebb, /* \"ẽ\" */ 0x1ebd, /* \"ế\" */ 0x1ebf, /* \"ề\" */ 0x1ec1,\n      /* \"ể\" */ 0x1ec3, /* \"ễ\" */ 0x1ec5, /* \"ệ\" */ 0x1ec7, /* \"ⓔ\" */ 0x24d4,\n      /* \"ｅ\" */ 0xff45,\n    ],\n  ],\n  [\n    [/* \"f\" */ 0x0066],\n    [/* \"ƒ\" */ 0x0192, /* \"ḟ\" */ 0x1e1f, /* \"ⓕ\" */ 0x24d5, /* \"ｆ\" */ 0xff46],\n  ],\n  [[/* \"f\" */ 0x0066, /* \"f\" */ 0x0066], [/* \"ﬀ\" */ 0xfb00]],\n  [[/* \"f\" */ 0x0066, /* \"f\" */ 0x0066, /* \"i\" */ 0x0069], [/* \"ﬃ\" */ 0xfb03]],\n  [[/* \"f\" */ 0x0066, /* \"f\" */ 0x0066, /* \"l\" */ 0x006c], [/* \"ﬄ\" */ 0xfb04]],\n  [[/* \"f\" */ 0x0066, /* \"i\" */ 0x0069], [/* \"ﬁ\" */ 0xfb01]],\n  [[/* \"f\" */ 0x0066, /* \"l\" */ 0x006c], [/* \"ﬂ\" */ 0xfb02]],\n  [\n    [/* \"g\" */ 0x0067],\n    [\n      /* \"ĝ\" */ 0x011d, /* \"ğ\" */ 0x011f, /* \"ġ\" */ 0x0121, /* \"ģ\" */ 0x0123,\n      /* \"ǥ\" */ 0x01e5, /* \"ǧ\" */ 0x01e7, /* \"ǵ\" */ 0x01f5, /* \"ɠ\" */ 0x0260,\n      /* \"ᵹ\" */ 0x1d79, /* \"ḡ\" */ 0x1e21, /* \"ⓖ\" */ 0x24d6, /* \"ꝿ\" */ 0xa77f,\n      /* \"ꞡ\" */ 0xa7a1, /* \"ｇ\" */ 0xff47,\n    ],\n  ],\n  [\n    [/* \"h\" */ 0x0068],\n    [\n      /* \"ĥ\" */ 0x0125, /* \"ħ\" */ 0x0127, /* \"ȟ\" */ 0x021f, /* \"ɥ\" */ 0x0265,\n      /* \"ḣ\" */ 0x1e23, /* \"ḥ\" */ 0x1e25, /* \"ḧ\" */ 0x1e27, /* \"ḩ\" */ 0x1e29,\n      /* \"ḫ\" */ 0x1e2b, /* \"ẖ\" */ 0x1e96, /* \"ⓗ\" */ 0x24d7, /* \"ⱨ\" */ 0x2c68,\n      /* \"ⱶ\" */ 0x2c76, /* \"ｈ\" */ 0xff48,\n    ],\n  ],\n  [[/* \"h\" */ 0x0068, /* \"v\" */ 0x0076], [/* \"ƕ\" */ 0x0195]],\n  [\n    [/* \"i\" */ 0x0069],\n    [\n      /* \"ì\" */ 0x00ec, /* \"í\" */ 0x00ed, /* \"î\" */ 0x00ee, /* \"ï\" */ 0x00ef,\n      /* \"ĩ\" */ 0x0129, /* \"ī\" */ 0x012b, /* \"ĭ\" */ 0x012d, /* \"į\" */ 0x012f,\n      /* \"ı\" */ 0x0131, /* \"ǐ\" */ 0x01d0, /* \"ȉ\" */ 0x0209, /* \"ȋ\" */ 0x020b,\n      /* \"ɨ\" */ 0x0268, /* \"ḭ\" */ 0x1e2d, /* \"ḯ\" */ 0x1e2f, /* \"ỉ\" */ 0x1ec9,\n      /* \"ị\" */ 0x1ecb, /* \"ⓘ\" */ 0x24d8, /* \"ｉ\" */ 0xff49,\n    ],\n  ],\n  [\n    [/* \"j\" */ 0x006a],\n    [\n      /* \"ĵ\" */ 0x0135, /* \"ǰ\" */ 0x01f0, /* \"ɉ\" */ 0x0249, /* \"ⓙ\" */ 0x24d9,\n      /* \"ｊ\" */ 0xff4a,\n    ],\n  ],\n  [\n    [/* \"k\" */ 0x006b],\n    [\n      /* \"ķ\" */ 0x0137, /* \"ƙ\" */ 0x0199, /* \"ǩ\" */ 0x01e9, /* \"ḱ\" */ 0x1e31,\n      /* \"ḳ\" */ 0x1e33, /* \"ḵ\" */ 0x1e35, /* \"ⓚ\" */ 0x24da, /* \"ⱪ\" */ 0x2c6a,\n      /* \"ꝁ\" */ 0xa741, /* \"ꝃ\" */ 0xa743, /* \"ꝅ\" */ 0xa745, /* \"ꞣ\" */ 0xa7a3,\n      /* \"ｋ\" */ 0xff4b,\n    ],\n  ],\n  [\n    [/* \"l\" */ 0x006c],\n    [\n      /* \"ĺ\" */ 0x013a, /* \"ļ\" */ 0x013c, /* \"ľ\" */ 0x013e, /* \"ŀ\" */ 0x0140,\n      /* \"ł\" */ 0x0142, /* \"ſ\" */ 0x017f, /* \"ƚ\" */ 0x019a, /* \"ɫ\" */ 0x026b,\n      /* \"ɭ\" */ 0x026d, /* \"ḷ\" */ 0x1e37, /* \"ḹ\" */ 0x1e39, /* \"ḻ\" */ 0x1e3b,\n      /* \"ḽ\" */ 0x1e3d, /* \"ⓛ\" */ 0x24db, /* \"ⱡ\" */ 0x2c61, /* \"ꝇ\" */ 0xa747,\n      /* \"ꝉ\" */ 0xa749, /* \"ꞁ\" */ 0xa781, /* \"ｌ\" */ 0xff4c,\n    ],\n  ],\n  [[/* \"l\" */ 0x006c, /* \"j\" */ 0x006a], [/* \"ǉ\" */ 0x01c9]],\n  [\n    [/* \"m\" */ 0x006d],\n    [\n      /* \"ɯ\" */ 0x026f, /* \"ɱ\" */ 0x0271, /* \"ḿ\" */ 0x1e3f, /* \"ṁ\" */ 0x1e41,\n      /* \"ṃ\" */ 0x1e43, /* \"ⓜ\" */ 0x24dc, /* \"ｍ\" */ 0xff4d,\n    ],\n  ],\n  [\n    [/* \"n\" */ 0x006e],\n    [\n      /* \"ñ\" */ 0x00f1, /* \"ń\" */ 0x0144, /* \"ņ\" */ 0x0146, /* \"ň\" */ 0x0148,\n      /* \"ŉ\" */ 0x0149, /* \"ƞ\" */ 0x019e, /* \"ǹ\" */ 0x01f9, /* \"ɲ\" */ 0x0272,\n      /* \"л\" */ 0x043b, /* \"ԉ\" */ 0x0509, /* \"ṅ\" */ 0x1e45, /* \"ṇ\" */ 0x1e47,\n      /* \"ṉ\" */ 0x1e49, /* \"ṋ\" */ 0x1e4b, /* \"ⓝ\" */ 0x24dd, /* \"ꞑ\" */ 0xa791,\n      /* \"ꞥ\" */ 0xa7a5, /* \"ｎ\" */ 0xff4e,\n    ],\n  ],\n  [[/* \"n\" */ 0x006e, /* \"j\" */ 0x006a], [/* \"ǌ\" */ 0x01cc]],\n  [\n    [/* \"o\" */ 0x006f],\n    [\n      /* \"ò\" */ 0x00f2, /* \"ó\" */ 0x00f3, /* \"ô\" */ 0x00f4, /* \"õ\" */ 0x00f5,\n      /* \"ö\" */ 0x00f6, /* \"ø\" */ 0x00f8, /* \"ō\" */ 0x014d, /* \"ŏ\" */ 0x014f,\n      /* \"ő\" */ 0x0151, /* \"ơ\" */ 0x01a1, /* \"ǒ\" */ 0x01d2, /* \"ǫ\" */ 0x01eb,\n      /* \"ǭ\" */ 0x01ed, /* \"ǿ\" */ 0x01ff, /* \"ȍ\" */ 0x020d, /* \"ȏ\" */ 0x020f,\n      /* \"ȫ\" */ 0x022b, /* \"ȭ\" */ 0x022d, /* \"ȯ\" */ 0x022f, /* \"ȱ\" */ 0x0231,\n      /* \"ɔ\" */ 0x0254, /* \"ɵ\" */ 0x0275, /* \"ᴑ\" */ 0x1d11, /* \"ṍ\" */ 0x1e4d,\n      /* \"ṏ\" */ 0x1e4f, /* \"ṑ\" */ 0x1e51, /* \"ṓ\" */ 0x1e53, /* \"ọ\" */ 0x1ecd,\n      /* \"ỏ\" */ 0x1ecf, /* \"ố\" */ 0x1ed1, /* \"ồ\" */ 0x1ed3, /* \"ổ\" */ 0x1ed5,\n      /* \"ỗ\" */ 0x1ed7, /* \"ộ\" */ 0x1ed9, /* \"ớ\" */ 0x1edb, /* \"ờ\" */ 0x1edd,\n      /* \"ở\" */ 0x1edf, /* \"ỡ\" */ 0x1ee1, /* \"ợ\" */ 0x1ee3, /* \"ⓞ\" */ 0x24de,\n      /* \"ꝋ\" */ 0xa74b, /* \"ꝍ\" */ 0xa74d, /* \"ｏ\" */ 0xff4f,\n    ],\n  ],\n  [[/* \"o\" */ 0x006f, /* \"e\" */ 0x0065], [/* \"œ\" */ 0x0153]],\n  [[/* \"o\" */ 0x006f, /* \"i\" */ 0x0069], [/* \"ƣ\" */ 0x01a3]],\n  [[/* \"o\" */ 0x006f, /* \"o\" */ 0x006f], [/* \"ꝏ\" */ 0xa74f]],\n  [[/* \"o\" */ 0x006f, /* \"u\" */ 0x0075], [/* \"ȣ\" */ 0x0223]],\n  [\n    [/* \"p\" */ 0x0070],\n    [\n      /* \"ƥ\" */ 0x01a5, /* \"ρ\" */ 0x03c1, /* \"ᵽ\" */ 0x1d7d, /* \"ṕ\" */ 0x1e55,\n      /* \"ṗ\" */ 0x1e57, /* \"ⓟ\" */ 0x24df, /* \"ꝑ\" */ 0xa751, /* \"ꝓ\" */ 0xa753,\n      /* \"ꝕ\" */ 0xa755, /* \"ｐ\" */ 0xff50,\n    ],\n  ],\n  [\n    [/* \"q\" */ 0x0071],\n    [\n      /* \"ɋ\" */ 0x024b, /* \"ⓠ\" */ 0x24e0, /* \"ꝗ\" */ 0xa757, /* \"ꝙ\" */ 0xa759,\n      /* \"ｑ\" */ 0xff51,\n    ],\n  ],\n  [\n    [/* \"r\" */ 0x0072],\n    [\n      /* \"ŕ\" */ 0x0155, /* \"ŗ\" */ 0x0157, /* \"ř\" */ 0x0159, /* \"ȑ\" */ 0x0211,\n      /* \"ȓ\" */ 0x0213, /* \"ɍ\" */ 0x024d, /* \"ɽ\" */ 0x027d, /* \"ṙ\" */ 0x1e59,\n      /* \"ṛ\" */ 0x1e5b, /* \"ṝ\" */ 0x1e5d, /* \"ṟ\" */ 0x1e5f, /* \"ⓡ\" */ 0x24e1,\n      /* \"ꝛ\" */ 0xa75b, /* \"ꞃ\" */ 0xa783, /* \"ꞧ\" */ 0xa7a7, /* \"ｒ\" */ 0xff52,\n    ],\n  ],\n  [\n    [/* \"s\" */ 0x0073],\n    [\n      /* \"ś\" */ 0x015b, /* \"ŝ\" */ 0x015d, /* \"ş\" */ 0x015f, /* \"š\" */ 0x0161,\n      /* \"ș\" */ 0x0219, /* \"ȿ\" */ 0x023f, /* \"ʂ\" */ 0x0282, /* \"ṡ\" */ 0x1e61,\n      /* \"ṣ\" */ 0x1e63, /* \"ṥ\" */ 0x1e65, /* \"ṧ\" */ 0x1e67, /* \"ṩ\" */ 0x1e69,\n      /* \"ẛ\" */ 0x1e9b, /* \"ⓢ\" */ 0x24e2, /* \"ꞅ\" */ 0xa785, /* \"ꞩ\" */ 0xa7a9,\n      /* \"ｓ\" */ 0xff53,\n    ],\n  ],\n  [[/* \"s\" */ 0x0073, /* \"s\" */ 0x0073], [/* \"ß\" */ 0x00df]],\n  [\n    [/* \"t\" */ 0x0074],\n    [\n      /* \"ţ\" */ 0x0163, /* \"ť\" */ 0x0165, /* \"ŧ\" */ 0x0167, /* \"ƭ\" */ 0x01ad,\n      /* \"ț\" */ 0x021b, /* \"ʈ\" */ 0x0288, /* \"ṫ\" */ 0x1e6b, /* \"ṭ\" */ 0x1e6d,\n      /* \"ṯ\" */ 0x1e6f, /* \"ṱ\" */ 0x1e71, /* \"ẗ\" */ 0x1e97, /* \"ⓣ\" */ 0x24e3,\n      /* \"ⱦ\" */ 0x2c66, /* \"ꞇ\" */ 0xa787, /* \"ｔ\" */ 0xff54,\n    ],\n  ],\n  [[/* \"t\" */ 0x0074, /* \"h\" */ 0x0068], [/* \"þ\" */ 0x00fe]],\n  [[/* \"t\" */ 0x0074, /* \"z\" */ 0x007a], [/* \"ꜩ\" */ 0xa729]],\n  [\n    [/* \"u\" */ 0x0075],\n    [\n      /* \"ù\" */ 0x00f9, /* \"ú\" */ 0x00fa, /* \"û\" */ 0x00fb, /* \"ü\" */ 0x00fc,\n      /* \"ũ\" */ 0x0169, /* \"ū\" */ 0x016b, /* \"ŭ\" */ 0x016d, /* \"ů\" */ 0x016f,\n      /* \"ű\" */ 0x0171, /* \"ų\" */ 0x0173, /* \"ư\" */ 0x01b0, /* \"ǔ\" */ 0x01d4,\n      /* \"ǖ\" */ 0x01d6, /* \"ǘ\" */ 0x01d8, /* \"ǚ\" */ 0x01da, /* \"ǜ\" */ 0x01dc,\n      /* \"ȕ\" */ 0x0215, /* \"ȗ\" */ 0x0217, /* \"ʉ\" */ 0x0289, /* \"ṳ\" */ 0x1e73,\n      /* \"ṵ\" */ 0x1e75, /* \"ṷ\" */ 0x1e77, /* \"ṹ\" */ 0x1e79, /* \"ṻ\" */ 0x1e7b,\n      /* \"ụ\" */ 0x1ee5, /* \"ủ\" */ 0x1ee7, /* \"ứ\" */ 0x1ee9, /* \"ừ\" */ 0x1eeb,\n      /* \"ử\" */ 0x1eed, /* \"ữ\" */ 0x1eef, /* \"ự\" */ 0x1ef1, /* \"ⓤ\" */ 0x24e4,\n      /* \"ｕ\" */ 0xff55,\n    ],\n  ],\n  [\n    [/* \"v\" */ 0x0076],\n    [\n      /* \"ʋ\" */ 0x028b, /* \"ʌ\" */ 0x028c, /* \"ṽ\" */ 0x1e7d, /* \"ṿ\" */ 0x1e7f,\n      /* \"ⓥ\" */ 0x24e5, /* \"ꝟ\" */ 0xa75f, /* \"ｖ\" */ 0xff56,\n    ],\n  ],\n  [[/* \"v\" */ 0x0076, /* \"y\" */ 0x0079], [/* \"ꝡ\" */ 0xa761]],\n  [\n    [/* \"w\" */ 0x0077],\n    [\n      /* \"ŵ\" */ 0x0175, /* \"ẁ\" */ 0x1e81, /* \"ẃ\" */ 0x1e83, /* \"ẅ\" */ 0x1e85,\n      /* \"ẇ\" */ 0x1e87, /* \"ẉ\" */ 0x1e89, /* \"ẘ\" */ 0x1e98, /* \"ⓦ\" */ 0x24e6,\n      /* \"ⱳ\" */ 0x2c73, /* \"ｗ\" */ 0xff57,\n    ],\n  ],\n  [\n    [/* \"x\" */ 0x0078],\n    [/* \"ẋ\" */ 0x1e8b, /* \"ẍ\" */ 0x1e8d, /* \"ⓧ\" */ 0x24e7, /* \"ｘ\" */ 0xff58],\n  ],\n  [\n    [/* \"y\" */ 0x0079],\n    [\n      /* \"ý\" */ 0x00fd, /* \"ÿ\" */ 0x00ff, /* \"ŷ\" */ 0x0177, /* \"ƴ\" */ 0x01b4,\n      /* \"ȳ\" */ 0x0233, /* \"ɏ\" */ 0x024f, /* \"ẏ\" */ 0x1e8f, /* \"ẙ\" */ 0x1e99,\n      /* \"ỳ\" */ 0x1ef3, /* \"ỵ\" */ 0x1ef5, /* \"ỷ\" */ 0x1ef7, /* \"ỹ\" */ 0x1ef9,\n      /* \"ỿ\" */ 0x1eff, /* \"ⓨ\" */ 0x24e8, /* \"ｙ\" */ 0xff59,\n    ],\n  ],\n  [\n    [/* \"z\" */ 0x007a],\n    [\n      /* \"ź\" */ 0x017a, /* \"ż\" */ 0x017c, /* \"ž\" */ 0x017e, /* \"ƶ\" */ 0x01b6,\n      /* \"ȥ\" */ 0x0225, /* \"ɀ\" */ 0x0240, /* \"ẑ\" */ 0x1e91, /* \"ẓ\" */ 0x1e93,\n      /* \"ẕ\" */ 0x1e95, /* \"ⓩ\" */ 0x24e9, /* \"ⱬ\" */ 0x2c6c, /* \"ꝣ\" */ 0xa763,\n      /* \"ｚ\" */ 0xff5a,\n    ],\n  ],\n  // ----- Punctuators -----\n  [\n    [/* \".\" */ 0x002e, /* \".\" */ 0x002e, /* \".\" */ 0x002e],\n    [/* HORIZONTAL ELLIPSIS */ 0x2026],\n  ],\n  [[/* \"?\" */ 0x003f, /* \"?\" */ 0x003f], [/* DOUBLE QUESTION MARK */ 0x2047]],\n  [\n    [/* \"?\" */ 0x003f, /* \"!\" */ 0x0021],\n    [/* QUESTION EXCLAMATION MARK */ 0x2048],\n  ],\n]);\n\nconst replaceMap = ((data: [to: CodePoint, from: CodePoint[]][]) => {\n  const map = new Map<CodePoint, CodePoint>();\n  for (const [to, from] of data) {\n    for (const codePoint of from) {\n      map.set(codePoint, to);\n    }\n  }\n  return map;\n})([\n  [/* \"!\" */ 0x0021, [/* INVERTED EXCLAMATION MARK */ 0x00a1]],\n  [\n    /* '\"' */ 0x0022,\n    [\n      /* LEFT-POINTING DOUBLE ANGLE QUOTATION MARK */ 0x00ab,\n      /* RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK */ 0x00bb,\n      /* LEFT DOUBLE QUOTATION MARK */ 0x201c,\n      /* RIGHT DOUBLE QUOTATION MARK */ 0x201d,\n      /* DOUBLE LOW-9 QUOTATION MARK */ 0x201e,\n      /* DOUBLE HIGH-REVERSED-9 QUOTATION MARK */ 0x201f,\n      /* SINGLE LEFT-POINTING ANGLE QUOTATION MARK */ 0x2039,\n      /* SINGLE RIGHT-POINTING ANGLE QUOTATION MARK */ 0x203a,\n    ],\n  ],\n  [\n    /* \"'\" */ 0x0027,\n    [\n      /* LEFT SINGLE QUOTATION MARK */ 0x2018,\n      /* RIGHT SINGLE QUOTATION MARK */ 0x2019,\n    ],\n  ],\n  [\n    /* \"-\" */ 0x002d,\n    [\n      /* HYPHEN */ 0x2010, /* NON-BREAKING HYPHEN */ 0x2011,\n      /* FIGURE DASH */ 0x2012, /* EN DASH */ 0x2013, /* EM DASH */ 0x2014,\n    ],\n  ],\n  [/* \"?\" */ 0x003f, [/* INVERTED QUESTION MARK */ 0x00bf]],\n]);\n","import { type CodePoint } from \"./types.ts\";\n\nexport const isControl = (codePoint: CodePoint): boolean => codePoint < 0x0020;\n\nexport const isLinebreak = (codePoint: CodePoint): boolean =>\n  codePoint === /* LINE FEED */ 0x000a ||\n  codePoint === /* LINE TABULATION */ 0x000b ||\n  codePoint === /* FORM FEED */ 0x000c ||\n  codePoint === /* CARRIAGE RETURN */ 0x000d ||\n  codePoint === /* LINE SEPARATOR */ 0x2028 ||\n  codePoint === /* PARAGRAPH SEPARATOR */ 0x2029;\n\nexport const isWhitespace = (codePoint: CodePoint): boolean =>\n  codePoint === /* CHARACTER TABULATION */ 0x0009 ||\n  codePoint === /* LINE FEED */ 0x000a ||\n  codePoint === /* LINE TABULATION */ 0x000b ||\n  codePoint === /* FORM FEED */ 0x000c ||\n  codePoint === /* CARRIAGE RETURN */ 0x000d ||\n  codePoint === /* SPACE */ 0x0020 ||\n  codePoint === /* NO-BREAK SPACE */ 0x00a0 ||\n  codePoint === /* EN QUAD */ 0x2000 ||\n  codePoint === /* EM QUAD */ 0x2001 ||\n  codePoint === /* EN SPACE */ 0x2002 ||\n  codePoint === /* EM SPACE */ 0x2003 ||\n  codePoint === /* THREE-PER-EM SPACE */ 0x2004 ||\n  codePoint === /* FOUR-PER-EM SPACE */ 0x2005 ||\n  codePoint === /* SIX-PER-EM SPACE */ 0x2006 ||\n  codePoint === /* FIGURE SPACE */ 0x2007 ||\n  codePoint === /* PUNCTUATION SPACE */ 0x2008 ||\n  codePoint === /* THIN SPACE */ 0x2009 ||\n  codePoint === /* HAIR SPACE */ 0x200a ||\n  codePoint === /* LINE SEPARATOR */ 0x2028 ||\n  codePoint === /* PARAGRAPH SEPARATOR */ 0x2029;\n","import { toCodePoints } from \"./codepoints.ts\";\nimport { isWhitespace } from \"./whitespace.ts\";\n\nexport type TextStats = {\n  readonly numWhitespace: number;\n  readonly numCharacters: number;\n  readonly numWords: number;\n  readonly numUniqueWords: number;\n  readonly avgWordLength: number;\n  readonly wordCount: readonly WordCount[];\n};\n\nexport type WordCount = {\n  readonly word: string;\n  readonly count: number;\n};\n\nexport const textStatsOf = (\n  locale: string | Intl.Locale,\n  text: string | readonly string[],\n): TextStats => {\n  if (typeof locale === \"string\") {\n    locale = new Intl.Locale(locale);\n  }\n  const words = new Intl.Segmenter(locale, { granularity: \"word\" });\n  const graphemes = new Intl.Segmenter(locale, { granularity: \"grapheme\" });\n  const collator = new Intl.Collator(locale);\n  const counts = new Map<string, number>();\n  const lengths = new Map<string, number>();\n  let numWhitespace = 0;\n  let numCharacters = 0;\n  let numWords = 0;\n  let lenWords = 0;\n\n  const wordLength = (word: string): number => {\n    let length = lengths.get(word);\n    if (length == null) {\n      length = 0;\n      for (const grapheme of graphemes.segment(word)) {\n        length += 1;\n      }\n      lengths.set(word, length);\n    }\n    return length;\n  };\n\n  const append = (text: string): void => {\n    for (const { segment, isWordLike } of words.segment(text.normalize())) {\n      if (isWordLike) {\n        numWords += 1;\n        const word = segment.toLocaleLowerCase(locale);\n        counts.set(word, (counts.get(word) ?? 0) + 1);\n        const length = wordLength(word);\n        lenWords += length;\n        numCharacters += length;\n      } else {\n        if (segment === \" \") {\n          numWhitespace += 1;\n        } else {\n          for (const codePoint of toCodePoints(segment)) {\n            if (isWhitespace(codePoint)) {\n              numWhitespace += 1;\n            } else {\n              numCharacters += 1;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  if (Array.isArray(text)) {\n    for (const item of text) {\n      append(item as string);\n    }\n  } else {\n    append(text as string);\n  }\n\n  const numUniqueWords = counts.size;\n  const avgWordLength = numWords > 0 ? lenWords / numWords : 0;\n  const wordCount = Array.from(counts.entries())\n    .map(([word, count]) => ({ word, count }))\n    .sort((a, b) => b.count - a.count || collator.compare(a.word, b.word));\n\n  return {\n    numWhitespace,\n    numCharacters,\n    numWords,\n    numUniqueWords,\n    avgWordLength,\n    wordCount,\n  };\n};\n"],"names":["Error","name","constructor","message","options","super","Symbol","toStringTag","buffer","Uint8Array","ArrayBuffer","isView","byteOffset","byteLength","Writer","this","DataView","Math","max","totalSize","set","putInt8","value","Number","isInteger","TypeError","setInt8","putUint8","setUint8","putInt16","setInt16","putUint16","setUint16","putInt32","setInt32","putUint32","setUint32","putFloat32","setFloat32","putFloat64","setFloat64","putIntVlq","putUintVlq","putString","byteCount","i","length","codePoint","codePointAt","encodedByteCount","encode","putBuffer","array","Reader","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","getIntVlq","getUintVlq","b0","b1","b2","b3","b4","getString","endOffset","String","fromCodePoint","decode","getBuffer","position","remaining","table","c","j","scramble","k","floor","random","r","crc","update","a","g","seed","v","modMultiply","stream","p","b","Alphabet","as","Component","className","id","title","model","language","letters","dir","direction","map","label","join","Letter","f","toString","digits","punctuators","specials","programming","toLetter","letter","codePointOrder","sort","frequencyOrder","weightedFrequencyOrder","weight","restrict","codePoints","filter","has","normalize","sum","reduce","signature","Object","freeze","load","reader","readSignature","chain","order","size","alphabet","push","readChain","segments","segmentIndex","segment","entryIndex","index","frequency","readSegments","compress","writer","writeSignature","writeChain","writeSegments","letterName","Map","get","entries","toNgram1","ngram","add","toNgram2","codePoint0","width","offsets","pow","Array","indexOf","unscrambleWord","word","s","blacklistByLanguage","items","AR","BE","DE","EN","ES","FA","FR","HE","IT","NL","PL","PT","RU","SV","TR","UK","list","Set","minLength","maxLength","PhoneticModel","nextWord","ngram1","ngram2","makePhoneticModel","data","prefixList","PrefixList","prefixes","findPrefixes","attempt","retry","includes","entry","Prefix","matches","every","walk","prefix","pop","focusedCodePoint","censor","blacklist","allow","lowerCase","getBlacklist","PhoneticModelContext","createContext","FakePhoneticModel","static","async","letter1","letter2","letter3","letter4","letter5","letter6","letter7","letter8","letter9","letter10","words","rng","mark","reset","FakeRNGStream","Filter","letters0","focused0","focused","codePointOf","toCodePoints","text","iterator","result","done","next","charCount","toCombined","toBase","isDiacritic","combineDiacritic","base","combining","baseList","combinedList","combined","formatCodePoint","padStart","expand","expandMap","replace","replaceMap","to","from","isControl","isLinebreak","isWhitespace","textStatsOf","locale","Intl","Locale","Segmenter","granularity","graphemes","collator","Collator","counts","lengths","numWhitespace","numCharacters","numWords","lenWords","wordLength","grapheme","append","isWordLike","toLocaleLowerCase","isArray","item","numUniqueWords","avgWordLength","wordCount","count","compare"],"sourceRoot":""}