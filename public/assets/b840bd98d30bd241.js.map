{"version":3,"file":"b840bd98d30bd241.js","mappings":"mIAAO,MAAMA,UAAsBC,MACxBC,KAAO,gBAEhB,WAAAC,CAAYC,EAAkBC,GAC5BC,MAAMF,EAASC,EACjB,CAEA,IAAKE,OAAOC,eACV,MAAO,eACT,E,4CCOK,SAASC,EAAUC,GACxB,MAAOC,EAAOC,IAAY,IAAAC,UAAsB,CAC9CC,KAAM,UACNC,MAAO,EACPC,QAAS,IAwBX,OArBA,IAAAC,YAAU,KACR,IAAIC,GAAY,EAehB,MAbaC,WACX,MAAMC,QAAgBV,EAAQW,MAAK,CAACN,EAAOC,KACpCE,GACHN,EAAS,CAAEE,KAAM,UAAWC,QAAOC,WACrC,IAEGE,GACHN,EAAS,CAAEE,KAAM,QAASM,WAC5B,EAGFC,GAAOC,MAAM,MAEN,KACLJ,GAAY,CAAI,CACjB,GACA,CAACR,IAEGC,CACT,C,cCvCO,SAASY,EAAWC,GACzBC,QAAQD,MAAMA,GACoB,SAA9BE,QAAQC,IAAIC,eACd,KAAWC,OACT,iCACE,mDACA,4FAEFL,EAGN,CCZO,SAASM,GAAe,QAC7BpB,EAAO,eACPqB,EAAc,SACdC,IAMA,MAAOZ,EAASa,IAAc,IAAApB,UAASkB,GACvC,OACE,SAAC,KAAcG,SAAQ,CACrBC,MAAO,CACLf,UACAgB,cAAgBC,IACdJ,EAAW,IAAIb,KAAYiB,IAC3B3B,EAAQ4B,OAAOD,GAAYf,MAAMC,EAAW,EAE9CgB,aAAc,KACZN,EAAW,IACXvB,EAAQ8B,QAAQlB,MAAMC,EAAW,GAEpC,SAEAS,GAGP,C,wBChCO,MAAMS,UAA2BxC,MAC7BC,KAAO,qBAEhB,WAAAC,CAAYC,EAAkBC,GAC5BC,MAAMF,EAASC,EACjB,CAEA,IAAKE,OAAOC,eACV,MAAO,oBACT,E,aCPK,MAAMkC,EAAmB,WAEnB,GAAS,IAAI,MACvBC,SAASD,GACTC,SAH2B,GAI3BC,SCAI,SAASC,EAAYC,EAAgBC,GAC1C,MAAMC,EAAU,IAAID,EAAOE,WAC3BH,EAAOI,SAASH,EAAOI,OAAOC,KAC9BN,EAAOI,SAASH,EAAOM,SAASD,KAChCN,EAAOQ,UAAUC,KAAKC,MAAMT,EAAOU,UAAY,MAC/CX,EAAOY,WAAWX,EAAOY,MACzBb,EAAOY,WAAWX,EAAOa,QACzBd,EAAOY,WAAWX,EAAOc,QACzBf,EAAOY,WAAWV,EAAQY,QAC1B,IAAK,MAAME,KAAUd,EACnBF,EAAOY,WAAWI,EAAOC,WACzBjB,EAAOY,WAAWI,EAAOE,UACzBlB,EAAOY,WAAWI,EAAOG,WACzBnB,EAAOY,WAAWI,EAAOI,WAE7B,CAQO,SAASC,EAAWC,GACzB,MAAMC,EAAYD,EAAOE,WACnBC,EAAcH,EAAOE,WACrBE,EAAiC,IAArBJ,EAAOK,YACnBd,EAAOS,EAAOM,aACdd,EAASQ,EAAOM,aAChBb,EAASO,EAAOM,aAChBC,EAAOP,EAAOM,aACd1B,EAAoB,GAC1B,IAAK,IAAI4B,EAAI,EAAGA,EAAID,EAAMC,IAAK,CAC7B,MAAMb,EAAYK,EAAOM,aACnBV,EAAWI,EAAOM,aAClBT,EAAYG,EAAOM,aACnBR,EAAaE,EAAOM,aAC1B1B,EAAQ6B,KAAK,CACXd,YACAC,WACAC,YACAC,cAEJ,CACA,OAAO,IAAI,KACT,KAAOY,IAAIC,KAAKV,GAChB,KAASS,IAAIC,KAAKR,GAClBC,EACAZ,EACAD,EACAE,EACA,IAAI,KAAUb,GAElB,CAQO,SAAU,EAAsBoB,GACrC,GAAIA,EAAOY,YAAc,EAAG,CAC1B,ID7DG,SAAwBZ,GAC7B,OACEA,EAAOY,aAAe,EAAOC,YAC7Bb,EAAOK,cAAgB/B,GATG,IAU1B0B,EAAOK,WAEX,CCuDSS,CAAed,GAClB,MAAM,IAAI3B,EAAmB,kBAE/B,UAXG,UAAsB2B,GAC3B,KAAOA,EAAOY,YAAc,SACpBb,EAAWC,EAErB,CAQae,CAAYf,EACrB,CAAE,MAAOgB,GACP,MAAM,IAAI3C,EAAmB,sBAAuB,CAAE4C,MAAOD,GAC/D,CACF,CACF,C,cCxDO,SAASE,EAAavC,GAC3B,MAAO,CACLwC,EAAGxC,EAAOI,OAAOqC,GACjBC,EAAG1C,EAAOM,SAASmC,GACnBE,GAAI3C,EAAOU,UACXkC,EAAG5C,EAAOa,OACVgC,EAAG7C,EAAOY,KACVkC,EAAG9C,EAAOc,OACViC,EAAGC,EAAgBhD,EAAOE,WAE9B,CAEO,SAAS8C,EAAgB9C,GAC9B,MAAM+C,EAMF,CAAC,EACL,IAAK,MAAM,UAAEjC,EAAS,SAAEC,EAAQ,UAAEC,EAAS,WAAEC,KAAgBjB,EAC3D+C,EAAKjC,GAAa,CAChB+B,EAAG9B,EACHyB,EAAGxB,EACH2B,EAAG1B,GAGP,OAAO8B,CACT,CAEO,SAASC,EAAeD,GAC7B,KAAK,QAAcA,GACjB,OAAO,KAET,MACET,EAAGW,EACHT,EAAGU,EACHT,GAAIjC,EACJkC,EAAG/B,EACHgC,EAAGjC,EACHkC,EAAGhC,EACHiC,EAAGM,GACDJ,EACJ,MAEI,QAASE,KACT,QAASC,IACTE,OAAOC,cAAc7C,IACrB4C,OAAOC,cAAc1C,IACrByC,OAAOC,cAAc3C,IACrB0C,OAAOC,cAAczC,IAGvB,OAAO,KAET,MAAMZ,EAmBD,SAA2B+C,GAChC,KAAK,QAAcA,GACjB,OAAO,KAET,MAAMhD,EAAU,GAChB,IAAK,MAAOuD,EAAKzC,KAAW0C,OAAOC,QAAQT,GAAO,CAChD,MAAMjC,EAAYsC,OAAOE,GACzB,KACIF,OAAOC,cAAcvC,IAAcA,EAAY,GAAKA,GAAa,OAEnE,OAAO,KAET,KAAK,QAAcD,GACjB,OAAO,KAET,MACEgC,EAAG9B,EACHyB,EAAGxB,EACH2B,EAAG1B,GACDJ,EAKJ,KAEIuC,OAAOC,cAActC,IACrBqC,OAAOC,cAAcrC,IACrBoC,OAAOK,SAASxC,IAGlB,OAAO,KAETlB,EAAQ6B,KAAK,CACXd,YACAC,WACAC,YACAC,WAAYX,KAAKC,MAAMU,IAE3B,CACA,OAAO,IAAI,KAAUlB,EACvB,CA5DoB2D,CAAkBP,GACpC,GAAiB,MAAbnD,EACF,OAAO,KAET,IACE,OAAO,IAAI,KACT,KAAO6B,IAAI8B,IAwDjB,SAA2BpB,GAEzB,OAAQA,GACN,IAAK,KACH,OAAO,KAAOqB,MAAMrB,GACtB,IAAK,KACH,OAAO,KAAOsB,MAAMtB,GACtB,IAAK,KACH,OAAO,KAAOuB,MAAMvB,GACtB,IAAK,KACH,OAAO,KAAOwB,MAAMxB,GACtB,IAAK,KACH,OAAO,KAAOyB,MAAMzB,GACtB,IAAK,KACH,OAAO,KAAO0B,MAAM1B,GACtB,IAAK,KACH,OAAO,KAAO2B,MAAM3B,GACtB,IAAK,KACH,OAAO,KAAO4B,MAAM5B,GACtB,IAAK,KACH,OAAO,KAAO6B,MAAM7B,GACtB,IAAK,KACH,OAAO,KAAO8B,MAAM9B,GACtB,IAAK,KACH,OAAO,KAAO+B,MAAM/B,GACtB,IAAK,mBACH,OAAO,KAAOgC,iBAAiBhC,GACjC,IAAK,aACH,OAAO,KAAOiC,WAAWjC,GAC3B,IAAK,gBACH,OAAO,KAAOkC,mBAAmBlC,GACnC,IAAK,uBACH,OAAO,KAAOmC,qBAAqBnC,GACrC,IAAK,YACH,OAAO,KAAOoC,UAAUpC,GAC1B,IAAK,aACH,OAAO,KAAOqC,WAAWrC,GAC3B,QACE,OAAOA,EAEb,CAhGqBsC,CAAkB5B,IACjC,KAASpB,IAAI8B,IAiGnB,SAAuBpB,GACrB,OAAQA,GACN,IAAK,SACH,OAAO,KAASuC,UAAUvC,GAC5B,IAAK,SACH,OAAO,KAASwC,QAAQxC,GAC1B,QACE,OAAOA,EAEb,CA1GuByC,CAAc9B,IAC/B1C,EACAG,EACAD,EACAE,EACAZ,EAEJ,CAAE,MACA,OAAO,IACT,CACF,CC1FO,SAASiF,EAAc9G,GAC5B,MAAM0B,EAAS,IAAI,KAGnB,OAFAA,EAAOqF,UAAU,GFiBZ,SAAsBrF,EAAgB1B,GAC3C,IAAK,MAAM2B,KAAU3B,EACnByB,EAAYC,EAAQC,EAExB,CEpBE,CAAaD,EAAQ1B,IACd,QAAS0B,EAAOF,SACzB,CCVO,MAAMwF,UAAqBnI,MACdC,KAAO,eAEzB,WAAAC,CAAYC,EAAiBC,GAC3BC,MAAMF,EAASC,EACjB,CAEA,IAAKE,OAAOC,eACV,MAAO,cACT,EAGK,MAAM6H,UAAqBpI,MACdC,KAAO,eAEzB,WAAAC,CAAYC,EAAiBC,GAC3BC,MAAMF,EAASC,EACjB,CAEA,IAAKE,OAAOC,eACV,MAAO,cACT,ECVK,MAAM8H,EACF,GACA,GACA,GAET,WAAAnI,CAAYoI,EAAqBrI,EAAcsI,GAC7CC,MAAK,EAAQvI,EACbuI,MAAK,EAAWD,EAChBC,MAAK,EAAW,IAAIC,EAAUH,EAChC,CAEA,QAAIrI,GACF,OAAOuI,MAAK,CACd,CAEA,WAAID,GACF,OAAOC,MAAK,CACd,CAEA,YAAAE,CAAaC,GACX,OAAOH,MAAK,EAASE,aAAaF,MAAK,EAAOA,MAAK,EAAUG,EAC/D,CAEA,cAAAC,GACE,OAAOJ,MAAK,EAASI,eAAeJ,MAAK,EAC3C,CAEA,IAAKlI,OAAOC,eACV,MAAO,gBACT,EAGK,MAAMkI,EACF,GAET,WAAAvI,CAAYoI,GACVE,MAAK,EAAWF,CAClB,CAEA,YAAAI,CACEzI,EACAsI,EACAI,GAEA,MAAME,EAAUL,MAAK,EAASM,KAAK7I,EAAMsI,GACzC,OAAO,IAAIQ,SAAoB,CAACC,EAASC,KACvCJ,EAAQK,QAAWC,IACjB3H,QAAQD,MAAM,gCAAiCsH,EAAQtH,OACvD0H,EAAOJ,EAAQtH,MAAM,EAEvBsH,EAAQO,UAAaD,IACnBF,EAAO,IAAIb,EAAa,uBAAuB,EAEjDS,EAAQQ,gBAAmBF,IACzB,MAAMG,EAAK,IAAIC,EAAWV,EAAQ/F,QAC5B0G,EAAK,IAAIC,EAAcZ,EAAQa,aACrCf,EAAUW,EAAIE,EAAIL,EAAGQ,WAAYR,EAAGS,YACjCC,MAAK,IAAML,EAAGM,YACdD,MACC,KACEb,EAAQM,EAAG,IAEZ/H,IACC0H,EAAO1H,EAAM,GAEhB,EAELsH,EAAQkB,UAAaZ,IACnB,MAAMG,EAAK,IAAIC,EAAWV,EAAQ/F,QAClCkG,EAAQM,EAAG,CACZ,GAEL,CAEA,cAAAV,CAAe3I,GACb,MAAM4I,EAAUL,MAAK,EAASI,eAAe3I,GAC7C,OAAO,IAAI8I,SAAc,CAACC,EAASC,KACjCJ,EAAQK,QAAWC,IACjB3H,QAAQD,MAAM,kCAAmCsH,EAAQtH,OACzD0H,EAAOJ,EAAQtH,MAAM,EAEvBsH,EAAQO,UAAaD,IACnBF,EAAO,IAAIb,EAAa,uBAAuB,EAEjDS,EAAQkB,UAAaZ,IACnBH,GAAS,CACV,GAEL,CAEA,IAAK1I,OAAOC,eACV,MAAO,WACT,EAGK,MAAMgJ,EACF,GAET,WAAArJ,CAAYoJ,GACVd,MAAK,EAAMc,CACb,CAEA,QAAIrJ,GACF,OAAOuI,MAAK,EAAIvI,IAClB,CAEA,WAAIsI,GACF,OAAOC,MAAK,EAAID,OAClB,CAEA,oBAAIyB,GACF,OAAOC,MAAMC,KAAK1B,MAAK,EAAIwB,iBAC7B,CAEA,iBAAAG,CACElK,EACAG,GAEA,OAAO,IAAIgK,EAAc5B,MAAK,EAAI2B,kBAAkBlK,EAAMG,GAC5D,CAEA,iBAAAiK,CAAkBpK,GAChBuI,MAAK,EAAI6B,kBAAkBpK,EAC7B,CAEA,WAAAyJ,CACEY,EACAC,EACAnK,GAEA,OAAO,IAAIqJ,EAAcjB,MAAK,EAAIkB,YAAYY,EAAYC,EAAMnK,GAClE,CAEA,KAAAoK,GACEhC,MAAK,EAAIgC,OACX,CAEA,IAAKlK,OAAOC,eACV,MAAO,YACT,EAGK,MAAMkJ,EACF,GACAK,UAET,WAAA5J,CAAYsJ,GACVhB,MAAK,EAAMgB,EACXhB,KAAKsB,UA4NT,SAA8BN,GAC5B,OAAO,IAAIT,SAAQ,CAACC,EAASC,KAC3BO,EAAGN,QAAWC,IACZ3H,QAAQD,MAAM,8BAA+BiI,EAAGjI,OAChD0H,EAAOO,EAAGjI,MAAM,EAElBiI,EAAGiB,QAAWtB,IACZF,EAAO,IAAId,EAAa,qBAAqB,EAE/CqB,EAAGkB,WAAcvB,IACfH,GAAS,CACV,GAEL,CAzOqB2B,CAAqBnB,EACxC,CAEA,QAAIe,GACF,OAAO/B,MAAK,EAAI+B,IAClB,CAEA,cAAIK,GACF,OAAOpC,MAAK,EAAIoC,UAClB,CAEA,SAAIrJ,GACF,OAAOiH,MAAK,EAAIjH,KAClB,CAEA,KAAAsJ,GACErC,MAAK,EAAIqC,OACX,CAEA,MAAAC,GACEtC,MAAK,EAAIsC,QACX,CAEA,WAAAC,CAAY9K,GACV,OAAO,IAAImK,EAAc5B,MAAK,EAAIuC,YAAY9K,GAChD,CAEA,IAAKK,OAAOC,eACV,MAAO,eACT,EAGK,MAAM6J,EACF,GAET,WAAAlK,CAAY8K,GACVxC,MAAK,EAASwC,CAChB,CAEA,QAAI/K,GACF,OAAOuI,MAAK,EAAOvI,IACrB,CAEA,iBAAIgL,GACF,OAAOzC,MAAK,EAAOyC,aACrB,CAEA,cAAIC,GACF,OAAOjB,MAAMC,KAAK1B,MAAK,EAAO0C,WAChC,CAEA,WAAIC,GACF,OAAO3C,MAAK,EAAO2C,OACrB,CAEA,WAAAC,CACEnL,EACAkL,EACA/K,GAEA,OAAO,IAAIiL,EAAQ7C,MAAK,EAAO4C,YAAYnL,EAAMkL,EAAS/K,GAC5D,CAEA,WAAAkL,CAAYrL,GACVuI,MAAK,EAAO8C,YAAYrL,EAC1B,CAEA,KAAAsL,CAAMtL,GACJ,OAAO,IAAIoL,EAAQ7C,MAAK,EAAO+C,MAAMtL,GACvC,CAEA,KAAAuL,CAAMlF,GACJ,OAAOmF,EAAyBjD,MAAK,EAAOgD,MAAMlF,GACpD,CAEA,GAAAK,CAAIL,GACF,OAAOmF,EAAiBjD,MAAK,EAAO7B,IAAIL,GAC1C,CAEA,MAAAoF,CACEC,EACAH,GAEA,OAAOC,EAAiBjD,MAAK,EAAOkD,OAAOC,EAAOH,GACpD,CAEA,UAAAI,CACED,EACAH,GAEA,OAAOC,EAAiBjD,MAAK,EAAOoD,WAAWD,EAAOH,GACxD,CAEA,GAAAK,CAAI3J,EAAYoE,GACd,OAAOmF,EAA8BjD,MAAK,EAAOqD,IAAI3J,EAAOoE,GAC9D,CAEA,GAAAwF,CAAI5J,EAAYoE,GACd,OAAOmF,EAA8BjD,MAAK,EAAOsD,IAAI5J,EAAOoE,GAC9D,CAEA,OAAOA,GACL,OAAOmF,EAAuBjD,MAAK,EAAOuD,OAAOzF,GACnD,CAEA,KAAA/D,GACE,OAAOkJ,EAAuBjD,MAAK,EAAOjG,QAC5C,CAEA,UAAAyJ,CACEL,EACAM,GAEA,OAAOR,EAAiBjD,MAAK,EAAOwD,WAAWL,EAAOM,GACxD,CAEA,aAAAC,CACEP,EACAM,GAEA,OAAOR,EAAiBjD,MAAK,EAAO0D,cAAcP,EAAOM,GAC3D,CAEA,OAAAE,CACEC,EACAT,EACAM,GAEA,OAAOE,EAAQC,EAAO5D,MAAK,EAAOwD,WAAWL,EAAOM,GACtD,CAEA,IAAK3L,OAAOC,eACV,MAAO,eACT,EAGK,MAAM8K,EACF,GAET,WAAAnL,CAAYmM,GACV7D,MAAK,EAAS6D,CAChB,CAEA,QAAIpM,GACF,OAAOuI,MAAK,EAAOvI,IACrB,CAEA,WAAIkL,GACF,OAAO3C,MAAK,EAAO2C,OACrB,CAEA,cAAImB,GACF,OAAO9D,MAAK,EAAO8D,UACrB,CAEA,UAAIC,GACF,OAAO/D,MAAK,EAAO+D,MACrB,CAEA,KAAAf,CAAMG,GACJ,OAAOF,EAAiBjD,MAAK,EAAOgD,MAAMG,GAC5C,CAEA,GAAAhF,CAAIgF,GACF,OAAOF,EAAiBjD,MAAK,EAAO7B,IAAIgF,GAC1C,CAEA,MAAAD,CACEC,EACAH,GAEA,OAAOC,EAAiBjD,MAAK,EAAOkD,OAAOC,EAAOH,GACpD,CAEA,UAAAI,CACED,EACAH,GAEA,OAAOC,EAAiBjD,MAAK,EAAOoD,WAAWD,EAAOH,GACxD,CAEA,UAAAQ,CACEL,EACAM,GAEA,OAAOR,EAAiBjD,MAAK,EAAOwD,WAAWL,EAAOM,GACxD,CAEA,aAAAC,CACEP,EACAM,GAEA,OAAOR,EAAiBjD,MAAK,EAAO0D,cAAcP,EAAOM,GAC3D,CAEA,OAAAE,CACEC,EACAT,EACAM,GAEA,OAAOE,EAAQC,EAAO5D,MAAK,EAAOwD,WAAWL,EAAOM,GACtD,CAEA,IAAK3L,OAAOC,eACV,MAAO,SACT,EAGF,SAASkL,EAAoB5C,GAC3B,OAAO,IAAIE,SAAW,CAACC,EAASC,KAC9BJ,EAAQK,QAAWC,IACjB3H,QAAQD,MAAM,0BAA2BsH,EAAQtH,OACjD0H,EAAOJ,EAAQtH,MAAM,EAEvBsH,EAAQkB,UAAaZ,IACnBH,EAAQH,EAAQ/F,OAAY,CAC7B,GAEL,CAiBA,SAASqJ,EACPC,EACAvD,GAEA,OAAO,IAAIE,SAAa,CAACC,EAASC,KAChC,MAAMnG,EAAc,GAEpB+F,EAAQK,QAAWC,IACjBF,EAAOJ,EAAQtH,MAAM,EAGvBsH,EAAQkB,UAAaZ,IACnB,MAAMqD,EAAS3D,EAAQ/F,OACvB,GAAc,MAAV0J,EAAgB,CAClB,MAAMC,EAAOL,EAAMI,EAAOlG,IAAKkG,EAAOtK,OAC1B,MAARuK,GACF3J,EAAO8B,KAAK6H,GAEdD,EAAOE,UACT,MACE1D,EAAQlG,EACV,CACD,GAEL,CCzZO,MAAM6J,EACF,GAAW,IAAItE,EAAeuE,UAAW,UAAW,GAE7D,UAAMxL,GACJ,MAAMkI,QAAWd,MAAK,EAASE,aAAaC,GAC5C,IACE,MAAMa,EAAKF,EAAGI,YAAYJ,EAAGrJ,KAAM,YAC7B+K,EAAQxB,EAAGuB,YAAYzB,EAAGrJ,MAC1BkB,QAAgB6J,EAAMmB,SAAQ,CAAC7F,EAAKpE,IACjC8D,EAAe9D,KAGxB,aADMsH,EAAGM,UACF3I,CACT,C,QACEmI,EAAGkB,OACL,CACF,CAEA,YAAMnI,CAAOlB,GACX,MAAMmI,QAAWd,MAAK,EAASE,aAAaC,GAC5C,IACE,MAAMa,EAAKF,EAAGI,YAAYJ,EAAGrJ,KAAM,aAC7B+K,EAAQxB,EAAGuB,YAAYzB,EAAGrJ,MAChC,IAAK,MAAM6C,KAAU3B,QACb6J,EAAMa,IAAIxG,EAAavC,UAEzB0G,EAAGM,SACX,C,QACER,EAAGkB,OACL,CACF,CAEA,WAAMjI,GACJ,aAAaiG,MAAK,EAASI,gBAC7B,EAGF1H,eAAeyH,EACbW,EACAE,EACAG,EACAC,GAEAN,EAAGa,kBAAkBb,EAAGrJ,KAAM,CAAEgL,eAAe,GACjD,CClDO,MAEM4B,EAAS,UAETC,EAAqB,IAAIC,OAAO,oBAGvCC,EAAS,SAETC,EAAO,UAEPC,EAAK,SAELC,EAAK,SAELC,EAAO,GAEPC,EAAS,uCAGTC,EAAiB,CACrB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3E,EAAG,EAAG,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KACtE,KAAM,KAAM,MAGP,MAAMC,UAAuBvN,MAClC,WAAAE,GACEG,MAAM,aACR,CAEA,IAAKC,OAAOC,eACV,MAAO,gBACT,EAGK,MAAMiN,EACXC,gBAA2BD,EAASE,GAAG,YACvCD,gBAA2BD,EAASE,GAAG,YACvCD,gBAA2BD,EAASE,GAAG,YACvCD,gBAA2BD,EAASE,GAAG,YACvCD,gBAA2BD,EAASE,GAAG,YACvCD,gBAA2B,CACzBD,EAASG,SACTH,EAASI,SACTJ,EAASK,SACTL,EAASM,SACTN,EAASO,UAGX,SAAOL,CAAGM,GACR,MAAMC,EAAQnB,EAAmBoB,KAAKF,GACtC,OACS,IAAIR,EADA,MAATS,GACmB7H,OAAO6H,EAAM,IA4DxC,SAAsBD,GACpB,OAWqBzI,EAQvB,SAA6B4I,GAC3B,IAAIC,EAAS,EACTC,EAAW,EACf,MAAMC,EAAaC,EAAQJ,EAAQ,GACnC,IAAK,IAAIxJ,EAAI,EAAGA,EAAIwJ,EAAOxK,OAAQgB,IAAK,CACtC,MAAM6J,EAAQD,EAAQJ,EAAQxJ,GAC9ByJ,EAASA,EAAShB,EAAOoB,EACzBH,GAAYG,EAAQC,EAAYN,EAAOxK,OAASgB,EAClD,CACA,GAAe,IAAXyJ,GAAgBE,IAAeD,EAAWjB,EAC5C,MAAM,IAAIG,EAEZ,OAAOa,CACT,CAhCuBM,CAAoBV,GAYzCzI,GAAUyH,EAEVzH,EAAKoJ,EADLpJ,GAAU0H,EACWE,GACrB5H,GAAUsH,EAJZ,IAAuBtH,CAVvB,CA5D0BqJ,CAAaZ,GAErC,CAEA,YAAO5B,CAAM4B,GACX,IACE,OAAOR,EAASE,GAAGM,EACrB,CAAE,MACA,OAAO,IACT,CACF,CAGSzI,GAEAyI,SAEAa,QAET,WAAA3O,CAAYqF,GACV,IAAKa,OAAO0I,UAAUvJ,IAAc,IAAPA,EAC3B,MAAM,IAAIgI,EAEZ,GAAIhI,EAAK,EACPiD,KAAKjD,IAAMA,EACXiD,KAAKwF,SAAW,WAAWzI,EAC3BiD,KAAKqG,SAAU,MACV,CACL,GAAItJ,EAzFY,GAyFGA,EAAKsH,EACtB,MAAM,IAAIU,EAEZ/E,KAAKjD,GAAKA,EACViD,KAAKwF,SAsBX,SAAoBzI,GAClB,OAsCF,SAA8B6I,GAC5B,IAAID,EAAS,GACTE,EAAW,EACf,EAAG,CACD,MAAMG,EAAQJ,EAAShB,EACvBe,EAASd,EAAOmB,GAASL,EACzBE,GAAYG,EAAQC,EAAYN,EAAOxK,OACzC,QAAUyK,EAAUA,EAAShB,IAAU,GAAK,GAG5C,OADAe,EAASd,EADUgB,EAAWjB,GACAe,EACvBA,CACT,CAjDSY,CAOT,SAAqBxJ,GAKnB,OAJAA,EAAKoJ,EAAYpJ,EAAI2H,GACrB3H,GAAU0H,EACV1H,GAAUsH,EACVtH,GAAUyH,EACHzH,CACT,CAb8ByJ,CAAYzJ,GAC1C,CAxBsB0J,CAAW1J,GAC3BiD,KAAKqG,SAAU,CACjB,CACF,CAEA,QAAAK,GACE,OAAO1G,KAAKwF,QACd,CAEA,MAAAmB,GACE,IAAK3G,KAAKqG,QACR,MAAM,IAAI7O,MAEZ,OAAOuG,OAAO6I,OAAkB,CAC9B7J,GAAIiD,KAAKwF,SACT/N,KAAM,gBAAgBuI,KAAKjD,KAC3B8J,SAAU,KACVC,SAAS,GAEb,EAwDF,SAASX,EAAYY,EAAWC,GAC9BD,KAAU,EACVC,KAAU,EACV,IAAIC,EAAI,EACR,IAAK,IAAI/J,EAAI,EAAGA,EAAI,GAAIA,IACE,IAAlB8J,IAAM9J,EAAK,KACf+J,GAAKF,GAAK7J,GAGd,OAAO+J,IAAM,CACf,CAEA,SAASlB,EAAQJ,EAAgB5C,GAC/B,MAAMiD,EAAQlB,EAAea,EAAOuB,WAAWnE,IAC/C,GAAa,MAATiD,EACF,MAAM,IAAIjB,EAEZ,OAAOiB,CACT,CAEA,SAASC,EAAYkB,GACnB,OAAc,EAANA,EAAqB,EAAJ,CAC3B,C,mLCtLMC,GAAM,eAEL,MAAMC,GACX,OAAAC,CAAQC,GACN,OAAOD,GAAQF,GAAKG,EACtB,CAEA,IAAAC,CAAK7O,EAA4B4O,GAC/B,OAqDJ7O,eACE+O,EACA9O,EACA4O,GAEA,MAAMpN,EAASsF,EAAc9G,GACvB+O,QAAiB,KACpBC,KAAKF,GACLG,GAAG,mBAAoBjH,IACtB4G,EAAG5G,EAAGrI,OAAS,EAAGqI,EAAGkH,OAAO,IAE7BL,KAAKrN,EAAQ,kCACVuN,EAASI,MACjB,CAlEWN,CAAKJ,GAAKzO,EAAS4O,EAC5B,CAEA,KAAAxN,GACE,OAgEJrB,eAAqB+O,GACnB,MAAMC,QAAiB,KAAQK,OAAON,GAAMD,aACtCE,EAASI,MACjB,CAnEW/N,CAAMqN,GACf,EAGK,MAAMY,GACF,GAET,WAAAtQ,CAAYuQ,GACVjI,MAAK,EAAUiI,CACjB,CAEA,OAAAX,CAAQC,GACN,OAAOD,GAyDX,SAA2BW,GACzB,OAAQA,GACN,KAAKjD,EAASG,SAASK,SACrB,OAAO,EACT,KAAKR,EAASI,SAASI,SACrB,OAAO,GACT,KAAKR,EAASK,SAASG,SACrB,OAAO,GACT,KAAKR,EAASM,SAASE,SACrB,OAAO,GACT,KAAKR,EAASO,SAASC,SACrB,OAAO,GACT,QACE,MAAO,GAAG4B,MAAOc,mBAAmBD,KAE1C,CAxEmBE,CAAkBnI,MAAK,GAAUuH,EAClD,CAEA,UAAMC,CAAK7O,EAA4B4O,GACrC,MAAM,IAAI/P,MAAM,WAClB,CAEA,WAAMuC,GACJ,MAAM,IAAIvC,MAAM,WAClB,EAiBFkB,eAAe4O,GAAQG,EAAcF,GACnC,MAAMG,QAAiB,KACpBU,KAAI,QAAW,6BACfC,IAAIZ,GACJG,GAAG,qBAAsBjH,IACxB4G,EAAG5G,EAAGrI,OAAS,EAAGqI,EAAGkH,OAAO,IAE7BL,OACH,MAAO,KCtDiBrN,EDsDH,IAAImO,iBAAiBZ,EAASa,eCrD5C,EAAsB,IAAI,KAAOpO,MADnC,IAAmBA,CDuD1B,CE/CO,SAASqO,GAAkBnI,GAChC,OAGgCpI,EAIlC,SACEoI,GAOA,OAAQA,EAAQhI,MACd,IAAK,UAAW,CACd,MAAM,OAAE4P,GAAW5H,EACnB,GAAc,MAAV4H,EAAgB,CAClB,MAAMQ,EAAQ,IAAItE,EAClB,OAAO,IAAIuE,GAA6BD,EAC1C,CAAO,CACL,MAAMA,EAAQ,IAAItE,EACZwE,EAAS,IAAItB,GACnB,OAAO,IAAIuB,GAAyBH,EAAOE,EAC7C,CACF,CACA,IAAK,SAAU,CACb,MAAM,OAAEV,GAAW5H,EACbsI,EAAS,IAAIX,GAAqBC,GACxC,OAAO,IAAIY,GAA0BF,EACvC,EAEJ,CAjC2BG,CAAqBzI,GAmChD,SAAyBpI,GACvB,OAAO,IAAI,MACT,UAAMW,CAAK2O,GACT,IACE,aAAatP,EAAQW,KAAK2O,EAC5B,CAAE,MAAO5K,GACP,MAAM,IAAIpF,EAAc,oCAAqC,CAC3DqF,MAAOD,GAEX,CACF,CAEA,YAAM9C,CACJlB,EACA4O,GAEA,UACQtP,EAAQ4B,OAAOlB,EAAS4O,EAChC,CAAE,MAAO5K,GACP,MAAM,IAAIpF,EAAc,iCAAkC,CACxDqF,MAAOD,GAEX,CACF,CAEA,WAAM5C,GACJ,UACQ9B,EAAQ8B,OAChB,CAAE,MAAO4C,GACP,MAAM,IAAIpF,EAAc,wBAAyB,CAC/CqF,MAAOD,GAEX,CACF,EAEJ,CAlESoM,CAoET,SAAyB9Q,GACvB,OAAO,IAAI,MACT,UAAMW,CAAK2O,GACT,OAAO,cAAqBtP,EAAQW,KAAK2O,GAC3C,CAEA,YAAM1N,CACJlB,EACA4O,IAEA5O,EAAUA,EAAQqQ,OAAO,KAAOC,UACpB9N,OAAS,SACblD,EAAQ4B,OAAOlB,EAAS4O,EAElC,CAEA,WAAMxN,SACE9B,EAAQ8B,OAChB,EAEJ,CAxFyBmP,CAAgBjR,IADlC,IAA2BA,CAFlC,CA6FO,MAAMyQ,GACF,GAET,WAAAhR,CAAY+Q,GACVzI,MAAK,EAASyI,CAChB,CAEA,UAAM7P,CAAK2O,EAAK4B,IACd,aAAanJ,MAAK,EAAOpH,MAC3B,CAEA,YAAMiB,CAAOlB,EAA4B4O,EAAK4B,UACtCnJ,MAAK,EAAOnG,OAAOlB,EAC3B,CAEA,WAAMoB,SACEiG,MAAK,EAAOjG,OACpB,EAGK,MAAM6O,GACF,GACA,GAET,WAAAlR,CAAY+Q,EAA2BE,GACrC3I,MAAK,EAASyI,EACdzI,MAAK,EAAU2I,CACjB,CAEA,UAAM/P,CAAK2O,EAAK4B,IACd,MAAMxQ,QAAgBqH,MAAK,EAAQsH,QAAQC,GAC3C,GAAI5O,EAAQwC,OAAS,EACnB,OAAOxC,EACF,CACL,MAAMA,QAAgBqH,MAAK,EAAOpH,OAClC,GAAID,EAAQwC,OAAS,EAGnB,aAFM6E,MAAK,EAAQwH,KAAK7O,EAAS4O,SAC3BvH,MAAK,EAAOjG,QACXpB,CAEX,CACA,MAAO,EACT,CAEA,YAAMkB,CAAOlB,EAA4B4O,EAAK4B,UACtCnJ,MAAK,EAAQwH,KAAK7O,EAAS4O,EACnC,CAEA,WAAMxN,SACEiG,MAAK,EAAQjG,OACrB,EAGK,MAAM8O,GACF,GAET,WAAAnR,CAAYiR,GACV3I,MAAK,EAAU2I,CACjB,CAEA,UAAM/P,CAAK2O,EAAK4B,IACd,aAAanJ,MAAK,EAAQsH,QAAQC,EACpC,CAEA,YAAM1N,CAAOlB,EAA4B4O,EAAK4B,IAC5C,MAAM,IAAI3R,MAAM,WAClB,CAEA,WAAMuC,GACJ,MAAM,IAAIvC,MAAM,WAClB,EAGF,SAAS2R,GAAM7Q,EAAeC,GAAwB,CCxL/C,SAAS6Q,IAAmB,KACjCC,EAAI,SACJ9P,IAKA,MAAMtB,GAakBgQ,EAbSoB,EAAKtM,IAc/B,IAAAuM,UAAQ,IAAMd,GAAkB,CAAEnQ,KAAM,SAAU4P,YAAW,CAACA,KADvE,IAA0BA,EAZxB,MAAM/P,EAAQF,EAAUC,GACxB,MAAmB,YAAfC,EAAMG,MACD,SAAC,KAAe,CAACC,MAAOJ,EAAMI,MAAOC,QAASL,EAAMK,WAGzD,SAACc,EAAc,CAACpB,QAASA,EAASqB,eAAgBpB,EAAMS,QAAO,SAC5DY,GAIT,CClBO,SAASgQ,IAAa,SAC3BhQ,IAIA,MAAMtB,EAaR,WACE,MAAMuR,GAAW,UACjB,OAAO,IAAAF,UAAQ,KACb,MAAM,WAAEG,GAAeD,EACvB,OAAOhB,GAAkB,CACvBnQ,KAAM,UACN4P,OAAQwB,EAAW1M,IACnB,GACD,CAACyM,GACN,CAtBkB,GACVtR,EAAQF,EAAUC,GACxB,MAAmB,YAAfC,EAAMG,MACD,SAAC,KAAe,CAACC,MAAOJ,EAAMI,MAAOC,QAASL,EAAMK,WAGzD,SAACc,EAAc,CAACpB,QAASA,EAASqB,eAAgBpB,EAAMS,QAAO,SAC5DY,GAIT,C","sources":["webpack://keybr.com/./packages/keybr-result-loader/lib/errors.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/loader.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/debug.tsx","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/ResultProvider.tsx","webpack://keybr.com/./packages/keybr-result-io/lib/errors.ts","webpack://keybr.com/./packages/keybr-result-io/lib/header.ts","webpack://keybr.com/./packages/keybr-result-io/lib/binary.ts","webpack://keybr.com/./packages/keybr-result-io/lib/legacyjson.ts","webpack://keybr.com/./packages/keybr-result-io/lib/sync.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/indexeddb/errors.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/indexeddb/idb.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/local.ts","webpack://keybr.com/./packages/keybr-publicid/lib/index.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/remotesync.ts","webpack://keybr.com/./packages/keybr-result-io/lib/file.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/internal/storage.ts","webpack://keybr.com/./packages/keybr-result-loader/lib/PublicResultLoader.tsx","webpack://keybr.com/./packages/keybr-result-loader/lib/ResultLoader.tsx"],"sourcesContent":["export class DatabaseError extends Error {\n  override name = \"DatabaseError\";\n\n  constructor(message?: string, options?: ErrorOptions) {\n    super(message, options);\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DatabaseError\";\n  }\n}\n","import { catchError } from \"@keybr/debug\";\nimport { type Result } from \"@keybr/result\";\nimport { useEffect, useState } from \"react\";\nimport { type ResultStorage } from \"./types.ts\";\n\nexport type LoaderState =\n  | {\n      readonly type: \"loading\";\n      readonly total: number;\n      readonly current: number;\n    }\n  | {\n      readonly type: \"ready\";\n      readonly results: readonly Result[];\n    };\n\nexport function useLoader(storage: ResultStorage): LoaderState {\n  const [state, setState] = useState<LoaderState>({\n    type: \"loading\",\n    total: 0,\n    current: 0,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const load = async () => {\n      const results = await storage.load((total, current) => {\n        if (!didCancel) {\n          setState({ type: \"loading\", total, current });\n        }\n      });\n      if (!didCancel) {\n        setState({ type: \"ready\", results });\n      }\n    };\n\n    load().catch(catchError);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [storage]);\n\n  return state;\n}\n","import { ErrorAlert } from \"@keybr/debug\";\n\n/**\n * Database errors are recoverable. This handler will show a friendly\n * error message, but will not crash the application.\n */\nexport function catchError(error: unknown) {\n  console.error(error);\n  if (process.env.REPORT_ERRORS === \"true\") {\n    ErrorAlert.toast(\n      <>\n        <p>Oh no! Database error!</p>\n        <p>This is likely a temporary problem and will be resolved soon.</p>\n      </>,\n      error,\n    );\n  }\n}\n","import { type Result, ResultContext } from \"@keybr/result\";\nimport { type ReactNode, useState } from \"react\";\nimport { catchError } from \"./debug.tsx\";\nimport { type ResultStorage } from \"./types.ts\";\n\nexport function ResultProvider({\n  storage,\n  initialResults,\n  children,\n}: {\n  readonly storage: ResultStorage;\n  readonly initialResults: readonly Result[];\n  readonly children: ReactNode;\n}): ReactNode {\n  const [results, setResults] = useState(initialResults);\n  return (\n    <ResultContext.Provider\n      value={{\n        results,\n        appendResults: (newResults) => {\n          setResults([...results, ...newResults]);\n          storage.append(newResults).catch(catchError);\n        },\n        clearResults: () => {\n          setResults([]);\n          storage.clear().catch(catchError);\n        },\n      }}\n    >\n      {children}\n    </ResultContext.Provider>\n  );\n}\n","export class InvalidFormatError extends Error {\n  override name = \"InvalidFormatError\";\n\n  constructor(message?: string, options?: ErrorOptions) {\n    super(message, options);\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"InvalidFormatError\";\n  }\n}\n","import { type Reader, Writer } from \"@keybr/binary\";\n\nexport const HEADER_SIGNATURE = 0x4b455942;\nexport const HEADER_VERSION = 2;\nexport const HEADER = new Writer()\n  .putInt32(HEADER_SIGNATURE)\n  .putInt32(HEADER_VERSION)\n  .buffer();\n\nexport function validateHeader(reader: Reader): boolean {\n  return (\n    reader.remaining() >= HEADER.byteLength &&\n    reader.getUint32() === HEADER_SIGNATURE &&\n    reader.getUint32() === HEADER_VERSION\n  );\n}\n","import { type Reader, type Writer } from \"@keybr/binary\";\nimport { Layout } from \"@keybr/keyboard\";\nimport { Result, TextType } from \"@keybr/result\";\nimport { Histogram, type Sample } from \"@keybr/textinput\";\nimport { InvalidFormatError } from \"./errors.ts\";\nimport { validateHeader } from \"./header.ts\";\n\nexport function writeResult(writer: Writer, result: Result): void {\n  const samples = [...result.histogram];\n  writer.putUint8(result.layout.xid);\n  writer.putUint8(result.textType.xid);\n  writer.putUint32(Math.round(result.timeStamp / 1000));\n  writer.putUintVlq(result.time);\n  writer.putUintVlq(result.length);\n  writer.putUintVlq(result.errors);\n  writer.putUintVlq(samples.length);\n  for (const sample of samples) {\n    writer.putUintVlq(sample.codePoint);\n    writer.putUintVlq(sample.hitCount);\n    writer.putUintVlq(sample.missCount);\n    writer.putUintVlq(sample.timeToType);\n  }\n}\n\nexport function writeResults(writer: Writer, results: Iterable<Result>): void {\n  for (const result of results) {\n    writeResult(writer, result);\n  }\n}\n\nexport function readResult(reader: Reader): Result {\n  const layoutXId = reader.getUint8();\n  const textTypeXId = reader.getUint8();\n  const timestamp = reader.getUint32() * 1000;\n  const time = reader.getUintVlq();\n  const length = reader.getUintVlq();\n  const errors = reader.getUintVlq();\n  const size = reader.getUintVlq();\n  const samples: Sample[] = [];\n  for (let i = 0; i < size; i++) {\n    const codePoint = reader.getUintVlq();\n    const hitCount = reader.getUintVlq();\n    const missCount = reader.getUintVlq();\n    const timeToType = reader.getUintVlq();\n    samples.push({\n      codePoint,\n      hitCount,\n      missCount,\n      timeToType,\n    });\n  }\n  return new Result(\n    Layout.ALL.xget(layoutXId),\n    TextType.ALL.xget(textTypeXId),\n    timestamp,\n    length,\n    time,\n    errors,\n    new Histogram(samples),\n  );\n}\n\nexport function* readResults(reader: Reader): Iterable<Result> {\n  while (reader.remaining() > 0) {\n    yield readResult(reader);\n  }\n}\n\nexport function* readStructuredContent(reader: Reader): Iterable<Result> {\n  if (reader.remaining() > 0) {\n    if (!validateHeader(reader)) {\n      throw new InvalidFormatError(\"Invalid header\");\n    }\n    try {\n      yield* readResults(reader);\n    } catch (err: any) {\n      throw new InvalidFormatError(\"Invalid data format\", { cause: err });\n    }\n  }\n}\n","import { Layout } from \"@keybr/keyboard\";\nimport { isPlainObject, isString } from \"@keybr/lang\";\nimport { Result, TextType } from \"@keybr/result\";\nimport { Histogram } from \"@keybr/textinput\";\n\nexport type ResultJson = {\n  readonly l: string;\n  readonly m: string;\n  readonly ts: number;\n  readonly n: number;\n  readonly t: number;\n  readonly e: number;\n  readonly h: HistogramtJson;\n};\n\nexport type HistogramtJson = {\n  readonly [codePoint: number]: {\n    readonly h: number;\n    readonly m: number;\n    readonly t: number;\n  };\n};\n\nexport function resultToJson(result: Result): ResultJson {\n  return {\n    l: result.layout.id,\n    m: result.textType.id,\n    ts: result.timeStamp,\n    n: result.length,\n    t: result.time,\n    e: result.errors,\n    h: histogramToJson(result.histogram),\n  };\n}\n\nexport function histogramToJson(histogram: Histogram): HistogramtJson {\n  const json: {\n    [codePoint: number]: {\n      h: number;\n      m: number;\n      t: number;\n    };\n  } = {};\n  for (const { codePoint, hitCount, missCount, timeToType } of histogram) {\n    json[codePoint] = {\n      h: hitCount,\n      m: missCount,\n      t: timeToType,\n    };\n  }\n  return json;\n}\n\nexport function resultFromJson(json: ResultJson): Result | null {\n  if (!isPlainObject(json)) {\n    return null;\n  }\n  const {\n    l: layoutId,\n    m: textTypeId,\n    ts: timeStamp,\n    n: length,\n    t: time,\n    e: errors,\n    h: histogramJson,\n  } = json;\n  if (\n    !(\n      isString(layoutId) &&\n      isString(textTypeId) &&\n      Number.isSafeInteger(timeStamp) &&\n      Number.isSafeInteger(length) &&\n      Number.isSafeInteger(time) &&\n      Number.isSafeInteger(errors)\n    )\n  ) {\n    return null;\n  }\n  const histogram = histogramFromJson(histogramJson);\n  if (histogram == null) {\n    return null;\n  }\n  try {\n    return new Result(\n      Layout.ALL.get(fixLegacyLayoutId(layoutId)),\n      TextType.ALL.get(fixTextTypeId(textTypeId)),\n      timeStamp,\n      length,\n      time,\n      errors,\n      histogram,\n    );\n  } catch {\n    return null;\n  }\n}\n\nexport function histogramFromJson(json: HistogramtJson): Histogram | null {\n  if (!isPlainObject(json)) {\n    return null;\n  }\n  const samples = [];\n  for (const [key, sample] of Object.entries(json)) {\n    const codePoint = Number(key);\n    if (\n      !(Number.isSafeInteger(codePoint) && codePoint > 0 && codePoint <= 65535)\n    ) {\n      return null;\n    }\n    if (!isPlainObject(sample)) {\n      return null;\n    }\n    const {\n      h: hitCount,\n      m: missCount,\n      t: timeToType,\n    } = sample as {\n      readonly h: number;\n      readonly m: number;\n      readonly t: number;\n    };\n    if (\n      !(\n        Number.isSafeInteger(hitCount) &&\n        Number.isSafeInteger(missCount) &&\n        Number.isFinite(timeToType)\n      )\n    ) {\n      return null;\n    }\n    samples.push({\n      codePoint,\n      hitCount,\n      missCount,\n      timeToType: Math.round(timeToType),\n    });\n  }\n  return new Histogram(samples);\n}\n\nfunction fixLegacyLayoutId(id: string): string {\n  // Fix layout identifiers that were changed in cfafe818d5edd3d72a738183730dae049b967ebc\n  switch (id) {\n    case \"be\":\n      return Layout.BE_BY.id;\n    case \"cz\":\n      return Layout.CS_CZ.id;\n    case \"de\":\n      return Layout.DE_DE.id;\n    case \"fr\":\n      return Layout.FR_FR.id;\n    case \"it\":\n      return Layout.IT_IT.id;\n    case \"pl\":\n      return Layout.PL_PL.id;\n    case \"ru\":\n      return Layout.RU_RU.id;\n    case \"se\":\n      return Layout.SV_SE.id;\n    case \"ua\":\n      return Layout.UK_UA.id;\n    case \"uk\":\n      return Layout.EN_UK.id;\n    case \"us\":\n      return Layout.EN_US.id;\n    case \"us-canary-matrix\":\n      return Layout.EN_CANARY_MATRIX.id;\n    case \"us-colemak\":\n      return Layout.EN_COLEMAK.id;\n    case \"us-colemak-dh\":\n      return Layout.EN_COLEMAK_DH_ANSI.id;\n    case \"us-colemak-dh-matrix\":\n      return Layout.EN_COLEMAK_DH_MATRIX.id;\n    case \"us-dvorak\":\n      return Layout.EN_DVORAK.id;\n    case \"us-workman\":\n      return Layout.EN_WORKMAN.id;\n    default:\n      return id;\n  }\n}\n\nfunction fixTextTypeId(id: string): string {\n  switch (id) {\n    case \"guided\":\n      return TextType.GENERATED.id;\n    case \"custom\":\n      return TextType.NATURAL.id;\n    default:\n      return id;\n  }\n}\n","import { Reader, scramble, unscramble, Writer } from \"@keybr/binary\";\nimport { type Result } from \"@keybr/result\";\nimport { readStructuredContent, writeResults } from \"./binary.ts\";\nimport { HEADER } from \"./header.ts\";\n\nexport function formatMessage(results: Iterable<Result>): Uint8Array {\n  const writer = new Writer();\n  writer.putBuffer(HEADER);\n  writeResults(writer, results);\n  return scramble(writer.buffer());\n}\n\nexport function parseMessage(buffer: Uint8Array): Iterable<Result> {\n  return readStructuredContent(new Reader(unscramble(buffer)));\n}\n","export class AbortedError extends Error {\n  override readonly name = \"AbortedError\";\n\n  constructor(message: string, options?: ErrorOptions) {\n    super(message, options);\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"AbortedError\";\n  }\n}\n\nexport class BlockedError extends Error {\n  override readonly name = \"BlockedError\";\n\n  constructor(message: string, options?: ErrorOptions) {\n    super(message, options);\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"BlockedError\";\n  }\n}\n","import { AbortedError, BlockedError } from \"./errors.ts\";\n\nexport type Migration = {\n  (\n    db: DBDatabase,\n    tx: DBTransaction,\n    oldVersion: number,\n    newVersion: number | null,\n  ): Promise<void>;\n};\n\nexport class DBNamedFactory {\n  readonly #name: string;\n  readonly #version: number;\n  readonly #factory: DBFactory;\n\n  constructor(factory: IDBFactory, name: string, version: number) {\n    this.#name = name;\n    this.#version = version;\n    this.#factory = new DBFactory(factory);\n  }\n\n  get name(): string {\n    return this.#name;\n  }\n\n  get version(): number {\n    return this.#version;\n  }\n\n  openDatabase(migration: Migration): Promise<DBDatabase> {\n    return this.#factory.openDatabase(this.#name, this.#version, migration);\n  }\n\n  deleteDatabase(): Promise<void> {\n    return this.#factory.deleteDatabase(this.#name);\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DBNamedFactory\";\n  }\n}\n\nexport class DBFactory {\n  readonly #factory: IDBFactory;\n\n  constructor(factory: IDBFactory) {\n    this.#factory = factory;\n  }\n\n  openDatabase(\n    name: string,\n    version: number,\n    migration: Migration,\n  ): Promise<DBDatabase> {\n    const request = this.#factory.open(name, version);\n    return new Promise<DBDatabase>((resolve, reject) => {\n      request.onerror = (ev) => {\n        console.error(\"IndexedDB open database error\", request.error);\n        reject(request.error);\n      };\n      request.onblocked = (ev) => {\n        reject(new BlockedError(\"Database is blocked\"));\n      };\n      request.onupgradeneeded = (ev) => {\n        const db = new DBDatabase(request.result as IDBDatabase);\n        const tx = new DBTransaction(request.transaction as IDBTransaction);\n        migration(db, tx, ev.oldVersion, ev.newVersion)\n          .then(() => tx.completed)\n          .then(\n            () => {\n              resolve(db);\n            },\n            (error) => {\n              reject(error);\n            },\n          );\n      };\n      request.onsuccess = (ev) => {\n        const db = new DBDatabase(request.result as IDBDatabase);\n        resolve(db);\n      };\n    });\n  }\n\n  deleteDatabase(name: string): Promise<void> {\n    const request = this.#factory.deleteDatabase(name);\n    return new Promise<void>((resolve, reject) => {\n      request.onerror = (ev) => {\n        console.error(\"IndexedDB delete database error\", request.error);\n        reject(request.error);\n      };\n      request.onblocked = (ev) => {\n        reject(new BlockedError(\"Database is blocked\"));\n      };\n      request.onsuccess = (ev) => {\n        resolve();\n      };\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DBFactory\";\n  }\n}\n\nexport class DBDatabase {\n  readonly #db: IDBDatabase;\n\n  constructor(db: IDBDatabase) {\n    this.#db = db;\n  }\n\n  get name(): string {\n    return this.#db.name;\n  }\n\n  get version(): number {\n    return this.#db.version;\n  }\n\n  get objectStoreNames(): string[] {\n    return Array.from(this.#db.objectStoreNames);\n  }\n\n  createObjectStore(\n    name: string,\n    options?: IDBObjectStoreParameters,\n  ): DBObjectStore {\n    return new DBObjectStore(this.#db.createObjectStore(name, options));\n  }\n\n  deleteObjectStore(name: string): void {\n    this.#db.deleteObjectStore(name);\n  }\n\n  transaction(\n    storeNames: string | string[],\n    mode?: IDBTransactionMode,\n    options?: IDBTransactionOptions,\n  ): DBTransaction {\n    return new DBTransaction(this.#db.transaction(storeNames, mode, options));\n  }\n\n  close(): void {\n    this.#db.close();\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DBDatabase\";\n  }\n}\n\nexport class DBTransaction {\n  readonly #tx: IDBTransaction;\n  readonly completed: Promise<void>;\n\n  constructor(tx: IDBTransaction) {\n    this.#tx = tx;\n    this.completed = promisifyTransaction(tx);\n  }\n\n  get mode(): IDBTransactionMode {\n    return this.#tx.mode;\n  }\n\n  get durability(): IDBTransactionDurability {\n    return this.#tx.durability;\n  }\n\n  get error(): DOMException | null {\n    return this.#tx.error;\n  }\n\n  abort(): void {\n    this.#tx.abort();\n  }\n\n  commit(): void {\n    this.#tx.commit();\n  }\n\n  objectStore(name: string): DBObjectStore {\n    return new DBObjectStore(this.#tx.objectStore(name));\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DBTransaction\";\n  }\n}\n\nexport class DBObjectStore {\n  readonly #store: IDBObjectStore;\n\n  constructor(store: IDBObjectStore) {\n    this.#store = store;\n  }\n\n  get name(): string {\n    return this.#store.name;\n  }\n\n  get autoIncrement(): boolean {\n    return this.#store.autoIncrement;\n  }\n\n  get indexNames(): string[] {\n    return Array.from(this.#store.indexNames);\n  }\n\n  get keyPath(): string | string[] {\n    return this.#store.keyPath;\n  }\n\n  createIndex(\n    name: string,\n    keyPath: string | string[],\n    options?: IDBIndexParameters,\n  ): DBIndex {\n    return new DBIndex(this.#store.createIndex(name, keyPath, options));\n  }\n\n  deleteIndex(name: string): void {\n    this.#store.deleteIndex(name);\n  }\n\n  index(name: string): DBIndex {\n    return new DBIndex(this.#store.index(name));\n  }\n\n  count(key?: IDBValidKey | IDBKeyRange): Promise<number> {\n    return promisifyRequest<number>(this.#store.count(key));\n  }\n\n  get(key: IDBValidKey): Promise<any> {\n    return promisifyRequest(this.#store.get(key));\n  }\n\n  getAll(\n    query?: IDBValidKey | IDBKeyRange | null,\n    count?: number,\n  ): Promise<any[]> {\n    return promisifyRequest(this.#store.getAll(query, count));\n  }\n\n  getAllKeys(\n    query?: IDBValidKey | IDBKeyRange | null,\n    count?: number,\n  ): Promise<IDBValidKey[]> {\n    return promisifyRequest(this.#store.getAllKeys(query, count));\n  }\n\n  add(value: any, key?: IDBValidKey): Promise<IDBValidKey> {\n    return promisifyRequest<IDBValidKey>(this.#store.add(value, key));\n  }\n\n  put(value: any, key?: IDBValidKey): Promise<IDBValidKey> {\n    return promisifyRequest<IDBValidKey>(this.#store.put(value, key));\n  }\n\n  delete(key: IDBValidKey | IDBKeyRange): Promise<void> {\n    return promisifyRequest<void>(this.#store.delete(key));\n  }\n\n  clear(): Promise<void> {\n    return promisifyRequest<void>(this.#store.clear());\n  }\n\n  openCursor(\n    query?: IDBValidKey | IDBKeyRange | null,\n    direction?: IDBCursorDirection,\n  ): Promise<IDBCursorWithValue | null> {\n    return promisifyRequest(this.#store.openCursor(query, direction));\n  }\n\n  openKeyCursor(\n    query?: IDBValidKey | IDBKeyRange | null,\n    direction?: IDBCursorDirection,\n  ): Promise<IDBCursor | null> {\n    return promisifyRequest(this.#store.openKeyCursor(query, direction));\n  }\n\n  readAll<T>(\n    parse: (key: IDBValidKey, value: any) => T | null,\n    query?: IDBValidKey | IDBKeyRange | null,\n    direction?: IDBCursorDirection,\n  ): Promise<T[]> {\n    return readAll(parse, this.#store.openCursor(query, direction));\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DBObjectStore\";\n  }\n}\n\nexport class DBIndex {\n  readonly #index: IDBIndex;\n\n  constructor(idx: IDBIndex) {\n    this.#index = idx;\n  }\n\n  get name(): string {\n    return this.#index.name;\n  }\n\n  get keyPath(): string | string[] {\n    return this.#index.keyPath;\n  }\n\n  get multiEntry(): boolean {\n    return this.#index.multiEntry;\n  }\n\n  get unique(): boolean {\n    return this.#index.unique;\n  }\n\n  count(query?: IDBValidKey | IDBKeyRange): Promise<number> {\n    return promisifyRequest(this.#index.count(query));\n  }\n\n  get(query: IDBValidKey | IDBKeyRange): Promise<any> {\n    return promisifyRequest(this.#index.get(query));\n  }\n\n  getAll(\n    query?: IDBValidKey | IDBKeyRange | null,\n    count?: number,\n  ): Promise<any[]> {\n    return promisifyRequest(this.#index.getAll(query, count));\n  }\n\n  getAllKeys(\n    query?: IDBValidKey | IDBKeyRange | null,\n    count?: number,\n  ): Promise<IDBValidKey[]> {\n    return promisifyRequest(this.#index.getAllKeys(query, count));\n  }\n\n  openCursor(\n    query?: IDBValidKey | IDBKeyRange | null,\n    direction?: IDBCursorDirection,\n  ): Promise<IDBCursorWithValue | null> {\n    return promisifyRequest(this.#index.openCursor(query, direction));\n  }\n\n  openKeyCursor(\n    query?: IDBValidKey | IDBKeyRange | null,\n    direction?: IDBCursorDirection,\n  ): Promise<IDBCursor | null> {\n    return promisifyRequest(this.#index.openKeyCursor(query, direction));\n  }\n\n  readAll<T>(\n    parse: (key: IDBValidKey, value: any) => T | null,\n    query?: IDBValidKey | IDBKeyRange | null,\n    direction?: IDBCursorDirection,\n  ): Promise<T[]> {\n    return readAll(parse, this.#index.openCursor(query, direction));\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"DBIndex\";\n  }\n}\n\nfunction promisifyRequest<V>(request: IDBRequest): Promise<V> {\n  return new Promise<V>((resolve, reject) => {\n    request.onerror = (ev) => {\n      console.error(\"IndexedDB request error\", request.error);\n      reject(request.error);\n    };\n    request.onsuccess = (ev) => {\n      resolve(request.result as V);\n    };\n  });\n}\n\nfunction promisifyTransaction(tx: IDBTransaction): Promise<void> {\n  return new Promise((resolve, reject) => {\n    tx.onerror = (ev) => {\n      console.error(\"IndexedDB transaction error\", tx.error);\n      reject(tx.error);\n    };\n    tx.onabort = (ev) => {\n      reject(new AbortedError(\"Operation aborted\"));\n    };\n    tx.oncomplete = (ev) => {\n      resolve();\n    };\n  });\n}\n\nfunction readAll<T>(\n  parse: (key: IDBValidKey, value: any) => T | null,\n  request: IDBRequest<IDBCursorWithValue | null>,\n): Promise<T[]> {\n  return new Promise<T[]>((resolve, reject) => {\n    const result: T[] = [];\n\n    request.onerror = (ev) => {\n      reject(request.error);\n    };\n\n    request.onsuccess = (ev) => {\n      const cursor = request.result;\n      if (cursor != null) {\n        const item = parse(cursor.key, cursor.value);\n        if (item != null) {\n          result.push(item);\n        }\n        cursor.continue();\n      } else {\n        resolve(result);\n      }\n    };\n  });\n}\n","import { type Result } from \"@keybr/result\";\nimport { resultFromJson, resultToJson } from \"@keybr/result-io\";\nimport {\n  type DBDatabase,\n  DBNamedFactory,\n  type DBTransaction,\n} from \"./indexeddb/index.ts\";\nimport { type LocalResultStorage } from \"./types.ts\";\n\nexport class PersistentResultStorage implements LocalResultStorage {\n  readonly #factory = new DBNamedFactory(indexedDB, \"history\", 1);\n\n  async load(): Promise<Result[]> {\n    const db = await this.#factory.openDatabase(migration);\n    try {\n      const tx = db.transaction(db.name, \"readonly\");\n      const store = tx.objectStore(db.name);\n      const results = await store.readAll((key, value) => {\n        return resultFromJson(value);\n      });\n      await tx.completed;\n      return results;\n    } finally {\n      db.close();\n    }\n  }\n\n  async append(results: readonly Result[]): Promise<void> {\n    const db = await this.#factory.openDatabase(migration);\n    try {\n      const tx = db.transaction(db.name, \"readwrite\");\n      const store = tx.objectStore(db.name);\n      for (const result of results) {\n        await store.add(resultToJson(result));\n      }\n      await tx.completed;\n    } finally {\n      db.close();\n    }\n  }\n\n  async clear(): Promise<void> {\n    return await this.#factory.deleteDatabase();\n  }\n}\n\nasync function migration(\n  db: DBDatabase,\n  tx: DBTransaction,\n  oldVersion: number,\n  newVersion: number | null,\n): Promise<void> {\n  db.createObjectStore(db.name, { autoIncrement: true });\n}\n","import { type NamedUser } from \"@keybr/pages-shared\";\n\n/** Inclusive lower bound of the range of valid internal user ids. */\nexport const MIN_ID = 0x00000001;\n/** Inclusive upper bound of the range of valid internal user ids. */\nexport const MAX_ID = 0x0fffffff;\n/** Regex pattern to match example user ids. */\nexport const EXAMPLE_ID_PATTERN = new RegExp(\"^example([1-9])$\");\n\n/** Arbitrary offset. */\nconst OFFSET = 0x05b4c39f;\n/** Arbitrary XOR mask. */\nconst MASK = 0x0a531fcd;\n/** Multiplicative inverse of C2 modulo MAX_ID + 1. */\nconst C1 = 0x0527d98f;\n/** Multiplicative inverse of C1 modulo MAX_ID + 1. */\nconst C2 = 0x00c9256f;\n/** Base 36. */\nconst BASE = 36;\n/** Base 36 digits. */\nconst DIGITS = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n/** Base 36 digits. */\n// prettier-ignore\nconst INVERSE_DIGITS = [\n  null, null, null, null, null, null, null, null, null, null, null, null, null,\n  null, null, null, null, null, null, null, null, null, null, null, null, null,\n  null, null, null, null, null, null, null, null, null, null, null, null, null,\n  null, null, null, null, null, null, null, null, null, 0, 1, 2, 3, 4, 5, 6, 7,\n  8, 9, null, null, null, null, null, null, null, 10, 11, 12, 13, 14, 15, 16,\n  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n  null, null, null, null, null, null, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n  20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, null, null,\n  null, null, null,\n];\n\nexport class InvalidIdError extends Error {\n  constructor() {\n    super(\"invalid id\");\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"InvalidIdError\";\n  }\n}\n\nexport class PublicId {\n  static readonly example1 = PublicId.of(\"example1\");\n  static readonly example2 = PublicId.of(\"example2\");\n  static readonly example3 = PublicId.of(\"example3\");\n  static readonly example4 = PublicId.of(\"example4\");\n  static readonly example5 = PublicId.of(\"example5\");\n  static readonly examples = [\n    PublicId.example1,\n    PublicId.example2,\n    PublicId.example3,\n    PublicId.example4,\n    PublicId.example5,\n  ];\n\n  static of(publicId: string): PublicId {\n    const match = EXAMPLE_ID_PATTERN.exec(publicId);\n    if (match != null) {\n      return new PublicId(-Number(match[1]));\n    } else {\n      return new PublicId(fromPublicId(publicId));\n    }\n  }\n\n  static parse(publicId: string): PublicId | null {\n    try {\n      return PublicId.of(publicId);\n    } catch {\n      return null;\n    }\n  }\n\n  /** Internal user id. */\n  readonly id: number;\n  /** Public user id. */\n  readonly publicId: string;\n  /** Whether user id is of an example profile. */\n  readonly example: boolean;\n\n  constructor(id: number) {\n    if (!Number.isInteger(id) || id === 0) {\n      throw new InvalidIdError();\n    }\n    if (id < 0) {\n      this.id = -id;\n      this.publicId = `example${-id}`;\n      this.example = true;\n    } else {\n      if (id < MIN_ID || id > MAX_ID) {\n        throw new InvalidIdError();\n      }\n      this.id = id;\n      this.publicId = toPublicId(id);\n      this.example = false;\n    }\n  }\n\n  toString(): string {\n    return this.publicId;\n  }\n\n  toUser(): NamedUser {\n    if (!this.example) {\n      throw new Error();\n    }\n    return Object.freeze<NamedUser>({\n      id: this.publicId,\n      name: `Example User ${this.id}`,\n      imageUrl: null,\n      premium: false,\n    });\n  }\n}\n\nfunction toPublicId(id: number): string {\n  return formatWithCheckDigit(toPublicInt(id));\n}\n\nfunction fromPublicId(publicId: string): number {\n  return fromPublicInt(parseWithCheckDigit(publicId));\n}\n\nfunction toPublicInt(id: number): number {\n  id = modMultiply(id, C1);\n  id = id ^ MASK;\n  id = id & MAX_ID;\n  id = id + OFFSET;\n  return id;\n}\n\nfunction fromPublicInt(id: number): number {\n  id = id - OFFSET;\n  id = id ^ MASK;\n  id = modMultiply(id, C2);\n  id = id & MAX_ID;\n  return id;\n}\n\nfunction parseWithCheckDigit(string: string): number {\n  let number = 0;\n  let checkSum = 0;\n  const checkDigit = toDigit(string, 0);\n  for (let i = 1; i < string.length; i++) {\n    const digit = toDigit(string, i);\n    number = number * BASE + digit;\n    checkSum += digit * digitWeight(string.length - i);\n  }\n  if (number === 0 || checkDigit !== checkSum % BASE) {\n    throw new InvalidIdError();\n  }\n  return number;\n}\n\nfunction formatWithCheckDigit(number: number): string {\n  let string = \"\";\n  let checkSum = 0;\n  do {\n    const digit = number % BASE;\n    string = DIGITS[digit] + string;\n    checkSum += digit * digitWeight(string.length);\n  } while ((number = (number / BASE) >>> 0) > 0);\n  const checkDigit = checkSum % BASE;\n  string = DIGITS[checkDigit] + string;\n  return string;\n}\n\n/** Multiply modulo 0xFFFFFFFF. */\nfunction modMultiply(a: number, b: number): number {\n  a = a >>> 0;\n  b = b >>> 0;\n  let r = 0;\n  for (let n = 0; n < 32; n++) {\n    if (((b >>> n) & 1) === 1) {\n      r += a << n;\n    }\n  }\n  return r >>> 0;\n}\n\nfunction toDigit(string: string, index: number): number {\n  const digit = INVERSE_DIGITS[string.charCodeAt(index)];\n  if (digit == null) {\n    throw new InvalidIdError();\n  }\n  return digit;\n}\n\nfunction digitWeight(pos: number): number {\n  return (pos & 1) === 0 ? 1 : 3;\n}\n","import { PublicId } from \"@keybr/publicid\";\nimport { expectType, request } from \"@keybr/request\";\nimport { type Result } from \"@keybr/result\";\nimport { formatMessage, parseFile } from \"@keybr/result-io\";\nimport example1Url from \"../../assets/example1.stats\";\nimport example2Url from \"../../assets/example2.stats\";\nimport example3Url from \"../../assets/example3.stats\";\nimport example4Url from \"../../assets/example4.stats\";\nimport example5Url from \"../../assets/example5.stats\";\nimport { type ProgressListener, type RemoteResultSync } from \"./types.ts\";\n\nconst url = \"/_/sync/data\";\n\nexport class ResultSyncNamedUser implements RemoteResultSync {\n  receive(pl: ProgressListener): Promise<Result[]> {\n    return receive(url, pl);\n  }\n\n  send(results: readonly Result[], pl: ProgressListener): Promise<void> {\n    return send(url, results, pl);\n  }\n\n  clear(): Promise<void> {\n    return clear(url);\n  }\n}\n\nexport class ResultSyncPublicUser implements RemoteResultSync {\n  readonly #userId: string;\n\n  constructor(userId: string) {\n    this.#userId = userId;\n  }\n\n  receive(pl: ProgressListener): Promise<Result[]> {\n    return receive(publicUserDataUrl(this.#userId), pl);\n  }\n\n  async send(results: readonly Result[], pl: ProgressListener): Promise<void> {\n    throw new Error(\"Disabled\");\n  }\n\n  async clear(): Promise<void> {\n    throw new Error(\"Disabled\");\n  }\n}\n\nexport class ResultSyncAnonymousUser implements RemoteResultSync {\n  async receive(pl: ProgressListener): Promise<Result[]> {\n    throw new Error(\"Disabled\");\n  }\n\n  async send(results: readonly Result[], pl: ProgressListener): Promise<void> {\n    throw new Error(\"Disabled\");\n  }\n\n  async clear(): Promise<void> {\n    throw new Error(\"Disabled\");\n  }\n}\n\nasync function receive(path: string, pl: ProgressListener): Promise<Result[]> {\n  const response = await request\n    .use(expectType(\"application/octet-stream\"))\n    .GET(path)\n    .on(\"download-progress\", (ev) => {\n      pl(ev.total ?? 0, ev.loaded);\n    })\n    .send();\n  return [...parseFile(new Uint8Array(await response.arrayBuffer()))];\n}\n\nasync function send(\n  path: string,\n  results: readonly Result[],\n  pl: ProgressListener,\n): Promise<void> {\n  const buffer = formatMessage(results);\n  const response = await request\n    .POST(path)\n    .on(\"upload-progress\", (ev) => {\n      pl(ev.total ?? 0, ev.loaded);\n    })\n    .send(buffer, \"application/octet-stream\");\n  await response.blob(); // Ignore.\n}\n\nasync function clear(path: string): Promise<void> {\n  const response = await request.DELETE(path).send();\n  await response.blob(); // Ignore.\n}\n\nfunction publicUserDataUrl(userId: string): string {\n  switch (userId) {\n    case PublicId.example1.publicId:\n      return example1Url;\n    case PublicId.example2.publicId:\n      return example2Url;\n    case PublicId.example3.publicId:\n      return example3Url;\n    case PublicId.example4.publicId:\n      return example4Url;\n    case PublicId.example5.publicId:\n      return example5Url;\n    default:\n      return `${url}/${encodeURIComponent(userId)}`;\n  }\n}\n","import { Reader, Writer } from \"@keybr/binary\";\nimport { type Result } from \"@keybr/result\";\nimport { readStructuredContent, writeResults } from \"./binary.ts\";\nimport { HEADER } from \"./header.ts\";\n\nexport function fileHeader(): Uint8Array {\n  return HEADER;\n}\n\nexport function fileChunk(results: Iterable<Result>): Uint8Array {\n  const writer = new Writer();\n  writeResults(writer, results);\n  return writer.buffer();\n}\n\nexport function parseFile(buffer: Uint8Array): Iterable<Result> {\n  return readStructuredContent(new Reader(buffer));\n}\n\nexport function formatFile(results: Iterable<Result>): Uint8Array {\n  const writer = new Writer();\n  writer.putBuffer(HEADER);\n  writeResults(writer, results);\n  return writer.buffer();\n}\n","import { recoverResults, Result } from \"@keybr/result\";\nimport { DatabaseError } from \"../errors.ts\";\nimport { PersistentResultStorage } from \"./local.ts\";\nimport { ResultSyncNamedUser, ResultSyncPublicUser } from \"./remotesync.ts\";\nimport {\n  type LocalResultStorage,\n  type ProgressListener,\n  type RemoteResultSync,\n  type ResultStorage,\n} from \"./types.ts\";\n\nexport type OpenRequest =\n  | {\n      // Load our own data.\n      readonly type: \"private\";\n      readonly userId: string | null;\n    }\n  | {\n      // Load data of a public user.\n      readonly type: \"public\";\n      readonly userId: string;\n    };\n\nexport function openResultStorage(request: OpenRequest): ResultStorage {\n  return wrapResultStorage(openRawResultStorage(request));\n}\n\nexport function wrapResultStorage(storage: ResultStorage): ResultStorage {\n  return translateErrors(validateResults(storage));\n}\n\nfunction openRawResultStorage(\n  request:\n    | { readonly type: \"private\"; readonly userId: string | null }\n    | {\n        readonly type: \"public\";\n        readonly userId: string;\n      },\n) {\n  switch (request.type) {\n    case \"private\": {\n      const { userId } = request;\n      if (userId == null) {\n        const local = new PersistentResultStorage();\n        return new ResultStorageOfAnonymousUser(local);\n      } else {\n        const local = new PersistentResultStorage();\n        const remote = new ResultSyncNamedUser();\n        return new ResultStorageOfNamedUser(local, remote);\n      }\n    }\n    case \"public\": {\n      const { userId } = request;\n      const remote = new ResultSyncPublicUser(userId);\n      return new ResultStorageOfPublicUser(remote);\n    }\n  }\n}\n\nfunction translateErrors(storage: ResultStorage): ResultStorage {\n  return new (class ErrorTranslator implements ResultStorage {\n    async load(pl?: ProgressListener): Promise<Result[]> {\n      try {\n        return await storage.load(pl);\n      } catch (err: any) {\n        throw new DatabaseError(\"Cannot read records from database\", {\n          cause: err,\n        });\n      }\n    }\n\n    async append(\n      results: readonly Result[],\n      pl?: ProgressListener,\n    ): Promise<void> {\n      try {\n        await storage.append(results, pl);\n      } catch (err: any) {\n        throw new DatabaseError(\"Cannot add records to database\", {\n          cause: err,\n        });\n      }\n    }\n\n    async clear(): Promise<void> {\n      try {\n        await storage.clear();\n      } catch (err: any) {\n        throw new DatabaseError(\"Cannot clear database\", {\n          cause: err,\n        });\n      }\n    }\n  })();\n}\n\nfunction validateResults(storage: ResultStorage): ResultStorage {\n  return new (class ErrorTranslator implements ResultStorage {\n    async load(pl?: ProgressListener): Promise<Result[]> {\n      return recoverResults(await storage.load(pl));\n    }\n\n    async append(\n      results: readonly Result[],\n      pl?: ProgressListener,\n    ): Promise<void> {\n      results = results.filter(Result.isValid);\n      if (results.length > 0) {\n        await storage.append(results, pl);\n      }\n    }\n\n    async clear(): Promise<void> {\n      await storage.clear();\n    }\n  })();\n}\n\nexport class ResultStorageOfAnonymousUser implements ResultStorage {\n  readonly #local: LocalResultStorage;\n\n  constructor(local: LocalResultStorage) {\n    this.#local = local;\n  }\n\n  async load(pl = dummy): Promise<Result[]> {\n    return await this.#local.load();\n  }\n\n  async append(results: readonly Result[], pl = dummy): Promise<void> {\n    await this.#local.append(results);\n  }\n\n  async clear(): Promise<void> {\n    await this.#local.clear();\n  }\n}\n\nexport class ResultStorageOfNamedUser implements ResultStorage {\n  readonly #local: LocalResultStorage;\n  readonly #remote: RemoteResultSync;\n\n  constructor(local: LocalResultStorage, remote: RemoteResultSync) {\n    this.#local = local;\n    this.#remote = remote;\n  }\n\n  async load(pl = dummy): Promise<Result[]> {\n    const results = await this.#remote.receive(pl);\n    if (results.length > 0) {\n      return results;\n    } else {\n      const results = await this.#local.load();\n      if (results.length > 0) {\n        await this.#remote.send(results, pl);\n        await this.#local.clear();\n        return results;\n      }\n    }\n    return [];\n  }\n\n  async append(results: readonly Result[], pl = dummy): Promise<void> {\n    await this.#remote.send(results, pl);\n  }\n\n  async clear(): Promise<void> {\n    await this.#remote.clear();\n  }\n}\n\nexport class ResultStorageOfPublicUser implements ResultStorage {\n  readonly #remote: RemoteResultSync;\n\n  constructor(remote: RemoteResultSync) {\n    this.#remote = remote;\n  }\n\n  async load(pl = dummy): Promise<Result[]> {\n    return await this.#remote.receive(pl);\n  }\n\n  async append(results: readonly Result[], pl = dummy): Promise<void> {\n    throw new Error(\"Disabled\");\n  }\n\n  async clear(): Promise<void> {\n    throw new Error(\"Disabled\");\n  }\n}\n\nfunction dummy(total: number, current: number): void {}\n","import { LoadingProgress, type NamedUser } from \"@keybr/pages-shared\";\nimport { type ReactNode, useMemo } from \"react\";\nimport { useLoader } from \"./internal/loader.ts\";\nimport { ResultProvider } from \"./internal/ResultProvider.tsx\";\nimport { openResultStorage } from \"./internal/storage.ts\";\nimport { type ResultStorage } from \"./internal/types.ts\";\n\nexport function PublicResultLoader({\n  user,\n  children,\n}: {\n  readonly user: NamedUser;\n  readonly children: ReactNode;\n}): ReactNode {\n  const storage = useResultStorage(user.id);\n  const state = useLoader(storage);\n  if (state.type === \"loading\") {\n    return <LoadingProgress total={state.total} current={state.current} />;\n  } else {\n    return (\n      <ResultProvider storage={storage} initialResults={state.results}>\n        {children}\n      </ResultProvider>\n    );\n  }\n}\n\nfunction useResultStorage(userId: string): ResultStorage {\n  return useMemo(() => openResultStorage({ type: \"public\", userId }), [userId]);\n}\n","import { LoadingProgress, usePageData } from \"@keybr/pages-shared\";\nimport { type ReactNode, useMemo } from \"react\";\nimport { useLoader } from \"./internal/loader.ts\";\nimport { ResultProvider } from \"./internal/ResultProvider.tsx\";\nimport { openResultStorage } from \"./internal/storage.ts\";\nimport { type ResultStorage } from \"./internal/types.ts\";\n\nexport function ResultLoader({\n  children,\n}: {\n  readonly children: ReactNode;\n}): ReactNode {\n  const storage = useResultStorage();\n  const state = useLoader(storage);\n  if (state.type === \"loading\") {\n    return <LoadingProgress total={state.total} current={state.current} />;\n  } else {\n    return (\n      <ResultProvider storage={storage} initialResults={state.results}>\n        {children}\n      </ResultProvider>\n    );\n  }\n}\n\nfunction useResultStorage(): ResultStorage {\n  const pageData = usePageData();\n  return useMemo(() => {\n    const { publicUser } = pageData;\n    return openResultStorage({\n      type: \"private\",\n      userId: publicUser.id,\n    });\n  }, [pageData]);\n}\n"],"names":["DatabaseError","Error","name","constructor","message","options","super","Symbol","toStringTag","useLoader","storage","state","setState","useState","type","total","current","useEffect","didCancel","async","results","load","catch","catchError","error","console","process","env","REPORT_ERRORS","toast","ResultProvider","initialResults","children","setResults","Provider","value","appendResults","newResults","append","clearResults","clear","InvalidFormatError","HEADER_SIGNATURE","putInt32","buffer","writeResult","writer","result","samples","histogram","putUint8","layout","xid","textType","putUint32","Math","round","timeStamp","putUintVlq","time","length","errors","sample","codePoint","hitCount","missCount","timeToType","readResult","reader","layoutXId","getUint8","textTypeXId","timestamp","getUint32","getUintVlq","size","i","push","ALL","xget","remaining","byteLength","validateHeader","readResults","err","cause","resultToJson","l","id","m","ts","n","t","e","h","histogramToJson","json","resultFromJson","layoutId","textTypeId","histogramJson","Number","isSafeInteger","key","Object","entries","isFinite","histogramFromJson","get","BE_BY","CS_CZ","DE_DE","FR_FR","IT_IT","PL_PL","RU_RU","SV_SE","UK_UA","EN_UK","EN_US","EN_CANARY_MATRIX","EN_COLEMAK","EN_COLEMAK_DH_ANSI","EN_COLEMAK_DH_MATRIX","EN_DVORAK","EN_WORKMAN","fixLegacyLayoutId","GENERATED","NATURAL","fixTextTypeId","formatMessage","putBuffer","AbortedError","BlockedError","DBNamedFactory","factory","version","this","DBFactory","openDatabase","migration","deleteDatabase","request","open","Promise","resolve","reject","onerror","ev","onblocked","onupgradeneeded","db","DBDatabase","tx","DBTransaction","transaction","oldVersion","newVersion","then","completed","onsuccess","objectStoreNames","Array","from","createObjectStore","DBObjectStore","deleteObjectStore","storeNames","mode","close","onabort","oncomplete","promisifyTransaction","durability","abort","commit","objectStore","store","autoIncrement","indexNames","keyPath","createIndex","DBIndex","deleteIndex","index","count","promisifyRequest","getAll","query","getAllKeys","add","put","delete","openCursor","direction","openKeyCursor","readAll","parse","idx","multiEntry","unique","cursor","item","continue","PersistentResultStorage","indexedDB","MAX_ID","EXAMPLE_ID_PATTERN","RegExp","OFFSET","MASK","C1","C2","BASE","DIGITS","INVERSE_DIGITS","InvalidIdError","PublicId","static","of","example1","example2","example3","example4","example5","publicId","match","exec","string","number","checkSum","checkDigit","toDigit","digit","digitWeight","parseWithCheckDigit","modMultiply","fromPublicId","example","isInteger","formatWithCheckDigit","toPublicInt","toPublicId","toString","toUser","freeze","imageUrl","premium","a","b","r","charCodeAt","pos","url","ResultSyncNamedUser","receive","pl","send","path","response","POST","on","loaded","blob","DELETE","ResultSyncPublicUser","userId","encodeURIComponent","publicUserDataUrl","use","GET","Uint8Array","arrayBuffer","openResultStorage","local","ResultStorageOfAnonymousUser","remote","ResultStorageOfNamedUser","ResultStorageOfPublicUser","openRawResultStorage","translateErrors","filter","isValid","validateResults","dummy","PublicResultLoader","user","useMemo","ResultLoader","pageData","publicUser"],"sourceRoot":""}