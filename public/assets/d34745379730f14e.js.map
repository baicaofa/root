{"version":3,"file":"d34745379730f14e.js","mappings":"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","sources":["webpack://keybr.com/./packages/page-profile/lib/profile/AccuracyStreaksSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/CalendarSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/DataScript.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/ExplainProfile.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/FooterSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/ChartWrapper.module.less?8518","webpack://keybr.com/./packages/page-profile/lib/profile/ChartWrapper.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/AccuracyHistogramSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/SpeedHistogramSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/HistogramsSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/KeyFrequencyHeatmapSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/KeyFrequencyHistogramSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/SmoothnessRange.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/KeySpeedChartSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/KeySpeedHistogramSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/ProgressOverviewSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/ResultGrouper.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/ShareProfileLink.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/SpeedChartSection.tsx","webpack://keybr.com/./packages/page-profile/lib/profile/Summary.module.less?2a1a","webpack://keybr.com/./packages/page-profile/lib/profile/Summary.tsx","webpack://keybr.com/./packages/page-profile/lib/ProfilePage.tsx","webpack://keybr.com/./packages/page-profile/lib/PublicProfilePage.tsx","webpack://keybr.com/./packages/keybr-pages-browser/lib/loader/ProfileLoader.tsx","webpack://keybr.com/./packages/keybr-pages-browser/lib/pages/profile.tsx","webpack://keybr.com/./packages/keybr-phonetic-model-loader/lib/loader.ts","webpack://keybr.com/./packages/keybr-phonetic-model-loader/lib/assets.ts","webpack://keybr.com/./packages/keybr-phonetic-model-loader/lib/PhoneticModelLoader.tsx"],"sourcesContent":["import { useIntlNumbers } from \"@keybr/intl\";\nimport { useFormatter } from \"@keybr/lesson-ui\";\nimport {\n  makeSummaryStats,\n  MutableStreakList,\n  type Result,\n  type Streak,\n} from \"@keybr/result\";\nimport { Explainer, Figure, NameValue, Para } from \"@keybr/widget\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nexport function AccuracyStreaksSection({\n  results,\n}: {\n  results: readonly Result[];\n}) {\n  const streaks = MutableStreakList.findLongest(results);\n\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.accuracy.header\"\n          defaultMessage=\"Accuracy Streaks\"\n        />\n      </Figure.Caption>\n\n      {streaks.length > 0 ? (\n        <dl>\n          {streaks.map((streak, index) => (\n            <StreakDetails key={index} streak={streak} />\n          ))}\n        </dl>\n      ) : (\n        <Para align=\"center\">\n          <FormattedMessage\n            id=\"profile.accuracy.noData\"\n            defaultMessage=\"You don’t have any accuracy streaks. Consider completing a lesson with a highest accuracy possible, regardless of typing speed.\"\n          />\n        </Para>\n      )}\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.accuracy.legend\"\n            defaultMessage=\"Above are listed the longest continuous sequences of lessons with accuracy above a given threshold, along with statistics about every such sequence. The longer the sequence of lessons, the better.\"\n          />\n        </Figure.Description>\n      </Explainer>\n    </Figure>\n  );\n}\n\nfunction StreakDetails({ streak }: { streak: Streak }) {\n  const { formatMessage, formatDate } = useIntl();\n  const { formatNumber, formatPercents } = useIntlNumbers();\n  const { formatSpeed } = useFormatter();\n  const { level, results } = streak;\n  const characterCount = results.reduce((x, { length }) => length + x, 0);\n  const stats = makeSummaryStats(results);\n\n  return (\n    <>\n      <dt>\n        <NameValue\n          name={formatMessage({\n            id: \"profile.chart.accuracy.accuracyThreshold.header\",\n            defaultMessage: \"Accuracy Threshold\",\n          })}\n          value={formatPercents(level)}\n        />\n      </dt>\n      <dd>\n        <NameValue\n          name={formatMessage({\n            id: \"metric.summary.lessonCount.label\",\n            defaultMessage: \"Lessons\",\n          })}\n          value={formatNumber(results.length)}\n        />\n        <NameValue\n          name={formatMessage({\n            id: \"metric.summary.characterCount.label\",\n            defaultMessage: \"Characters\",\n          })}\n          value={formatNumber(characterCount)}\n        />\n        <NameValue\n          name={formatMessage({\n            id: \"metric.summary.topSpeed.label\",\n            defaultMessage: \"Top Speed\",\n          })}\n          value={formatSpeed(stats.speed.max)}\n        />\n        <NameValue\n          name={formatMessage({\n            id: \"metric.summary.averageSpeed.label\",\n            defaultMessage: \"Average Speed\",\n          })}\n          value={formatSpeed(stats.speed.avg)}\n        />\n        <NameValue\n          name={formatMessage({\n            id: \"metric.summary.startDate.label\",\n            defaultMessage: \"Start Date\",\n          })}\n          value={formatDate(results[0].timeStamp, {\n            dateStyle: \"short\",\n            timeStyle: \"short\",\n          })}\n        />\n      </dd>\n    </>\n  );\n}\n","import { Calendar, EffortLegend, useEffort } from \"@keybr/lesson-ui\";\nimport { type DailyStatsMap } from \"@keybr/result\";\nimport { Explainer, Figure } from \"@keybr/widget\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport function CalendarSection({\n  dailyStatsMap,\n}: {\n  dailyStatsMap: DailyStatsMap;\n}) {\n  const effort = useEffort();\n\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.calendar.caption\"\n          defaultMessage=\"Practice Calendar\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.calendar.description\"\n            defaultMessage=\"This calendar shows the dates of active learning.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <Calendar dailyStatsMap={dailyStatsMap} effort={effort} />\n\n      <Figure.Legend>\n        <EffortLegend effort={effort} />\n      </Figure.Legend>\n    </Figure>\n  );\n}\n","import type { DailyStatsMap, SummaryStats } from \"@keybr/result\";\n\nexport function DataScript({\n  stats,\n  dailyStatsMap,\n}: {\n  stats: SummaryStats;\n  dailyStatsMap: DailyStatsMap;\n}) {\n  return (\n    <script\n      id=\"profile-data\"\n      type=\"application/json\"\n      dangerouslySetInnerHTML={{\n        __html: JSON.stringify({\n          allTime: stats,\n          today: dailyStatsMap.today.stats,\n          byDate: Object.fromEntries(\n            [...dailyStatsMap].map(({ date, stats }) => [date, stats]),\n          ),\n        }),\n      }}\n    ></script>\n  );\n}\n","import { booleanProp, Preferences } from \"@keybr/settings\";\nimport { Button, Field, FieldList, useExplainerState } from \"@keybr/widget\";\nimport { useLayoutEffect } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nconst propExplainSettings = booleanProp(\"prefs.profile.explain\", true);\n\nexport function ExplainProfile() {\n  const { formatMessage } = useIntl();\n  const { explainersVisible, toggleExplainers } = useExplainerState();\n  useLayoutEffect(() => {\n    toggleExplainers(Preferences.get(propExplainSettings));\n  });\n  return (\n    <FieldList>\n      <Field.Filler />\n      <Field>\n        <Button\n          onClick={() => {\n            toggleExplainers(!explainersVisible);\n            Preferences.set(propExplainSettings, !explainersVisible);\n          }}\n        >\n          {explainersVisible\n            ? `\\u25BC ${formatMessage({\n                id: \"profile.explain.hide\",\n                defaultMessage: \"Hide explanations\",\n              })}`\n            : `\\u25BA ${formatMessage({\n                id: \"profile.explain.show\",\n                defaultMessage: \"Explain charts\",\n              })}`}\n        </Button>\n      </Field>\n    </FieldList>\n  );\n}\n","import { useResults } from \"@keybr/result\";\nimport { Button, Field, FieldList, Icon } from \"@keybr/widget\";\nimport { mdiDeleteForever, mdiDownload } from \"@mdi/js\";\nimport { useIntl } from \"react-intl\";\n\nexport function FooterSection() {\n  const { formatMessage } = useIntl();\n  const { handleDownloadData, handleResetData } = useCommands();\n\n  return (\n    <FieldList>\n      <Field>\n        <Button\n          size={16}\n          icon={<Icon shape={mdiDownload} />}\n          label={formatMessage({\n            id: \"profile.widget.downloadData.label\",\n            defaultMessage: \"Download Data\",\n          })}\n          title={formatMessage({\n            id: \"profile.widget.downloadData.description\",\n            defaultMessage: \"Download all your typing data in JSON format.\",\n          })}\n          onClick={() => {\n            handleDownloadData();\n          }}\n        />\n      </Field>\n      <Field.Filler />\n      <Field>\n        <Button\n          size={16}\n          icon={<Icon shape={mdiDeleteForever} />}\n          label={formatMessage({\n            id: \"profile.widget.resetData.label\",\n            defaultMessage: \"Reset Statistics\",\n          })}\n          title={formatMessage({\n            id: \"profile.widget.resetData.description\",\n            defaultMessage:\n              \"Permanently delete all of your typing data and reset statistics.\",\n          })}\n          onClick={() => {\n            handleResetData();\n          }}\n        />\n      </Field>\n    </FieldList>\n  );\n}\n\nfunction useCommands() {\n  const { formatMessage } = useIntl();\n  const { results, clearResults } = useResults();\n  return {\n    handleDownloadData: () => {\n      const json = JSON.stringify(results);\n      const blob = new Blob([json], { type: \"application/json\" });\n      download(blob, \"typing-data.json\");\n    },\n    handleResetData: () => {\n      const message = formatMessage({\n        id: \"profile.widget.resetData.message\",\n        defaultMessage:\n          \"Are you sure you want to delete all data and reset your profile? \" +\n          \"This operation is permanent and cannot be undone!\",\n      });\n      if (window.confirm(message)) {\n        clearResults();\n      }\n    },\n  };\n}\n\nfunction download(blob: Blob, name: string) {\n  const a = document.createElement(\"a\");\n  a.setAttribute(\"href\", URL.createObjectURL(blob));\n  a.setAttribute(\"download\", name);\n  a.setAttribute(\"hidden\", \"\");\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"vGSI5Ve8m7\";\nexport { _1 as \"root\" }\n","import { type ReactNode } from \"react\";\nimport * as styles from \"./ChartWrapper.module.less\";\n\nexport function ChartWrapper({ children }: { children: ReactNode }) {\n  return <div className={styles.root}>{children}</div>;\n}\n","import { AccuracyHistogram, makeAccuracyDistribution } from \"@keybr/chart\";\nimport { useIntlNumbers } from \"@keybr/intl\";\nimport { type SummaryStats } from \"@keybr/result\";\nimport {\n  Explainer,\n  Field,\n  FieldList,\n  Figure,\n  Para,\n  RadioBox,\n  Value,\n} from \"@keybr/widget\";\nimport React, { useMemo, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { ChartWrapper } from \"./ChartWrapper.tsx\";\n\nexport function AccuracyHistogramSection({ stats }: { stats: SummaryStats }) {\n  const distribution = useMemo(() => makeAccuracyDistribution(), []);\n  const { formatMessage } = useIntl();\n  const { formatPercents } = useIntlNumbers();\n  const [period, setPeriod] = useState(\"average\");\n\n  const value = period === \"top\" ? stats.accuracy.max : stats.accuracy.avg;\n  const cdf = distribution.cdf(distribution.scale(value));\n\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.histogram.accuracy.caption\"\n          defaultMessage=\"Relative Accuracy\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.histogram.accuracy.description\"\n            defaultMessage=\"This is a histogram of the accuracies of all users, and your position in relation to them.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <Para align=\"center\">\n        {period === \"average\" ? (\n          <FormattedMessage\n            id=\"profile.chart.compareAverageAccuracy.description\"\n            defaultMessage=\"Your all time average accuracy beats {value} of all other people.\"\n            values={{\n              value: <Value value={value > 0 ? formatPercents(cdf) : \"N/A\"} />,\n            }}\n          />\n        ) : (\n          <FormattedMessage\n            id=\"profile.chart.compareTopAccuracy.description\"\n            defaultMessage=\"Your all time top accuracy beats {value} of all other people.\"\n            values={{\n              value: <Value value={value > 0 ? formatPercents(cdf) : \"N/A\"} />,\n            }}\n          />\n        )}\n      </Para>\n\n      <ChartWrapper>\n        <AccuracyHistogram\n          distribution={distribution}\n          thresholds={[\n            period === \"average\"\n              ? {\n                  label: formatMessage({\n                    id: \"metric.averageAccuracy.name\",\n                    defaultMessage: \"Average accuracy\",\n                  }),\n                  value,\n                }\n              : {\n                  label: formatMessage({\n                    id: \"metric.topAccuracy.name\",\n                    defaultMessage: \"Top accuracy\",\n                  }),\n                  value,\n                },\n          ]}\n          width=\"100%\"\n          height=\"25rem\"\n        />\n      </ChartWrapper>\n\n      <FieldList>\n        <Field.Filler />\n        <Field>\n          <RadioBox\n            name=\"period\"\n            value=\"average\"\n            checked={period === \"average\"}\n            label=\"Average Accuracy\"\n            onSelect={() => {\n              setPeriod(\"average\");\n            }}\n          />\n        </Field>\n        <Field>\n          <RadioBox\n            name=\"period\"\n            value=\"top\"\n            checked={period === \"top\"}\n            label=\"Top Accuracy\"\n            onSelect={() => {\n              setPeriod(\"top\");\n            }}\n          />\n        </Field>\n        <Field.Filler />\n      </FieldList>\n\n      <Explainer>\n        <Figure.Legend>\n          <FormattedMessage\n            id=\"profile.chart.histogram.accuracy.legend\"\n            defaultMessage=\"See how accurate you type relative to other users. The higher the bar is, the more people type at that accuracy. Your position is marked with the colored vertical lines.\"\n          />\n        </Figure.Legend>\n      </Explainer>\n    </Figure>\n  );\n}\n","import { makeSpeedDistribution, SpeedHistogram } from \"@keybr/chart\";\nimport { useIntlNumbers } from \"@keybr/intl\";\nimport { type SummaryStats } from \"@keybr/result\";\nimport {\n  Explainer,\n  Field,\n  FieldList,\n  Figure,\n  Para,\n  RadioBox,\n  Value,\n} from \"@keybr/widget\";\nimport React, { useMemo, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { ChartWrapper } from \"./ChartWrapper.tsx\";\n\nexport function SpeedHistogramSection({ stats }: { stats: SummaryStats }) {\n  const distribution = useMemo(() => makeSpeedDistribution(), []);\n  const { formatMessage } = useIntl();\n  const { formatPercents } = useIntlNumbers();\n  const [period, setPeriod] = useState(\"average\");\n\n  const value = period === \"top\" ? stats.speed.max : stats.speed.avg;\n  const cdf = distribution.cdf(value);\n\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.histogram.caption\"\n          defaultMessage=\"Relative Typing Speed\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.histogram.description\"\n            defaultMessage=\"This is a histogram of the typing speeds of all users, and your position in relation to them.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <Para align=\"center\">\n        {period === \"average\" ? (\n          <FormattedMessage\n            id=\"profile.chart.compareAverageSpeed.description\"\n            defaultMessage=\"Your all time average speed beats {value} of all other people.\"\n            values={{\n              value: <Value value={value > 0 ? formatPercents(cdf) : \"N/A\"} />,\n            }}\n          />\n        ) : (\n          <FormattedMessage\n            id=\"profile.chart.compareTopSpeed.description\"\n            defaultMessage=\"Your all time top speed beats {value} of all other people.\"\n            values={{\n              value: <Value value={value > 0 ? formatPercents(cdf) : \"N/A\"} />,\n            }}\n          />\n        )}\n      </Para>\n\n      <ChartWrapper>\n        <SpeedHistogram\n          distribution={distribution}\n          thresholds={[\n            period === \"average\"\n              ? {\n                  label: formatMessage({\n                    id: \"metric.averageSpeed.name\",\n                    defaultMessage: \"Average speed\",\n                  }),\n                  value,\n                }\n              : {\n                  label: formatMessage({\n                    id: \"metric.topSpeed.name\",\n                    defaultMessage: \"Top speed\",\n                  }),\n                  value,\n                },\n          ]}\n          width=\"100%\"\n          height=\"25rem\"\n        />\n      </ChartWrapper>\n\n      <FieldList>\n        <Field.Filler />\n        <Field>\n          <RadioBox\n            name=\"period\"\n            value=\"average\"\n            checked={period === \"average\"}\n            label=\"Average Speed\"\n            onSelect={() => {\n              setPeriod(\"average\");\n            }}\n          />\n        </Field>\n        <Field>\n          <RadioBox\n            name=\"period\"\n            value=\"top\"\n            checked={period === \"top\"}\n            label=\"Top Speed\"\n            onSelect={() => {\n              setPeriod(\"top\");\n            }}\n          />\n        </Field>\n        <Field.Filler />\n      </FieldList>\n\n      <Explainer>\n        <Figure.Legend>\n          <FormattedMessage\n            id=\"profile.chart.histogram.legend\"\n            defaultMessage=\"See how fast you type relative to other users. The higher the bar is, the more people type at that speed. Your position is marked with the colored vertical lines.\"\n          />\n        </Figure.Legend>\n      </Explainer>\n    </Figure>\n  );\n}\n","import { type SummaryStats } from \"@keybr/result\";\nimport { Tab, TabList } from \"@keybr/widget\";\nimport React, { useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { AccuracyHistogramSection } from \"./AccuracyHistogramSection.tsx\";\nimport { SpeedHistogramSection } from \"./SpeedHistogramSection.tsx\";\n\nexport function HistogramsSection({ stats }: { stats: SummaryStats }) {\n  const { formatMessage } = useIntl();\n  const [index, setIndex] = useState(0);\n  return (\n    <TabList selectedIndex={index} onSelect={setIndex}>\n      <Tab\n        label={formatMessage({\n          id: \"profile.chart.histogram.caption\",\n          defaultMessage: \"Relative Typing Speed\",\n        })}\n      >\n        <SpeedHistogramSection stats={stats} />\n      </Tab>\n      <Tab\n        label={formatMessage({\n          id: \"profile.chart.histogram.accuracy.caption\",\n          defaultMessage: \"Relative Accuracy\",\n        })}\n      >\n        <AccuracyHistogramSection stats={stats} />\n      </Tab>\n    </TabList>\n  );\n}\n","import { KeyFrequencyHeatmap, Marker } from \"@keybr/chart\";\nimport { useKeyboard } from \"@keybr/keyboard\";\nimport { type KeyStatsMap } from \"@keybr/result\";\nimport { Explainer, Figure } from \"@keybr/widget\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport function KeyFrequencyHeatmapSection({\n  keyStatsMap,\n}: {\n  keyStatsMap: KeyStatsMap;\n}) {\n  const keyboard = useKeyboard();\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.keyFrequencyHeatmap.caption\"\n          defaultMessage=\"Key Frequency Heatmap\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.keyFrequencyHeatmap.description\"\n            defaultMessage=\"This chart shows relative key frequencies as a heatmap.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <KeyFrequencyHeatmap keyStatsMap={keyStatsMap} keyboard={keyboard} />\n\n      <Figure.Legend>\n        <FormattedMessage\n          id=\"profile.chart.keyFrequencyHeatmap.legend\"\n          defaultMessage=\"Circle color: {label1} – hit count, {label2} – miss count.\"\n          values={{\n            label1: <Marker type=\"histogram-h\" />,\n            label2: <Marker type=\"histogram-m\" />,\n          }}\n        />\n      </Figure.Legend>\n    </Figure>\n  );\n}\n","import { KeyFrequencyHistogram, Marker } from \"@keybr/chart\";\nimport { type KeyStatsMap } from \"@keybr/result\";\nimport { Explainer, Figure } from \"@keybr/widget\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ChartWrapper } from \"./ChartWrapper.tsx\";\n\nexport function KeyFrequencyHistogramSection({\n  keyStatsMap,\n}: {\n  keyStatsMap: KeyStatsMap;\n}) {\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.keyFrequencyHistogram.caption\"\n          defaultMessage=\"Key Frequency Histogram\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.keyFrequencyHistogram.description\"\n            defaultMessage=\"This chart shows relative key frequencies.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <ChartWrapper>\n        <KeyFrequencyHistogram\n          keyStatsMap={keyStatsMap}\n          width=\"100%\"\n          height=\"28rem\"\n        />\n      </ChartWrapper>\n\n      <Figure.Legend>\n        <FormattedMessage\n          id=\"profile.chart.keyFrequencyHistogram.legend\"\n          defaultMessage=\"Bar color: {label1} – hit count, {label2} – miss count, {label3} – miss/hit ratio (relative miss frequency).\"\n          values={{\n            label1: <Marker type=\"histogram-h\" />,\n            label2: <Marker type=\"histogram-m\" />,\n            label3: <Marker type=\"histogram-r\" />,\n          }}\n        />\n      </Figure.Legend>\n    </Figure>\n  );\n}\n","import { Field, FieldList, Range } from \"@keybr/widget\";\nimport { defineMessage, useIntl } from \"react-intl\";\n\nexport function SmoothnessRange({\n  value,\n  disabled,\n  onChange,\n}: {\n  value: number;\n  disabled: boolean;\n  onChange: (value: number) => void;\n}) {\n  const { formatMessage } = useIntl();\n\n  return (\n    <FieldList>\n      <Field.Filler />\n      <Field>\n        <label>\n          {formatMessage(\n            defineMessage({\n              id: \"profile.smoothness.label\",\n              defaultMessage: \"Smoothness:\",\n            }),\n          )}\n        </label>\n      </Field>\n      <Field>\n        <Range\n          size={16}\n          disabled={disabled}\n          min={0}\n          max={100}\n          step={10}\n          value={Math.round(value * 100)}\n          title={formatMessage(\n            defineMessage({\n              id: \"profile.smoothness.description\",\n              defaultMessage: \"Eliminate noise to see the long-term trend.\",\n            }),\n          )}\n          onChange={(value) => {\n            onChange(value / 100);\n          }}\n        />\n      </Field>\n      <Field.Filler />\n    </FieldList>\n  );\n}\n","import { KeySpeedChart, Marker } from \"@keybr/chart\";\nimport { LessonKey, Target } from \"@keybr/lesson\";\nimport { KeyDetails, KeySelector } from \"@keybr/lesson-ui\";\nimport { hasData } from \"@keybr/math\";\nimport { type KeyStatsMap } from \"@keybr/result\";\nimport { useSettings } from \"@keybr/settings\";\nimport { Explainer, Figure, Para } from \"@keybr/widget\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ChartWrapper } from \"./ChartWrapper.tsx\";\nimport { SmoothnessRange } from \"./SmoothnessRange.tsx\";\n\nexport function KeySpeedChartSection({\n  keyStatsMap,\n}: {\n  keyStatsMap: KeyStatsMap;\n}) {\n  const { settings } = useSettings();\n  const { letters } = keyStatsMap;\n  const [current, setCurrent] = useState(letters[0]);\n  const [smoothness, setSmoothness] = useState(0.5);\n  const target = new Target(settings);\n\n  if (!letters.includes(current)) {\n    setCurrent(letters[0]);\n    return null;\n  }\n\n  const keyStats = keyStatsMap.get(current);\n  const { samples } = keyStats;\n\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.keySpeed.caption\"\n          defaultMessage=\"Key Typing Speed\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.keySpeed.description\"\n            defaultMessage=\"This chart shows the typing speed change for each individual key.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <Para align=\"center\">\n        <KeySelector\n          keyStatsMap={keyStatsMap}\n          current={current}\n          onSelect={(current) => {\n            setCurrent(current);\n          }}\n        />\n      </Para>\n\n      <Para align=\"center\">\n        <KeyDetails lessonKey={LessonKey.from(keyStats, target)} />\n      </Para>\n\n      <ChartWrapper>\n        <KeySpeedChart\n          samples={samples}\n          smoothness={smoothness}\n          width=\"100%\"\n          height=\"25rem\"\n        />\n      </ChartWrapper>\n\n      <SmoothnessRange\n        disabled={!hasData(samples)}\n        value={smoothness}\n        onChange={setSmoothness}\n      />\n\n      <Figure.Legend>\n        <FormattedMessage\n          id=\"profile.chart.keySpeed.legend\"\n          defaultMessage=\"Horizontal axis: lesson number. Vertical axis: {label1} – typing speed for the currently selected key, {label2} – target typing speed.\"\n          values={{\n            label1: <Marker type=\"speed\" />,\n            label2: <Marker type=\"threshold\" />,\n          }}\n        />\n      </Figure.Legend>\n    </Figure>\n  );\n}\n","import { KeySpeedHistogram } from \"@keybr/chart\";\nimport { type KeyStatsMap } from \"@keybr/result\";\nimport { Explainer, Figure } from \"@keybr/widget\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ChartWrapper } from \"./ChartWrapper.tsx\";\n\nexport function KeySpeedHistogramSection({\n  keyStatsMap,\n}: {\n  keyStatsMap: KeyStatsMap;\n}) {\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.keySpeedHistogram.caption\"\n          defaultMessage=\"Key Typing Speed Histogram\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.keySpeedHistogram.description\"\n            defaultMessage=\"This chart shows the average typing speed for each individual key.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <ChartWrapper>\n        <KeySpeedHistogram\n          keyStatsMap={keyStatsMap}\n          width=\"100%\"\n          height=\"18rem\"\n        />\n      </ChartWrapper>\n    </Figure>\n  );\n}\n","import { Marker, ProgressOverviewChart } from \"@keybr/chart\";\nimport { type KeyStatsMap } from \"@keybr/result\";\nimport { Explainer, Figure } from \"@keybr/widget\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ChartWrapper } from \"./ChartWrapper.tsx\";\n\nexport function ProgressOverviewSection({\n  keyStatsMap,\n}: {\n  keyStatsMap: KeyStatsMap;\n}) {\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.progressOverview.caption\"\n          defaultMessage=\"Learning Progress Overview\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.progressOverview.description\"\n            defaultMessage=\"This chart shows the learning progress overview for all keys.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <ChartWrapper>\n        <ProgressOverviewChart\n          keyStatsMap={keyStatsMap}\n          width=\"100%\"\n          height=\"35rem\"\n        />\n      </ChartWrapper>\n\n      <Figure.Legend>\n        <FormattedMessage\n          id=\"profile.chart.progressOverview.legend\"\n          defaultMessage=\"Horizontal axis: lesson number. Vertical axis: typing speed for each individual key, {label1} – slow, {label2} – fast.\"\n          values={{\n            label1: <Marker type=\"slow\" />,\n            label2: <Marker type=\"fast\" />,\n          }}\n        />\n      </Figure.Legend>\n    </Figure>\n  );\n}\n","import { useCollator } from \"@keybr/intl\";\nimport {\n  KeyboardContext,\n  keyboardProps,\n  Layout,\n  loadKeyboard,\n  useFormattedNames,\n} from \"@keybr/keyboard\";\nimport { Letter } from \"@keybr/phonetic-model\";\nimport { PhoneticModelLoader } from \"@keybr/phonetic-model-loader\";\nimport {\n  type KeyStatsMap,\n  makeKeyStatsMap,\n  ResultGroups,\n  useResults,\n} from \"@keybr/result\";\nimport { useSettings } from \"@keybr/settings\";\nimport { Field, FieldList, OptionList } from \"@keybr/widget\";\nimport { type ReactNode, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nexport function ResultGrouper({\n  children,\n}: {\n  children: (keyStatsMap: KeyStatsMap) => ReactNode;\n}) {\n  const { formatMessage } = useIntl();\n  const { settings } = useSettings();\n  const { results } = useResults();\n  const groups = ResultGroups.byLayout(results);\n  const resultsLayouts = new Set(groups.keys());\n  const configuredLayout = settings.get(keyboardProps.layout);\n  if (resultsLayouts.size === 0) {\n    resultsLayouts.add(configuredLayout);\n  }\n  const defaultLayout = () =>\n    resultsLayouts.has(configuredLayout)\n      ? configuredLayout\n      : [...resultsLayouts][0];\n  const [selectedLayout, setSelectedLayout] = useState(defaultLayout);\n  const [characterClass, setCharacterClass] = useState(\"letters\");\n  if (!resultsLayouts.has(selectedLayout)) {\n    setSelectedLayout(defaultLayout());\n  }\n  const layoutOptions = useLayoutOptions(resultsLayouts);\n  const keyboard = loadKeyboard(selectedLayout);\n  const group = groups.get(selectedLayout);\n\n  return (\n    <>\n      <FieldList>\n        <Field>\n          <FormattedMessage\n            id=\"profile.widget.groupSelector.label\"\n            defaultMessage=\"Show statistics for:\"\n          />\n        </Field>\n        <Field>\n          <OptionList\n            options={layoutOptions}\n            value={selectedLayout.id}\n            onSelect={(value) => {\n              setSelectedLayout(Layout.ALL.get(value));\n            }}\n          />\n        </Field>\n        <Field>\n          <OptionList\n            options={[\n              {\n                name: formatMessage({\n                  id: \"characterClass.letters\",\n                  defaultMessage: \"Letters\",\n                }),\n                value: \"letters\",\n              },\n              {\n                name: formatMessage({\n                  id: \"characterClass.digits\",\n                  defaultMessage: \"Digits\",\n                }),\n                value: \"digits\",\n              },\n              {\n                name: formatMessage({\n                  id: \"characterClass.punctuationCharacters\",\n                  defaultMessage: \"Punctuation characters\",\n                }),\n                value: \"punctuators\",\n              },\n              {\n                name: formatMessage({\n                  id: \"characterClass.specialCharacters\",\n                  defaultMessage: \"Special characters\",\n                }),\n                value: \"specials\",\n              },\n            ]}\n            value={characterClass}\n            onSelect={(value) => {\n              setCharacterClass(value);\n            }}\n          />\n        </Field>\n      </FieldList>\n\n      <KeyboardContext.Provider value={keyboard}>\n        <PhoneticModelLoader language={selectedLayout.language}>\n          {({ letters }) => {\n            switch (characterClass) {\n              case \"letters\":\n                return children(\n                  makeKeyStatsMap(\n                    Letter.restrict(letters, keyboard.getCodePoints()),\n                    group,\n                  ),\n                );\n              case \"digits\":\n                return children(makeKeyStatsMap(Letter.digits, group));\n              case \"punctuators\":\n                return children(makeKeyStatsMap(Letter.punctuators, group));\n              case \"specials\":\n                return children(makeKeyStatsMap(Letter.specials, group));\n              default:\n                throw new Error();\n            }\n          }}\n        </PhoneticModelLoader>\n      </KeyboardContext.Provider>\n    </>\n  );\n}\n\nfunction useLayoutOptions(layouts: Iterable<Layout>) {\n  const { formatFullLayoutName } = useFormattedNames();\n  const { compare } = useCollator();\n  return [...layouts]\n    .map((item) => ({\n      value: item.id,\n      name: formatFullLayoutName(item),\n    }))\n    .sort((a, b) => compare(a.name, b.name));\n}\n","import { type NamedUser } from \"@keybr/pages-shared\";\nimport {\n  Button,\n  Field,\n  FieldList,\n  Icon,\n  TextField,\n  type TextFieldRef,\n  useClipboard,\n} from \"@keybr/widget\";\nimport { mdiContentCopy, mdiOpenInNew } from \"@mdi/js\";\nimport { useRef } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nexport function ShareProfileLink({ user }: { user: NamedUser }) {\n  const { formatMessage } = useIntl();\n  const textFieldRef = useRef<TextFieldRef>(null);\n  const { copyText } = useClipboard();\n\n  const url = new URL(window.location.href);\n  url.pathname = `/profile/${user.id}`;\n  const href = String(url);\n\n  return (\n    <FieldList>\n      <Field>\n        <FormattedMessage\n          id=\"profile.widget.shareText\"\n          defaultMessage=\"Share your profile:\"\n        />\n      </Field>\n      <Field>\n        <TextField\n          ref={textFieldRef}\n          size={24}\n          value={href}\n          onFocus={() => {\n            const { current } = textFieldRef;\n            if (current != null) {\n              current.select();\n            }\n          }}\n        />\n      </Field>\n      <Field>\n        <Button\n          icon={<Icon shape={mdiContentCopy} />}\n          label={formatMessage({\n            id: \"profile.widget.share.label\",\n            defaultMessage: \"Copy\",\n          })}\n          title={formatMessage({\n            id: \"profile.widget.share.description\",\n            defaultMessage: \"Copy profile link to the clipboard.\",\n          })}\n          onClick={() => {\n            const { current } = textFieldRef;\n            if (current != null) {\n              current.select();\n              copyText(href);\n            }\n          }}\n        />\n      </Field>\n      <Field>\n        <Button\n          icon={<Icon shape={mdiOpenInNew} />}\n          label={formatMessage({\n            id: \"profile.widget.visit.label\",\n            defaultMessage: \"Visit\",\n          })}\n          title={formatMessage({\n            id: \"profile.widget.visit.description\",\n            defaultMessage: \"Visit your public profile page.\",\n          })}\n          onClick={() => {\n            document.location = href;\n          }}\n        />\n      </Field>\n    </FieldList>\n  );\n}\n","import { Marker, SpeedChart } from \"@keybr/chart\";\nimport { hasData } from \"@keybr/math\";\nimport { type Result } from \"@keybr/result\";\nimport { Explainer, Figure } from \"@keybr/widget\";\nimport { useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ChartWrapper } from \"./ChartWrapper.tsx\";\nimport { SmoothnessRange } from \"./SmoothnessRange.tsx\";\n\nexport function SpeedChartSection({ results }: { results: readonly Result[] }) {\n  const [smoothness, setSmoothness] = useState(0.5);\n\n  return (\n    <Figure>\n      <Figure.Caption>\n        <FormattedMessage\n          id=\"profile.chart.speed.caption\"\n          defaultMessage=\"Typing Speed\"\n        />\n      </Figure.Caption>\n\n      <Explainer>\n        <Figure.Description>\n          <FormattedMessage\n            id=\"profile.chart.speed.description\"\n            defaultMessage=\"This chart shows how overall typing speed changes over time.\"\n          />\n        </Figure.Description>\n      </Explainer>\n\n      <ChartWrapper>\n        <SpeedChart\n          results={results}\n          smoothness={smoothness}\n          width=\"100%\"\n          height=\"25rem\"\n        />\n      </ChartWrapper>\n\n      <SmoothnessRange\n        disabled={!hasData(results)}\n        value={smoothness}\n        onChange={setSmoothness}\n      />\n\n      <Figure.Legend>\n        <FormattedMessage\n          id=\"profile.chart.speed.legend\"\n          defaultMessage=\"Horizontal axis: lesson number. Vertical axis: {label1} – typing speed, {label2} – typing accuracy, {label3} – number of keys in the lessons.\"\n          values={{\n            label1: <Marker type=\"speed\" />,\n            label2: <Marker type=\"accuracy\" />,\n            label3: <Marker type=\"complexity\" />,\n          }}\n        />\n      </Figure.Legend>\n    </Figure>\n  );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"AABHJK7Kdv\";\nvar _2 = \"T5Dbe9eY7n\";\nvar _3 = \"owjQqjOKgs\";\nvar _4 = \"U0RfBIvsx_\";\nexport { _1 as \"itemName\", _2 as \"itemValue\", _3 as \"statisticList\", _4 as \"statisticListItem\" }\n","import { useIntlNumbers } from \"@keybr/intl\";\nimport { useFormatter } from \"@keybr/lesson-ui\";\nimport { type SummaryStats } from \"@keybr/result\";\nimport { formatDuration, Header, Para } from \"@keybr/widget\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport * as styles from \"./Summary.module.less\";\n\nexport function AllTimeSummary({\n  stats: { count, time, speed, accuracy },\n}: {\n  stats: SummaryStats;\n}) {\n  const { formatMessage } = useIntl();\n  const { formatNumber, formatPercents } = useIntlNumbers();\n  const { formatSpeed } = useFormatter();\n\n  return (\n    <>\n      <Header level={2}>\n        <FormattedMessage\n          id=\"profile.chart.summary.statisticsAllTime.header\"\n          defaultMessage=\"All Time Statistics\"\n        />\n      </Header>\n\n      <Para className={styles.statisticList}>\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.totalTime.label\",\n            defaultMessage: \"Time\",\n          })}\n          value={formatDuration(time)}\n          title={formatMessage({\n            id: \"metric.summary.totalTime.description\",\n            defaultMessage: \"Time spent on exercises.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.lessonCount.label\",\n            defaultMessage: \"Lessons\",\n          })}\n          value={formatNumber(count)}\n          title={formatMessage({\n            id: \"metric.summary.lessonCount.description\",\n            defaultMessage: \"The number of lessons completed.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.topSpeed.label\",\n            defaultMessage: \"Top Speed\",\n          })}\n          value={speed.max > 0 ? formatSpeed(speed.max) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.topSpeed.description\",\n            defaultMessage: \"Top typing speed.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.averageSpeed.label\",\n            defaultMessage: \"Average Speed\",\n          })}\n          value={speed.avg > 0 ? formatSpeed(speed.avg) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.averageSpeed.description\",\n            defaultMessage: \"Average typing speed.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.topAccuracy.label\",\n            defaultMessage: \"Top Accuracy\",\n          })}\n          value={accuracy.max > 0 ? formatPercents(accuracy.max) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.topAccuracy.description\",\n            defaultMessage: \"Top typing accuracy.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.averageAccuracy.label\",\n            defaultMessage: \"Average Accuracy\",\n          })}\n          value={accuracy.avg > 0 ? formatPercents(accuracy.avg) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.averageAccuracy.description\",\n            defaultMessage: \"Average typing accuracy.\",\n          })}\n        />\n      </Para>\n    </>\n  );\n}\n\nexport function TodaySummary({\n  stats: { count, time, speed, accuracy },\n}: {\n  stats: SummaryStats;\n}) {\n  const { formatMessage } = useIntl();\n  const { formatNumber, formatPercents } = useIntlNumbers();\n  const { formatSpeed } = useFormatter();\n\n  return (\n    <>\n      <Header level={2}>\n        <FormattedMessage\n          id=\"profile.chart.summary.statisticsToday.header\"\n          defaultMessage=\"Statistics for Today\"\n        />\n      </Header>\n\n      <Para className={styles.statisticList}>\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.totalTimeToday.label\",\n            defaultMessage: \"Time\",\n          })}\n          value={formatDuration(time)}\n          title={formatMessage({\n            id: \"metric.summary.totalTimeToday.description\",\n            defaultMessage: \"Time spent on exercises today.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.lessonCountToday.label\",\n            defaultMessage: \"Lessons\",\n          })}\n          value={formatNumber(count)}\n          title={formatMessage({\n            id: \"metric.summary.lessonCountToday.description\",\n            defaultMessage: \"The number of lessons completed today.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.topSpeedToday.label\",\n            defaultMessage: \"Top Speed\",\n          })}\n          value={speed.max > 0 ? formatSpeed(speed.max) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.topSpeedToday.description\",\n            defaultMessage: \"Top typing speed today.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.averageSpeedToday.label\",\n            defaultMessage: \"Average Speed\",\n          })}\n          value={speed.avg > 0 ? formatSpeed(speed.avg) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.averageSpeedToday.description\",\n            defaultMessage: \"Average typing speed today.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.topAccuracyToday.label\",\n            defaultMessage: \"Top Accuracy\",\n          })}\n          value={accuracy.max > 0 ? formatPercents(accuracy.max) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.topAccuracyToday.description\",\n            defaultMessage: \"Top typing accuracy today.\",\n          })}\n        />\n\n        <Statistic\n          name={formatMessage({\n            id: \"metric.summary.averageAccuracyToday.label\",\n            defaultMessage: \"Average Accuracy\",\n          })}\n          value={accuracy.avg > 0 ? formatPercents(accuracy.avg) : \"N/A\"}\n          title={formatMessage({\n            id: \"metric.summary.averageAccuracyToday.description\",\n            defaultMessage: \"Average typing accuracy today.\",\n          })}\n        />\n      </Para>\n    </>\n  );\n}\n\nfunction Statistic({\n  name,\n  value,\n  title,\n}: {\n  name: unknown;\n  value: unknown;\n  title: string;\n}) {\n  return (\n    <span className={styles.statisticListItem} title={title}>\n      <span className={styles.itemName}>{String(name) + \":\"}</span>\n      <span className={styles.itemValue}>{String(value)}</span>\n    </span>\n  );\n}\n","import { type NamedUser, Screen, usePageData } from \"@keybr/pages-shared\";\nimport {\n  DailyStatsMap,\n  type KeyStatsMap,\n  makeSummaryStats,\n} from \"@keybr/result\";\nimport { ExplainerBoundary } from \"@keybr/widget\";\nimport { AccuracyStreaksSection } from \"./profile/AccuracyStreaksSection.tsx\";\nimport { CalendarSection } from \"./profile/CalendarSection.tsx\";\nimport { DataScript } from \"./profile/DataScript.tsx\";\nimport { ExplainProfile } from \"./profile/ExplainProfile.tsx\";\nimport { FooterSection } from \"./profile/FooterSection.tsx\";\nimport { HistogramsSection } from \"./profile/HistogramsSection.tsx\";\nimport { KeyFrequencyHeatmapSection } from \"./profile/KeyFrequencyHeatmapSection.tsx\";\nimport { KeyFrequencyHistogramSection } from \"./profile/KeyFrequencyHistogramSection.tsx\";\nimport { KeySpeedChartSection } from \"./profile/KeySpeedChartSection.tsx\";\nimport { KeySpeedHistogramSection } from \"./profile/KeySpeedHistogramSection.tsx\";\nimport { ProgressOverviewSection } from \"./profile/ProgressOverviewSection.tsx\";\nimport { ResultGrouper } from \"./profile/ResultGrouper.tsx\";\nimport { ShareProfileLink } from \"./profile/ShareProfileLink.tsx\";\nimport { SpeedChartSection } from \"./profile/SpeedChartSection.tsx\";\nimport { AllTimeSummary, TodaySummary } from \"./profile/Summary.tsx\";\n\nexport function ProfilePage() {\n  return (\n    <Screen>\n      <ExplainerBoundary>\n        <ExplainProfile />\n        <ResultGrouper>\n          {(keyStatsMap) => <Content keyStatsMap={keyStatsMap} />}\n        </ResultGrouper>\n      </ExplainerBoundary>\n    </Screen>\n  );\n}\n\nfunction Content({ keyStatsMap }: { keyStatsMap: KeyStatsMap }) {\n  const { publicUser } = usePageData();\n  const { results } = keyStatsMap;\n  const stats = makeSummaryStats(results);\n  const dailyStatsMap = new DailyStatsMap(results);\n\n  return (\n    <>\n      <DataScript stats={stats} dailyStatsMap={dailyStatsMap} />\n\n      <AllTimeSummary stats={stats} />\n\n      <TodaySummary stats={dailyStatsMap.today.stats} />\n\n      <AccuracyStreaksSection results={results} />\n\n      <HistogramsSection stats={stats} />\n\n      <ProgressOverviewSection keyStatsMap={keyStatsMap} />\n\n      <SpeedChartSection results={results} />\n\n      <KeySpeedChartSection keyStatsMap={keyStatsMap} />\n\n      <KeySpeedHistogramSection keyStatsMap={keyStatsMap} />\n\n      <KeyFrequencyHistogramSection keyStatsMap={keyStatsMap} />\n\n      <KeyFrequencyHeatmapSection keyStatsMap={keyStatsMap} />\n\n      <CalendarSection dailyStatsMap={dailyStatsMap} />\n\n      {publicUser.id != null && (\n        <ShareProfileLink user={publicUser as NamedUser} />\n      )}\n\n      <FooterSection />\n    </>\n  );\n}\n","import { type NamedUser, Screen, UserName } from \"@keybr/pages-shared\";\nimport {\n  DailyStatsMap,\n  type KeyStatsMap,\n  makeSummaryStats,\n} from \"@keybr/result\";\nimport { ExplainerBoundary, Header } from \"@keybr/widget\";\nimport { AccuracyStreaksSection } from \"./profile/AccuracyStreaksSection.tsx\";\nimport { CalendarSection } from \"./profile/CalendarSection.tsx\";\nimport { DataScript } from \"./profile/DataScript.tsx\";\nimport { ExplainProfile } from \"./profile/ExplainProfile.tsx\";\nimport { HistogramsSection } from \"./profile/HistogramsSection.tsx\";\nimport { KeyFrequencyHeatmapSection } from \"./profile/KeyFrequencyHeatmapSection.tsx\";\nimport { KeyFrequencyHistogramSection } from \"./profile/KeyFrequencyHistogramSection.tsx\";\nimport { KeySpeedChartSection } from \"./profile/KeySpeedChartSection.tsx\";\nimport { KeySpeedHistogramSection } from \"./profile/KeySpeedHistogramSection.tsx\";\nimport { ProgressOverviewSection } from \"./profile/ProgressOverviewSection.tsx\";\nimport { ResultGrouper } from \"./profile/ResultGrouper.tsx\";\nimport { SpeedChartSection } from \"./profile/SpeedChartSection.tsx\";\nimport { AllTimeSummary, TodaySummary } from \"./profile/Summary.tsx\";\n\nexport function PublicProfilePage({ user }: { user: NamedUser }) {\n  return (\n    <Screen>\n      <ExplainerBoundary>\n        <ExplainProfile />\n        <Header level={1}>\n          <UserName user={user} />\n        </Header>\n        <ResultGrouper>\n          {(keyStatsMap) => <Content keyStatsMap={keyStatsMap} />}\n        </ResultGrouper>\n      </ExplainerBoundary>\n    </Screen>\n  );\n}\n\nfunction Content({ keyStatsMap }: { keyStatsMap: KeyStatsMap }) {\n  const { results } = keyStatsMap;\n  const stats = makeSummaryStats(results);\n  const dailyStatsMap = new DailyStatsMap(results);\n\n  return (\n    <>\n      <DataScript stats={stats} dailyStatsMap={dailyStatsMap} />\n\n      <AllTimeSummary stats={stats} />\n\n      <TodaySummary stats={dailyStatsMap.today.stats} />\n\n      <AccuracyStreaksSection results={results} />\n\n      <HistogramsSection stats={stats} />\n\n      <ProgressOverviewSection keyStatsMap={keyStatsMap} />\n\n      <SpeedChartSection results={results} />\n\n      <KeySpeedChartSection keyStatsMap={keyStatsMap} />\n\n      <KeySpeedHistogramSection keyStatsMap={keyStatsMap} />\n\n      <KeyFrequencyHistogramSection keyStatsMap={keyStatsMap} />\n\n      <KeyFrequencyHeatmapSection keyStatsMap={keyStatsMap} />\n\n      <CalendarSection dailyStatsMap={dailyStatsMap} />\n    </>\n  );\n}\n","import { catchError } from \"@keybr/debug\";\nimport { LoadingProgress, type NamedUser } from \"@keybr/pages-shared\";\nimport { expectType, request } from \"@keybr/request\";\nimport { type ReactNode, useEffect, useState } from \"react\";\n\nexport function ProfileLoader({\n  userId,\n  children,\n  fallback = <LoadingProgress />,\n}: {\n  readonly userId: string;\n  readonly children: (user: NamedUser) => ReactNode;\n  readonly fallback?: ReactNode;\n}) {\n  const result = useProfileLoader(userId);\n  if (result == null) {\n    return fallback;\n  } else {\n    return children(result);\n  }\n}\n\nexport function useProfileLoader(userId: string): NamedUser | null {\n  const [profile, setProfile] = useState<NamedUser | null>(null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    loadProfile(userId)\n      .then((entries) => {\n        if (!didCancel) {\n          setProfile(entries);\n        }\n      })\n      .catch(catchError);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [userId]);\n\n  return profile;\n}\n\nasync function loadProfile(userId: string): Promise<NamedUser> {\n  const response = await request\n    .use(expectType(\"application/json\"))\n    .GET(`/_/profile/${encodeURIComponent(userId)}`)\n    .send();\n  return await response.json<NamedUser>();\n}\n","import { ProfilePage, PublicProfilePage } from \"@keybr/page-profile\";\nimport { PublicResultLoader, ResultLoader } from \"@keybr/result-loader\";\nimport { useParams } from \"react-router\";\nimport { ProfileLoader } from \"../loader/ProfileLoader.tsx\";\n\nexport default function Page() {\n  const { userId = \"me\" } = useParams();\n  if (userId === \"me\") {\n    return <Profile />;\n  } else {\n    return <PublicProfile userId={userId} />;\n  }\n}\n\nfunction Profile() {\n  return (\n    <ResultLoader>\n      <ProfilePage />\n    </ResultLoader>\n  );\n}\n\nfunction PublicProfile({ userId }: { readonly userId: string }) {\n  return (\n    <ProfileLoader userId={userId}>\n      {(user) => (\n        <PublicResultLoader user={user}>\n          <PublicProfilePage user={user} />\n        </PublicResultLoader>\n      )}\n    </ProfileLoader>\n  );\n}\n","import { type Language } from \"@keybr/keyboard\";\nimport {\n  censor,\n  makePhoneticModel,\n  type PhoneticModel,\n} from \"@keybr/phonetic-model\";\nimport { expectType, request } from \"@keybr/request\";\nimport { modelAssetPath } from \"./assets.ts\";\n\nexport const loaderImpl: PhoneticModel.Loader = async (\n  language: Language,\n): Promise<PhoneticModel> => {\n  const response = await request\n    .use(expectType(\"application/octet-stream\"))\n    .GET(modelAssetPath(language))\n    .send();\n  const body = await response.arrayBuffer();\n  const model = makePhoneticModel(language, new Uint8Array(body));\n  return censor(model);\n};\n","import { Language } from \"@keybr/keyboard\";\nimport AR from \"@keybr/phonetic-model/assets/model-ar.data\";\nimport BE from \"@keybr/phonetic-model/assets/model-be.data\";\nimport CS from \"@keybr/phonetic-model/assets/model-cs.data\";\nimport DE from \"@keybr/phonetic-model/assets/model-de.data\";\nimport EL from \"@keybr/phonetic-model/assets/model-el.data\";\nimport EN from \"@keybr/phonetic-model/assets/model-en.data\";\nimport ES from \"@keybr/phonetic-model/assets/model-es.data\";\nimport FA from \"@keybr/phonetic-model/assets/model-fa.data\";\nimport FR from \"@keybr/phonetic-model/assets/model-fr.data\";\nimport HE from \"@keybr/phonetic-model/assets/model-he.data\";\nimport HR from \"@keybr/phonetic-model/assets/model-hr.data\";\nimport HU from \"@keybr/phonetic-model/assets/model-hu.data\";\nimport IT from \"@keybr/phonetic-model/assets/model-it.data\";\nimport LT from \"@keybr/phonetic-model/assets/model-lt.data\";\nimport NB from \"@keybr/phonetic-model/assets/model-nb.data\";\nimport NL from \"@keybr/phonetic-model/assets/model-nl.data\";\nimport PL from \"@keybr/phonetic-model/assets/model-pl.data\";\nimport PT from \"@keybr/phonetic-model/assets/model-pt.data\";\nimport RO from \"@keybr/phonetic-model/assets/model-ro.data\";\nimport RU from \"@keybr/phonetic-model/assets/model-ru.data\";\nimport SL from \"@keybr/phonetic-model/assets/model-sl.data\";\nimport SV from \"@keybr/phonetic-model/assets/model-sv.data\";\nimport TH from \"@keybr/phonetic-model/assets/model-th.data\";\nimport TR from \"@keybr/phonetic-model/assets/model-tr.data\";\nimport UK from \"@keybr/phonetic-model/assets/model-uk.data\";\n\nexport function modelAssetPath(language: Language): string {\n  switch (language) {\n    case Language.AR:\n      return AR;\n    case Language.BE:\n      return BE;\n    case Language.CS:\n      return CS;\n    case Language.DE:\n      return DE;\n    case Language.EL:\n      return EL;\n    case Language.EN:\n      return EN;\n    case Language.ES:\n      return ES;\n    case Language.FA:\n      return FA;\n    case Language.FR:\n      return FR;\n    case Language.HE:\n      return HE;\n    case Language.HR:\n      return HR;\n    case Language.HU:\n      return HU;\n    case Language.IT:\n      return IT;\n    case Language.LT:\n      return LT;\n    case Language.NB:\n      return NB;\n    case Language.NL:\n      return NL;\n    case Language.PL:\n      return PL;\n    case Language.PT:\n      return PT;\n    case Language.RO:\n      return RO;\n    case Language.RU:\n      return RU;\n    case Language.SL:\n      return SL;\n    case Language.SV:\n      return SV;\n    case Language.TH:\n      return TH;\n    case Language.TR:\n      return TR;\n    case Language.UK:\n      return UK;\n    default:\n      throw new Error();\n  }\n}\n","import { catchError } from \"@keybr/debug\";\nimport { type Language } from \"@keybr/keyboard\";\nimport { LoadingProgress } from \"@keybr/pages-shared\";\nimport {\n  type PhoneticModel,\n  PhoneticModelContext,\n} from \"@keybr/phonetic-model\";\nimport { type ReactNode, useEffect, useState } from \"react\";\nimport { loaderImpl } from \"./loader.ts\";\n\nexport function PhoneticModelLoader({\n  language,\n  children,\n  fallback = <LoadingProgress />,\n}: {\n  readonly language: Language;\n  readonly children: (result: PhoneticModel) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  return (\n    <Loader key={language.id} language={language} fallback={fallback}>\n      {children}\n    </Loader>\n  );\n}\n\nexport namespace PhoneticModelLoader {\n  export let loader: PhoneticModel.Loader = loaderImpl;\n}\n\nfunction Loader({\n  language,\n  children,\n  fallback,\n}: {\n  readonly language: Language;\n  readonly children: (result: PhoneticModel) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  const result = useLoader(language);\n  if (result == null) {\n    return fallback;\n  } else {\n    return (\n      <PhoneticModelContext.Provider value={result}>\n        {children(result)}\n      </PhoneticModelContext.Provider>\n    );\n  }\n}\n\nfunction useLoader(language: Language): PhoneticModel | null {\n  const [result, setResult] = useState<PhoneticModel | null>(null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    PhoneticModelLoader.loader(language)\n      .then((result) => {\n        if (!didCancel) {\n          setResult(result);\n        }\n      })\n      .catch(catchError);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [language]);\n\n  return result;\n}\n"],"names":["AccuracyStreaksSection","results","streaks","findLongest","Figure","Caption","length","map","streak","index","StreakDetails","Para","align","Explainer","Description","formatMessage","formatDate","useIntl","formatNumber","formatPercents","formatSpeed","level","characterCount","reduce","x","stats","NameValue","name","value","speed","max","avg","timeStamp","dateStyle","timeStyle","CalendarSection","dailyStatsMap","effort","Legend","DataScript","id","type","dangerouslySetInnerHTML","__html","JSON","stringify","allTime","today","byDate","Object","fromEntries","date","propExplainSettings","ExplainProfile","explainersVisible","toggleExplainers","useLayoutEffect","get","FieldList","Filler","Button","onClick","set","FooterSection","handleDownloadData","handleResetData","clearResults","json","blob","a","document","createElement","setAttribute","URL","createObjectURL","body","appendChild","click","removeChild","download","Blob","message","window","confirm","useCommands","size","icon","Icon","I","shape","mdi","label","title","_1","ChartWrapper","children","className","AccuracyHistogramSection","distribution","useMemo","period","setPeriod","useState","accuracy","cdf","scale","values","thresholds","width","height","RadioBox","checked","onSelect","SpeedHistogramSection","HistogramsSection","setIndex","TabList","selectedIndex","KeyFrequencyHeatmapSection","keyStatsMap","keyboard","label1","label2","KeyFrequencyHistogramSection","label3","SmoothnessRange","disabled","onChange","Range","min","step","Math","round","KeySpeedChartSection","settings","letters","current","setCurrent","smoothness","setSmoothness","target","includes","keyStats","samples","lessonKey","from","KeySpeedHistogramSection","ProgressOverviewSection","ResultGrouper","groups","byLayout","resultsLayouts","Set","keys","configuredLayout","layout","add","defaultLayout","has","selectedLayout","setSelectedLayout","characterClass","setCharacterClass","layoutOptions","layouts","formatFullLayoutName","compare","item","sort","b","useLayoutOptions","group","OptionList","options","ALL","Provider","language","restrict","getCodePoints","digits","punctuators","specials","Error","ShareProfileLink","user","textFieldRef","useRef","copyText","url","location","href","pathname","String","TextField","ref","onFocus","select","SpeedChartSection","_2","_3","_4","AllTimeSummary","count","time","Header","Statistic","TodaySummary","ProfilePage","ExplainerBoundary","Content","publicUser","PublicProfilePage","ProfileLoader","userId","fallback","result","profile","setProfile","useEffect","didCancel","async","response","use","GET","encodeURIComponent","send","loadProfile","then","entries","catch","useProfileLoader","Page","Profile","PublicProfile","loaderImpl","AR","BE","CS","DE","EL","EN","ES","FA","FR","HE","HR","HU","IT","LT","NB","NL","PL","PT","RO","RU","SL","SV","TH","TR","UK","modelAssetPath","arrayBuffer","model","Uint8Array","PhoneticModelLoader","Loader","setResult","loader","useLoader"],"sourceRoot":""}