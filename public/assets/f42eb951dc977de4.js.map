{"version":3,"file":"f42eb951dc977de4.js","mappings":"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","sources":["webpack://keybr.com/./packages/page-account/lib/AccountName.tsx","webpack://keybr.com/./packages/page-account/lib/paddle/loader.ts","webpack://keybr.com/./packages/page-account/lib/AccountPricePreview.tsx","webpack://keybr.com/./packages/page-account/lib/paddle/use-paddle.ts","webpack://keybr.com/./packages/page-account/lib/AccountSection.tsx","webpack://keybr.com/./packages/page-account/lib/service.ts","webpack://keybr.com/./packages/page-account/lib/actions.ts","webpack://keybr.com/./packages/page-account/lib/checkout.ts","webpack://keybr.com/./packages/page-account/lib/EmailLoginForm.tsx","webpack://keybr.com/./packages/page-account/lib/SignInSection.tsx","webpack://keybr.com/./packages/page-account/lib/AccountPage.tsx","webpack://keybr.com/./packages/keybr-pages-browser/lib/pages/account.tsx","webpack://keybr.com/./packages/thirdparties/lib/config.ts"],"sourcesContent":["import { type UserDetails } from \"@keybr/pages-shared\";\nimport { Header } from \"@keybr/widget\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nexport function AccountName({ user }: { user: UserDetails | null }) {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Header level={1}>\n      <FormattedMessage\n        id=\"account.accountName.header\"\n        defaultMessage=\"Account | {name}\"\n        values={{\n          name:\n            user?.name ??\n            formatMessage({\n              id: \"account.anonymousUserName\",\n              defaultMessage: \"Anonymous User\",\n            }),\n        }}\n      />\n    </Header>\n  );\n}\n","import { paddleToken } from \"@keybr/thirdparties\";\nimport { getPaddleInstance, type Paddle } from \"@paddle/paddle-js\";\n\nlet promise: Promise<Paddle> | null = null;\n\nexport function loadPaddle() {\n  if (promise == null) {\n    promise = new Promise<Paddle>((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.onload = () => {\n        const paddle = getPaddleInstance(\"v1\");\n        if (paddle != null && typeof paddle === \"object\") {\n          paddle.Environment.set(\"production\");\n          paddle.Initialize({\n            token: paddleToken,\n          });\n          resolve(paddle);\n        } else {\n          reject(new Error(\"Cannot initialize Paddle\"));\n        }\n      };\n      script.onerror = () => {\n        reject(new Error(\"Cannot load Paddle\"));\n      };\n      script.src = \"https://cdn.paddle.com/paddle/v2/paddle.js\";\n      document.head.appendChild(script);\n    });\n  }\n  return promise;\n}\n","import { paddlePriceId } from \"@keybr/thirdparties\";\nimport { Para } from \"@keybr/widget\";\nimport { type PricePreviewResponse } from \"@paddle/paddle-js\";\nimport { useEffect, useState } from \"react\";\nimport { usePaddle } from \"./paddle/use-paddle.ts\";\n\nexport function AccountPricePreview() {\n  const paddle = usePaddle();\n  const [preview, setPreview] = useState<PricePreviewResponse | null>(null);\n  useEffect(() => {\n    let didCancel = false;\n    if (paddle != null) {\n      paddle\n        .PricePreview({\n          items: [\n            {\n              priceId: paddlePriceId,\n              quantity: 1,\n            },\n          ],\n        })\n        .then((preview) => {\n          if (!didCancel) {\n            setPreview(preview);\n          }\n        });\n    }\n    return () => {\n      didCancel = true;\n    };\n  }, [paddle]);\n  const [item = null] = preview?.data?.details?.lineItems ?? [];\n  return (\n    <Para>Premium account price: {item?.formattedTotals?.total ?? \"...\"}</Para>\n  );\n}\n","import { catchError } from \"@keybr/debug\";\nimport { type Paddle } from \"@paddle/paddle-js\";\nimport { useEffect, useState } from \"react\";\nimport { loadPaddle } from \"./loader.ts\";\n\nexport function usePaddle() {\n  const [paddle, setPaddle] = useState<Paddle | null>(null);\n  useEffect(() => {\n    let didCancel = false;\n    loadPaddle()\n      .then((paddle) => {\n        if (!didCancel) {\n          setPaddle(paddle);\n        }\n      })\n      .catch(catchError);\n    return () => {\n      didCancel = true;\n    };\n  }, []);\n  return paddle;\n}\n","import {\n  type AnyUser,\n  isPremiumUser,\n  type UserDetails,\n  UserName,\n} from \"@keybr/pages-shared\";\nimport { Article, Button, CheckBox, FieldSet, Icon, Para } from \"@keybr/widget\";\nimport { mdiCreditCard, mdiDeleteForever, mdiExitToApp } from \"@mdi/js\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { AccountName } from \"./AccountName.tsx\";\nimport { AccountPricePreview } from \"./AccountPricePreview.tsx\";\nimport { type AccountActions } from \"./actions.ts\";\n\nexport function AccountSection({\n  user,\n  publicUser,\n  actions,\n}: {\n  user: UserDetails;\n  publicUser: AnyUser;\n  actions: AccountActions;\n}) {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Article>\n      <AccountName user={user} />\n\n      <FormattedMessage\n        id=\"account.accountPage.description\"\n        defaultMessage=\"<p>You are using an account to store your typing data on our servers in the cloud. You will be able to access your profile from any computer or browser.</p>\"\n      />\n\n      <FieldSet\n        legend={formatMessage({\n          id: \"account.accountDetails.legend\",\n          defaultMessage: \"Account Details\",\n        })}\n      >\n        <Para>\n          <UserName user={publicUser} />\n        </Para>\n\n        <Para>\n          <FormattedMessage\n            id=\"account.avatar.description\"\n            defaultMessage=\"Your user image and name as they are visible to the public in your profile, the high scores table, and the multiplayer game.\"\n          />\n        </Para>\n\n        <Para>\n          <CheckBox\n            label={formatMessage({\n              id: \"account.widget.anonymize.label\",\n              defaultMessage: \"Anonymize Me\",\n            })}\n            checked={user.anonymized}\n            onChange={() => {\n              actions.patchAccount({ anonymized: !user.anonymized });\n            }}\n          />\n        </Para>\n\n        <Para>\n          <FormattedMessage\n            id=\"account.anonymize.description\"\n            defaultMessage=\"Anonymization replaces your real user image and name with the one that we give you. You can switch between your real and anonymous name any number of times.\"\n          />\n        </Para>\n\n        <Para>\n          <Button\n            onClick={() => {\n              actions.logout();\n            }}\n            icon={<Icon shape={mdiExitToApp} />}\n            label={formatMessage({\n              id: \"account.widget.signOut.label\",\n              defaultMessage: \"Sign Out\",\n            })}\n          />\n        </Para>\n      </FieldSet>\n\n      <FieldSet\n        legend={formatMessage({\n          id: \"account.premiumAccount.legend\",\n          defaultMessage: \"Premium Account\",\n        })}\n      >\n        {isPremiumUser(publicUser) ? (\n          <FormattedMessage\n            id=\"account.premiumAccountOverview\"\n            defaultMessage=\"<p>Thank you for purchasing a premium account! Now you can enjoy additional features and an ad-free experience.</p>\"\n          />\n        ) : (\n          <>\n            <FormattedMessage\n              id=\"account.freeAccountOverview\"\n              defaultMessage={\n                \"<p>Buy a <strong>premium account</strong> to unlock additional features and enjoy an ad-free experience. Here is the list of premium account benefits:</p>\" +\n                \"<ul>\" +\n                \"<li><strong>No ads.</strong> Ads may be distracting and impede your learning progress. This is a good way to get rid of them.</li>\" +\n                \"<li><strong>No trackers.</strong> Trackers inevitably come with ads. Remove all trackers for complete online privacy.</li>\" +\n                \"<li><strong>Ultra-fast responsiveness.</strong> Ads take quite some time to load. Getting rid of them means faster loading times for all pages.</li>\" +\n                \"</ul>\" +\n                \"<p>It is a single time payment that provides lifetime access. It is NOT a recurring subscription.</p>\"\n              }\n            />\n\n            <AccountPricePreview />\n\n            <Para>\n              <Button\n                onClick={() => {\n                  actions.checkout();\n                }}\n                icon={<Icon shape={mdiCreditCard} />}\n                label={formatMessage({\n                  id: \"account.widget.checkout.label\",\n                  defaultMessage: \"Buy a Premium Account\",\n                })}\n              />\n            </Para>\n          </>\n        )}\n      </FieldSet>\n\n      <FieldSet\n        legend={formatMessage({\n          id: \"account.deleteAccount.legend\",\n          defaultMessage: \"Delete Account\",\n        })}\n      >\n        <Para>\n          <Button\n            onClick={() => {\n              actions.deleteAccount();\n            }}\n            icon={<Icon shape={mdiDeleteForever} />}\n            label={formatMessage({\n              id: \"account.widget.deleteAccount.label\",\n              defaultMessage: \"Delete Account\",\n            })}\n          />\n        </Para>\n\n        <Para>\n          <FormattedMessage\n            id=\"account.deleteAccount.description\"\n            defaultMessage=\"This will delete all your personally identifiable information, such as your name and e-mail address from our database. This operation cannot be undone! If you only want to clear your typing statistics and start over, you can do this on the profile page.\"\n          />\n        </Para>\n      </FieldSet>\n    </Article>\n  );\n}\n","import { type AnyUser, type UserDetails } from \"@keybr/pages-shared\";\nimport { expectType, request } from \"@keybr/request\";\n\nexport type PatchAccountRequest = {\n  readonly anonymized: boolean;\n};\n\nexport type PatchAccountResponse = {\n  readonly user: UserDetails;\n  readonly publicUser: AnyUser;\n};\n\nexport namespace AccountService {\n  export async function registerEmail(email: string): Promise<unknown> {\n    const response = await request\n      .use(expectType(\"application/json\"))\n      .POST(\"/auth/login/register-email\")\n      .send({ email });\n    return await response.json();\n  }\n\n  export async function patchAccount(\n    data: PatchAccountRequest,\n  ): Promise<PatchAccountResponse> {\n    const response = await request\n      .use(expectType(\"application/json\"))\n      .PATCH(\"/_/account\")\n      .send(data);\n    return await response.json();\n  }\n\n  export async function deleteAccount(): Promise<void> {\n    const response = await request.DELETE(\"/_/account\").send();\n    await response.blob(); // Ignore.\n  }\n}\n","import { catchError } from \"@keybr/debug\";\nimport { type AnyUser, type UserDetails } from \"@keybr/pages-shared\";\nimport { useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { checkoutProduct } from \"./checkout.ts\";\nimport { AccountService, type PatchAccountRequest } from \"./service.ts\";\n\nexport type AccountActions = {\n  readonly patchAccount: (request: PatchAccountRequest) => void;\n  readonly deleteAccount: () => void;\n  readonly logout: () => void;\n  readonly checkout: () => void;\n};\n\nexport type SignInActions = {\n  readonly registerEmail: (email: string) => Promise<unknown>;\n};\n\nexport function useAccountActions(props: {\n  user: UserDetails;\n  publicUser: AnyUser;\n}) {\n  const { formatMessage } = useIntl();\n  const [{ user, publicUser }, setState] = useState(props);\n\n  const patchAccount = (request: PatchAccountRequest) => {\n    AccountService.patchAccount(request)\n      .then(({ user, publicUser }) => {\n        setState({ user, publicUser });\n      })\n      .catch(catchError);\n  };\n\n  const deleteAccount = () => {\n    const message = formatMessage({\n      id: \"account.deleteAccount.message\",\n      defaultMessage:\n        \"Are you sure you want to delete your account? \" +\n        \"This operation is permanent and cannot be undone! \" +\n        \"However, you can create a new account at any time.\",\n    });\n    if (window.confirm(message)) {\n      AccountService.deleteAccount()\n        .then(() => {\n          reload(\"/\");\n        })\n        .catch(catchError);\n    }\n  };\n\n  const logout = () => {\n    reload(\"/auth/logout\");\n  };\n\n  const checkout = () => {\n    checkoutProduct(user).catch(catchError);\n  };\n\n  return {\n    user,\n    publicUser,\n    actions: {\n      patchAccount,\n      deleteAccount,\n      logout,\n      checkout,\n    } as AccountActions,\n  };\n}\n\nexport function useSignInActions() {\n  const registerEmail = (email: string) => {\n    return AccountService.registerEmail(email);\n  };\n  return {\n    actions: {\n      registerEmail,\n    } as SignInActions,\n  };\n}\n\nfunction reload(path: string) {\n  window.location.href = path;\n}\n","import type { UserDetails } from \"@keybr/pages-shared\";\nimport { paddlePriceId } from \"@keybr/thirdparties\";\nimport { loadPaddle } from \"./paddle/loader.ts\";\n\nexport function checkoutProduct({ id, email }: UserDetails) {\n  return loadPaddle().then((paddle) => {\n    paddle.Checkout.open({\n      settings: {\n        displayMode: \"overlay\",\n        variant: \"one-page\",\n        allowLogout: false,\n      },\n      customer: {\n        email,\n      },\n      items: [\n        {\n          priceId: paddlePriceId,\n          quantity: 1,\n        },\n      ],\n      customData: {\n        id,\n      },\n    });\n  });\n}\n","import { Button, Field, FieldList, Icon, Para, TextField } from \"@keybr/widget\";\nimport { mdiRepeat, mdiSend } from \"@mdi/js\";\nimport { useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { type SignInActions } from \"./actions.ts\";\n\nexport function EmailLoginForm({ actions }: { actions: SignInActions }) {\n  const { formatMessage } = useIntl();\n  const [email, setEmail] = useState(\"\");\n  const [{ state, message }, setState] = useState<{\n    state: \"normal\" | \"sending\" | \"success\" | \"error\";\n    message: string | null;\n  }>({ state: \"normal\", message: null });\n\n  const handleChangeEmail = (value: string) => {\n    setEmail(value);\n  };\n\n  const handleClickLogin = () => {\n    if (email !== \"\") {\n      setState({ state: \"sending\", message: null });\n      actions\n        .registerEmail(email.trim())\n        .then(() => {\n          setState({ state: \"success\", message: null });\n        })\n        .catch((error) => {\n          setState({ state: \"error\", message: error.message });\n        });\n    }\n  };\n\n  const handleClickRetry = () => {\n    setState({ state: \"normal\", message: null });\n  };\n\n  switch (state) {\n    case \"sending\":\n      return (\n        <>\n          <Para>\n            <FormattedMessage\n              id=\"account.emailState.sendingText\"\n              defaultMessage=\"Sending an e-mail with the login link to <strong>{email}</strong>... Please wait a second.\"\n              values={{ email }}\n            />\n          </Para>\n        </>\n      );\n\n    case \"success\":\n      return (\n        <>\n          <Para>\n            <FormattedMessage\n              id=\"account.emailState.sentText\"\n              defaultMessage=\"We have sent an e-mail with the login link to <strong>{email}</strong>. It should arrive soon, please check your inbox in a minute or two.\"\n              values={{ email }}\n            />\n          </Para>\n\n          <Para>\n            <Button\n              size={16}\n              icon={<Icon shape={mdiRepeat} />}\n              label={formatMessage({\n                id: \"account.widget.resend.label\",\n                defaultMessage: \"Resend\",\n              })}\n              onClick={handleClickRetry}\n            />\n          </Para>\n        </>\n      );\n\n    case \"error\":\n      return (\n        <>\n          <Para>\n            <FormattedMessage\n              id=\"account.emailState.errorText\"\n              defaultMessage=\"Could not send e-mail to <strong>{email}</strong>: {message}\"\n              values={{ email, message }}\n            />\n          </Para>\n\n          <Para>\n            <Button\n              size={16}\n              icon={<Icon shape={mdiRepeat} />}\n              label={formatMessage({\n                id: \"account.widget.retrySend.label\",\n                defaultMessage: \"Retry\",\n              })}\n              onClick={handleClickRetry}\n            />\n          </Para>\n        </>\n      );\n\n    default:\n      return (\n        <>\n          <FieldList>\n            <Field>\n              <TextField\n                size={24}\n                type=\"email\"\n                placeholder={formatMessage({\n                  id: \"account.widget.email.placeholder\",\n                  defaultMessage: \"Your e-mail address...\",\n                })}\n                value={email}\n                onChange={handleChangeEmail}\n              />\n            </Field>\n            <Field>\n              <Button\n                size={16}\n                icon={<Icon shape={mdiSend} />}\n                label={formatMessage({\n                  id: \"account.widget.send.label\",\n                  defaultMessage: \"Send Sign-in Link\",\n                })}\n                onClick={handleClickLogin}\n              />\n            </Field>\n          </FieldList>\n\n          <Para>\n            <FormattedMessage\n              id=\"account.emailForm.description\"\n              defaultMessage={\n                \"Simple sign-in that does not use passwords. \" +\n                \"Just enter your e-mail address, and we will send you a login link. \" +\n                \"Go to your inbox, click the link to create a new account or to open an existing account for the e-mail address given. \" +\n                \"The link is temporary and expires in a few hours. \" +\n                \"To sign-in again later, enter the same e-mail address, and we will send a new link for the same account.\"\n              }\n            />\n          </Para>\n        </>\n      );\n  }\n}\n","import { Article, Header } from \"@keybr/widget\";\nimport { FormattedMessage } from \"react-intl\";\nimport { AccountName } from \"./AccountName.tsx\";\nimport { AccountPricePreview } from \"./AccountPricePreview.tsx\";\nimport { type SignInActions } from \"./actions.ts\";\nimport { EmailLoginForm } from \"./EmailLoginForm.tsx\";\nimport { OAuthLoginForm } from \"./OAuthLoginForm.tsx\";\n\nexport function SignInSection({ actions }: { actions: SignInActions }) {\n  return (\n    <Article>\n      <AccountName user={null} />\n\n      <FormattedMessage\n        id=\"account.signInPage.description\"\n        defaultMessage={\n          \"<p>Create an account to store your typing data on our servers in the cloud. This allows you to access your profile from any computer or browser. If you don’t have an account then your typing data is stored locally and is accessible only from your current computer.</p>\" +\n          \"<p>We don’t store any passwords. Instead we use third-party services to authenticate our users. We offer several convenient ways to create an account and sign-in.</p>\" +\n          \"<p>You can opt-out at any time. Deleting an account is as simple as creating one.</p>\"\n        }\n      />\n\n{/*       <Header level={2}>\n        <FormattedMessage\n          id=\"account.premiumAccount.header\"\n          defaultMessage=\"Premium Account\"\n        />\n      </Header>\n\n      <FormattedMessage\n        id=\"account.freeAccountOverview\"\n        defaultMessage={\n          \"<p>Buy a <strong>premium account</strong> to unlock additional features and enjoy an ad-free experience. Here is the list of premium account benefits:</p>\" +\n          \"<ul>\" +\n          \"<li><strong>No ads.</strong> Ads may be distracting and impede your learning progress. This is a good way to get rid of them.</li>\" +\n          \"<li><strong>No trackers.</strong> Trackers inevitably come with ads. Remove all trackers for complete online privacy.</li>\" +\n          \"<li><strong>Ultra-fast responsiveness.</strong> Ads take quite some time to load. Getting rid of them means faster loading times for all pages.</li>\" +\n          \"</ul>\" +\n          \"<p>It is a single time payment that provides lifetime access. It is NOT a recurring subscription.</p>\"\n        }\n      /> */}\n\n      {/* <AccountPricePreview /> */}\n\n      <Header level={2}>\n        <FormattedMessage\n          id=\"account.socialSignIn.header\"\n          defaultMessage=\"Sign-In with Social Networks\"\n        />\n      </Header>\n\n    {/*  <OAuthLoginForm /> */}\n\n      <Header level={2}>\n        <FormattedMessage\n          id=\"account.emailSignIn.header\"\n          defaultMessage=\"Sign-In with E-mail\"\n        />\n      </Header>\n\n      <EmailLoginForm actions={actions} />\n    </Article>\n  );\n}\n","import {\n  type AnyUser,\n  usePageData,\n  type UserDetails,\n} from \"@keybr/pages-shared\";\nimport { AccountSection } from \"./AccountSection.tsx\";\nimport { useAccountActions, useSignInActions } from \"./actions.ts\";\nimport { SignInSection } from \"./SignInSection.tsx\";\n\nexport function AccountPage() {\n  const { user, publicUser } = usePageData();\n  if (user != null) {\n    return <AccountSectionWithActions user={user} publicUser={publicUser} />;\n  } else {\n    return <SignInSectionWithActions />;\n  }\n}\n\nfunction AccountSectionWithActions(props: {\n  user: UserDetails;\n  publicUser: AnyUser;\n}) {\n  const { user, publicUser, actions } = useAccountActions(props);\n  return (\n    <AccountSection user={user} publicUser={publicUser} actions={actions} />\n  );\n}\n\nfunction SignInSectionWithActions() {\n  const { actions } = useSignInActions();\n  return <SignInSection actions={actions} />;\n}\n","import { AccountPage } from \"@keybr/page-account\";\n\nexport default AccountPage;\n","/*\n * The bundler fills in these constants at build time\n * with the values taken from an `env` file.\n */\n\nexport const googleTagManagerId = process.env.GOOGLE_TAG_MANAGER_ID || \"G-BJ9JKJYYRY\";\nexport const cloudflareAnalyticsId = process.env.CLOUDFLARE_ANALYTICS_ID || \"0\";\nexport const cookiebotClientId = process.env.COOKIEBOT_CLIENT_ID || \"0\";\nexport const paddleToken = process.env.PADDLE_TOKEN || \"0\";\nexport const paddlePriceId = process.env.PADDLE_PRICE_ID || \"0\";\n"],"names":["AccountName","user","formatMessage","useIntl","Header","level","values","name","promise","loadPaddle","Promise","resolve","reject","script","document","createElement","onload","paddle","Environment","set","Initialize","token","Error","onerror","src","head","appendChild","AccountPricePreview","setPaddle","useState","useEffect","didCancel","then","catch","usePaddle","preview","setPreview","PricePreview","items","priceId","quantity","item","data","details","lineItems","Para","formattedTotals","total","AccountSection","publicUser","actions","Article","legend","CheckBox","label","checked","anonymized","onChange","patchAccount","Button","onClick","logout","icon","Icon","I","shape","mdi","checkout","deleteAccount","AccountService","useAccountActions","props","setState","request","message","window","confirm","reload","id","email","Checkout","open","settings","displayMode","variant","allowLogout","customer","customData","checkoutProduct","path","location","href","registerEmail","async","response","use","POST","send","json","PATCH","DELETE","blob","EmailLoginForm","setEmail","state","handleChangeEmail","value","handleClickLogin","trim","error","handleClickRetry","size","FieldList","TextField","type","placeholder","SignInSection","AccountSectionWithActions","SignInSectionWithActions","cookiebotClientId","paddleToken","paddlePriceId"],"sourceRoot":""}