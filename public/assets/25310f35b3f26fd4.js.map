{"version":3,"file":"25310f35b3f26fd4.js","mappings":"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","sources":["webpack://keybr.com/./packages/keybr-textinput-events/lib/modifiers.ts","webpack://keybr.com/./packages/keybr-textinput-events/lib/timetotype.ts","webpack://keybr.com/./packages/keybr-textinput-events/lib/emulation.ts","webpack://keybr.com/./packages/keybr-textinput-events/lib/events.ts","webpack://keybr.com/./packages/keybr-textinput-events/lib/inputhandler.ts","webpack://keybr.com/./packages/keybr-textinput-events/lib/TextEvents.tsx","webpack://keybr.com/./packages/keybr-textinput-events/lib/use-depressed-keys.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/settings.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/internal/audiocontext.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/internal/player.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/internal/library.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/sound.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/themes/common.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/themes/default.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/themes/mechanical1.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/themes/mechanical2.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/themes/typewriter1.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/themes/typewriter2.ts","webpack://keybr.com/./packages/keybr-textinput-sounds/lib/player.ts","webpack://keybr.com/./packages/keybr-textinput-ui/lib/chars.module.less","webpack://keybr.com/./packages/keybr-textinput-ui/lib/styles.ts","webpack://keybr.com/./packages/keybr-textinput-ui/lib/chars.tsx","webpack://keybr.com/./packages/keybr-textinput-ui/lib/Cursor.tsx","webpack://keybr.com/./packages/keybr-textinput-ui/lib/TextLines.tsx","webpack://keybr.com/./packages/keybr-textinput-ui/lib/TextLines.module.less?3b55","webpack://keybr.com/./packages/keybr-textinput-ui/lib/StaticText.tsx","webpack://keybr.com/./packages/keybr-textinput-ui/lib/AnimatedText.tsx","webpack://keybr.com/./packages/keybr-textinput-ui/lib/TextArea.module.less?94a8","webpack://keybr.com/./packages/keybr-textinput-ui/lib/TextArea.tsx","webpack://keybr.com/./packages/keybr-textinput-ui/lib/TypingSettings.module.less?c2f1","webpack://keybr.com/./packages/keybr-textinput-ui/lib/TypingSettings.tsx"],"sourcesContent":["import { type ModifierId } from \"./types.ts\";\n\nconst all = [\n  \"CapsLock\",\n  \"NumLock\",\n  \"Control\",\n  \"Shift\",\n  \"Alt\",\n  \"AltGraph\",\n  \"Meta\",\n] satisfies ModifierId[];\n\nlet initialized = false;\nlet modifiers: readonly ModifierId[] = [];\n\n/**\n * A static global object which tracks the state of the modifier keys,\n * such as `CapsLock`, `NumLock`, etc.\n */\nexport class ModifierState {\n  static get modifiers(): readonly ModifierId[] {\n    return modifiers;\n  }\n\n  static get capsLock(): boolean {\n    return modifiers.includes(\"CapsLock\");\n  }\n\n  static get numLock(): boolean {\n    return modifiers.includes(\"NumLock\");\n  }\n\n  static initialize() {\n    if (!initialized) {\n      // ModifierState must receive keyboard events before any other event listener.\n      window.addEventListener(\"keydown\", (event) => {\n        modifiers = getModifiers(event);\n      });\n      window.addEventListener(\"keyup\", (event) => {\n        modifiers = getModifiers(event);\n      });\n      initialized = true;\n    }\n  }\n}\n\nexport function getModifiers(event: KeyboardEvent): ModifierId[] {\n  return all.filter((id) => event.getModifierState(id));\n}\n\nexport function isTextInput(modifiers: readonly ModifierId[]): boolean {\n  return !(\n    modifiers.includes(\"Control\") ||\n    modifiers.includes(\"Alt\") ||\n    modifiers.includes(\"Meta\")\n  );\n}\n","import { type IInputEvent, type IKeyboardEvent } from \"./types.ts\";\n\n/**\n * Measures the time taken to type a character.\n * Takes into account the number of modifier keys pressed\n * between the text input events.\n *\n * Some characters are harder to type than others because they require\n * modifier keys.\n *\n * The simplest case is when we press a character key directly.\n * The following example requires only one key press:\n *\n * ```\n *  1. keydown KeyA\n *  2. keyup   KeyA\n * ```\n *\n * A more complicated case is when press several modifier keys\n * along with a character key.\n * The following example requires three key presses:\n *\n * ```\n *  1. keydown Shift\n *  2. keydown AltGraph\n *  3. keydown KeyA\n *  4. keyup   KeyA\n *  5. keyup   Shift\n *  6. keyup   AltGraph\n * ```\n *\n * Or even mode complicated case when we press a combination of\n * modifiers with a dead key followed by modifiers with a character key:\n * Six keys must be pressed in the following example to input a character:\n *\n * ```\n *  1. keydown Shift\n *  2. keydown AltGraph\n *  3. keydown Dead\n *  4. keyup   Dead\n *  5. keyup   Shift\n *  6. keyup   AltGraph\n *  7. keydown Shift\n *  8. keydown AltGraph\n *  9. keydown KeyA\n * 10. keyup   KeyA\n * 11. keyup   Shift\n * 12. keyup   AltGraph\n * ```\n */\nexport class TimeToType {\n  #down = new Map<string, IKeyboardEvent>();\n  #timeStamp = 0;\n\n  add(event: IKeyboardEvent): void {\n    const { type, code, key } = event;\n    if (code && key) {\n      if (type === \"keydown\") {\n        if (\n          key === \"Shift\" ||\n          key === \"Alt\" ||\n          key === \"AltGraph\" ||\n          key === \"Dead\"\n        ) {\n          this.#down.set(code, event);\n        }\n      }\n      if (type === \"keyup\") {\n        const down = this.#down.get(code);\n        if (down != null && down.key === \"Dead\") {\n          this.#timeStamp = down.timeStamp;\n        }\n        this.#down.delete(code);\n      }\n    }\n  }\n\n  measure({ timeStamp }: Pick<IInputEvent, \"timeStamp\">): number {\n    const size = this.#down.size;\n    this.#down.clear();\n    const duration = timeStamp - this.#timeStamp;\n    this.#timeStamp = timeStamp;\n    return duration / (size + 1);\n  }\n}\n","import {\n  Emulation,\n  type Keyboard,\n  keyboardProps,\n  KeyModifier,\n} from \"@keybr/keyboard\";\nimport { type Settings } from \"@keybr/settings\";\nimport { type CodePoint } from \"@keybr/unicode\";\nimport { isTextInput } from \"./modifiers.ts\";\nimport { TimeToType } from \"./timetotype.ts\";\nimport {\n  type IKeyboardEvent,\n  type InputListener,\n  type ModifierId,\n} from \"./types.ts\";\n\nexport function emulateLayout(\n  settings: Settings,\n  keyboard: Keyboard,\n  target: InputListener,\n): InputListener {\n  if (keyboard.layout.emulate) {\n    switch (settings.get(keyboardProps.emulation)) {\n      case Emulation.Forward:\n        return forwardEmulation(keyboard, target);\n      case Emulation.Reverse:\n        return reverseEmulation(keyboard, target);\n    }\n  }\n  return target;\n}\n\n/**\n * Expects the `code` property to be correct, changes the `key` property.\n *\n * We ignore the character codes reported by the OS and use our own layout\n * tables to translate a physical key location to a character code.\n *\n * It is a convenience option that allows users not to care about the OS\n * settings.\n */\nfunction forwardEmulation(\n  keyboard: Keyboard,\n  target: InputListener,\n): InputListener {\n  const timeToType = new TimeToType();\n  return {\n    onKeyDown: (event) => {\n      timeToType.add(event);\n      const [mapped, codePoint] = fixKey(keyboard, event);\n      target.onKeyDown(mapped);\n      if (isTextInput(event.modifiers) && codePoint > 0x0000) {\n        target.onInput({\n          type: \"input\",\n          timeStamp: mapped.timeStamp,\n          inputType: \"appendChar\",\n          codePoint,\n          timeToType: timeToType.measure(event),\n        });\n      }\n    },\n    onKeyUp: (event) => {\n      timeToType.add(event);\n      const [mapped, codePoint] = fixKey(keyboard, event);\n      target.onKeyUp(mapped);\n    },\n    onInput: (event) => {\n      switch (event.inputType) {\n        case \"appendLineBreak\":\n        case \"clearChar\":\n        case \"clearWord\":\n          target.onInput(event);\n          break;\n      }\n    },\n  };\n}\n\n/**\n * Expects the `key` property to be correct, changes the `code` property.\n *\n * Keyboard layout switching is done in hardware. It changes physical key\n * locations to the QWERTY equivalents. So if the A key is pressed in a custom\n * keyboard layout, the hardware will send the physical key location of the A\n * letter in the QWERTY layout.\n *\n * We use a layout table and a character code as reported by the OS to fix\n * the physical key location.\n */\nfunction reverseEmulation(\n  keyboard: Keyboard,\n  target: InputListener,\n): InputListener {\n  return {\n    onKeyDown: (event) => {\n      target.onKeyDown(fixCode(keyboard, event));\n    },\n    onKeyUp: (event) => {\n      target.onKeyUp(fixCode(keyboard, event));\n    },\n    onInput: (event) => {\n      target.onInput(event);\n    },\n  };\n}\n\n/**\n * Changes the character code using a physical key location.\n */\nfunction fixKey(\n  keyboard: Keyboard,\n  { type, timeStamp, code, key, modifiers }: IKeyboardEvent,\n): [IKeyboardEvent, CodePoint] {\n  let codePoint = 0x0000;\n  const characters = keyboard.getCharacters(code);\n  if (characters != null) {\n    key = String.fromCodePoint(\n      (codePoint = characters.getCodePoint(toKeyModifier(modifiers)) ?? 0x0000),\n    );\n  }\n  return [{ type, timeStamp, code, key, modifiers }, codePoint];\n}\n\n/**\n * Changes the physical key location using a character code.\n */\nfunction fixCode(\n  keyboard: Keyboard,\n  { type, timeStamp, code, key, modifiers }: IKeyboardEvent,\n): IKeyboardEvent {\n  if (key.length === 1) {\n    const combo = keyboard.getCombo(key.codePointAt(0) ?? 0x0000);\n    if (combo != null) {\n      code = combo.id;\n    }\n  }\n  return { type, timeStamp, code, key, modifiers };\n}\n\nfunction toKeyModifier(modifiers: readonly ModifierId[]): KeyModifier {\n  return KeyModifier.from(\n    modifiers.includes(\"Shift\"),\n    modifiers.includes(\"AltGraph\"),\n  );\n}\n","import { getModifiers } from \"./modifiers.ts\";\nimport { type IKeyboardEvent } from \"./types.ts\";\n\nexport function mapEvent(event: KeyboardEvent): IKeyboardEvent {\n  if (event.type === \"keydown\" || event.type === \"keyup\") {\n    return {\n      type: event.type,\n      timeStamp: timeStampOf(event),\n      code: event.code,\n      key: event.key,\n      modifiers: getModifiers(event),\n    };\n  } else {\n    throw new TypeError();\n  }\n}\n\nexport function timeStampOf({ timeStamp }: Event): number {\n  return timeStamp || performance.now();\n}\n","import { type Focusable } from \"@keybr/widget\";\nimport { mapEvent, timeStampOf } from \"./events.ts\";\nimport { isTextInput, ModifierState } from \"./modifiers.ts\";\nimport { TimeToType } from \"./timetotype.ts\";\nimport { type InputListener } from \"./types.ts\";\n\n// https://w3c.github.io/uievents/\n// https://www.w3.org/TR/input-events-1/\n// https://www.w3.org/TR/input-events-2/\n// https://domeventviewer.com/key-event-viewer.html\n\nexport type Callbacks = {\n  readonly onFocus?: () => void;\n  readonly onBlur?: () => void;\n} & Partial<InputListener>;\n\nexport class InputHandler implements Focusable {\n  readonly #timeToType = new TimeToType();\n  #callbacks: Callbacks = {};\n  #input: HTMLTextAreaElement | null = null;\n\n  setCallbacks(callbacks: Callbacks) {\n    this.#callbacks = callbacks;\n  }\n\n  setInput(input: HTMLTextAreaElement | null) {\n    if (input != null) {\n      this.#input = input;\n      this.#attachInput();\n    } else {\n      this.#detachInput();\n      this.#input = null;\n    }\n  }\n\n  focus() {\n    this.#input?.focus();\n  }\n\n  blur() {\n    this.#input?.blur();\n  }\n\n  #attachInput() {\n    ModifierState.initialize();\n    const input = this.#input;\n    if (input != null) {\n      input.addEventListener(\"focus\", this.handleFocus);\n      input.addEventListener(\"blur\", this.handleBlur);\n      input.addEventListener(\"keydown\", this.handleKeyboard);\n      input.addEventListener(\"keyup\", this.handleKeyboard);\n      input.addEventListener(\"input\", this.handleInput as any);\n      input.addEventListener(\"compositionstart\", this.handleComposition);\n      input.addEventListener(\"compositionupdate\", this.handleComposition);\n      input.addEventListener(\"compositionend\", this.handleComposition);\n    }\n    this.focus();\n    this.#clearInput();\n  }\n\n  #detachInput() {\n    const input = this.#input;\n    if (input != null) {\n      input.removeEventListener(\"focus\", this.handleFocus);\n      input.removeEventListener(\"blur\", this.handleBlur);\n      input.removeEventListener(\"keydown\", this.handleKeyboard);\n      input.removeEventListener(\"keyup\", this.handleKeyboard);\n      input.removeEventListener(\"input\", this.handleInput as any);\n      input.removeEventListener(\"compositionstart\", this.handleComposition);\n      input.removeEventListener(\"compositionupdate\", this.handleComposition);\n      input.removeEventListener(\"compositionend\", this.handleComposition);\n    }\n  }\n\n  #clearInput() {\n    const input = this.#input;\n    if (input != null) {\n      // Keep the input value non-empty, otherwise Safari will not generate\n      // events `deleteContentBackward` and `deleteWordBackward`.\n      input.value = \"?\";\n    }\n  }\n\n  handleFocus = () => {\n    this.#callbacks.onFocus?.();\n  };\n\n  handleBlur = () => {\n    this.#callbacks.onBlur?.();\n  };\n\n  handleKeyboard = (event: KeyboardEvent) => {\n    if (process.env.NODE_ENV === \"production\") {\n      if (!(event instanceof KeyboardEvent && event.isTrusted)) {\n        return;\n      }\n    }\n    if (event.repeat) {\n      event.preventDefault();\n      return;\n    }\n    const mapped = mapEvent(event);\n    if (isTextInput(mapped.modifiers) && event.key === \"Tab\") {\n      event.preventDefault();\n    }\n    if (event.code) {\n      this.#timeToType.add(mapped);\n      switch (mapped.type) {\n        case \"keydown\":\n          this.#callbacks.onKeyDown?.(mapped);\n          break;\n        case \"keyup\":\n          this.#callbacks.onKeyUp?.(mapped);\n          break;\n      }\n    }\n  };\n\n  handleInput = (event: InputEvent) => {\n    if (process.env.NODE_ENV === \"production\") {\n      if (!(event instanceof InputEvent && event.isTrusted)) {\n        return;\n      }\n    }\n    switch (event.inputType) {\n      case \"insertText\":\n        this.#appendChar(event);\n        this.#clearInput();\n        break;\n      case \"insertLineBreak\":\n        this.#callbacks.onInput?.({\n          type: \"input\",\n          timeStamp: timeStampOf(event),\n          inputType: \"appendLineBreak\",\n          codePoint: 0x0000,\n          timeToType: this.#timeToType.measure(event),\n        });\n        this.#clearInput();\n        break;\n      case \"deleteContentBackward\":\n        this.#callbacks.onInput?.({\n          type: \"input\",\n          timeStamp: timeStampOf(event),\n          inputType: \"clearChar\",\n          codePoint: 0x0000,\n          timeToType: this.#timeToType.measure(event),\n        });\n        this.#clearInput();\n        break;\n      case \"deleteWordBackward\":\n        this.#callbacks.onInput?.({\n          type: \"input\",\n          timeStamp: timeStampOf(event),\n          inputType: \"clearWord\",\n          codePoint: 0x0000,\n          timeToType: this.#timeToType.measure(event),\n        });\n        this.#clearInput();\n        break;\n      case \"insertFromPaste\":\n        this.#clearInput();\n        break;\n    }\n  };\n\n  handleComposition = (event: CompositionEvent) => {\n    switch (event.type) {\n      case \"compositionstart\":\n      case \"compositionupdate\":\n        break;\n      case \"compositionend\":\n        this.#appendChar(event);\n        this.#clearInput();\n        break;\n    }\n  };\n\n  #appendChar(event: InputEvent | CompositionEvent) {\n    const { data } = event;\n    if (data != null && data.length > 0) {\n      const codePoint = data.codePointAt(0) ?? 0x0000;\n      if (codePoint > 0x0000) {\n        this.#callbacks.onInput?.({\n          type: \"input\",\n          timeStamp: timeStampOf(event),\n          inputType: \"appendChar\",\n          codePoint,\n          timeToType: this.#timeToType.measure(event),\n        });\n      }\n    }\n  }\n}\n","import { type Focusable } from \"@keybr/widget\";\nimport {\n  type CSSProperties,\n  memo,\n  type ReactNode,\n  type RefObject,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n} from \"react\";\nimport { type Callbacks, InputHandler } from \"./inputhandler.ts\";\n\nexport const TextEvents = memo(function TextEvents({\n  onFocus,\n  onBlur,\n  onKeyDown,\n  onKeyUp,\n  onInput,\n  focusRef,\n}: Callbacks & {\n  readonly focusRef?: RefObject<Focusable>;\n}): ReactNode {\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const handler = useInputHandler();\n  useImperativeHandle(focusRef, () => handler);\n  useEffect(() => {\n    handler.setInput(inputRef.current);\n    return () => {\n      handler.setInput(null);\n    };\n  }, [handler]);\n  handler.setCallbacks({ onFocus, onBlur, onKeyDown, onKeyUp, onInput });\n  return (\n    <div style={divStyle}>\n      <textarea\n        ref={inputRef}\n        autoCapitalize=\"off\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        style={inputStyle}\n      />\n    </div>\n  );\n});\n\nfunction useInputHandler() {\n  const handlerRef = useRef<InputHandler | null>(null);\n  let handler = handlerRef.current;\n  if (handler == null) {\n    handlerRef.current = handler = new InputHandler();\n  }\n  return handler;\n}\n\nconst divStyle = {\n  position: \"absolute\",\n  insetInlineStart: \"0px\",\n  insetBlockStart: \"0px\",\n  inlineSize: \"0px\",\n  blockSize: \"0px\",\n  overflow: \"hidden\",\n} satisfies CSSProperties;\n\nconst inputStyle = {\n  display: \"block\",\n  margin: \"0px\",\n  padding: \"0px\",\n  inlineSize: \"1em\",\n  blockSize: \"1em\",\n  border: \"none\",\n  outline: \"none\",\n} satisfies CSSProperties;\n","import { type Keyboard, type KeyId } from \"@keybr/keyboard\";\nimport { type Settings } from \"@keybr/settings\";\nimport { useWindowEvent } from \"@keybr/widget\";\nimport { useState } from \"react\";\nimport { emulateLayout } from \"./emulation.ts\";\nimport { mapEvent } from \"./events.ts\";\n\nexport function addKey(keys: readonly KeyId[], key: KeyId): KeyId[] {\n  const set = new Set(keys);\n  set.add(key);\n  return [...set];\n}\n\nexport function deleteKey(keys: readonly KeyId[], key: KeyId): KeyId[] {\n  const set = new Set(keys);\n  set.delete(key);\n  return [...set];\n}\n\nexport function useDepressedKeys(\n  settings: Settings,\n  keyboard: Keyboard,\n): readonly KeyId[] {\n  const [depressedKeys, setDepressedKeys] = useState<KeyId[]>([]);\n  const listener = emulateLayout(settings, keyboard, {\n    onKeyDown: ({ code }) => setDepressedKeys(addKey(depressedKeys, code)),\n    onKeyUp: ({ code }) => setDepressedKeys(deleteKey(depressedKeys, code)),\n    onInput: () => {},\n  });\n  useWindowEvent(\"keydown\", (event) => {\n    listener.onKeyDown(mapEvent(event));\n  });\n  useWindowEvent(\"keyup\", (event) => {\n    listener.onKeyUp(mapEvent(event));\n  });\n  return depressedKeys;\n}\n","import { Enum, type EnumItem } from \"@keybr/lang\";\nimport { enumProp, itemProp, numberProp } from \"@keybr/settings\";\n\nexport enum PlaySounds {\n  None = 1,\n  ErrorsOnly = 2,\n  All = 3,\n}\n\nexport class SoundTheme implements EnumItem {\n  static readonly DEFAULT = new SoundTheme(\"default\", \"Default\");\n  static readonly MECHANICAL1 = new SoundTheme(\"mechanical1\", \"Mechanical 1\");\n  static readonly MECHANICAL2 = new SoundTheme(\"mechanical2\", \"Mechanical 2\");\n  static readonly TYPEWRITER1 = new SoundTheme(\"typewriter1\", \"Typewriter 1\");\n  static readonly TYPEWRITER2 = new SoundTheme(\"typewriter2\", \"Typewriter 2\");\n\n  static readonly ALL = new Enum<SoundTheme>(\n    SoundTheme.DEFAULT,\n    SoundTheme.MECHANICAL1,\n    SoundTheme.MECHANICAL2,\n    SoundTheme.TYPEWRITER1,\n    SoundTheme.TYPEWRITER2,\n  );\n\n  private constructor(\n    readonly id: string,\n    readonly name: string,\n  ) {}\n\n  toString() {\n    return this.id;\n  }\n\n  toJSON() {\n    return this.id;\n  }\n}\n\nexport const soundProps = {\n  playSounds: enumProp(\"textInput.playSounds\", PlaySounds, PlaySounds.None),\n  soundVolume: numberProp(\"textInput.soundVolume\", 0.5, { min: 0, max: 1 }),\n  soundTheme: itemProp(\n    \"textInput.soundTheme\",\n    SoundTheme.ALL,\n    SoundTheme.DEFAULT,\n  ),\n} as const;\n","let context: null | AudioContext = null;\n\nexport function getAudioContext(): AudioContext | null {\n  if (context == null) {\n    try {\n      context = new AudioContext();\n    } catch {\n      context = null;\n    }\n  }\n  return context;\n}\n","import { type Player } from \"./types.ts\";\n\nexport const nullPlayer = new (class NullPlayer implements Player {\n  play(offset?: number, duration?: number) {}\n  stop() {}\n  volume(volume: number) {}\n})();\n\nexport class WebAudioPlayer implements Player {\n  readonly #context: AudioContext;\n  readonly #buffer: AudioBuffer;\n  readonly #gain: GainNode;\n  #source: AudioBufferSourceNode | null;\n\n  constructor(context: AudioContext, buffer: AudioBuffer) {\n    this.#context = context;\n    this.#buffer = buffer;\n    this.#gain = this.#context.createGain();\n    this.#gain.connect(this.#context.destination);\n    this.#source = null;\n  }\n\n  play(offset?: number, duration?: number) {\n    this.stop();\n    const source = this.#context.createBufferSource();\n    this.#source = source;\n    source.onended = () => {\n      this.#source = null;\n    };\n    source.buffer = this.#buffer;\n    source.connect(this.#gain);\n    source.start(0, offset, duration);\n  }\n\n  stop() {\n    if (this.#source != null) {\n      this.#source.stop();\n      this.#source = null;\n    }\n  }\n\n  volume(volume: number) {\n    this.#gain.gain.value = volume;\n  }\n}\n","import { expectType, request } from \"@keybr/request\";\nimport { getAudioContext } from \"./audiocontext.ts\";\nimport { nullPlayer, WebAudioPlayer } from \"./player.ts\";\nimport { type Player, type PlayerId, type SoundAssets } from \"./types.ts\";\n\nexport class PlayerLibrary {\n  readonly #loaders = new Map<PlayerId, PlayerLoader>();\n\n  constructor(assets: SoundAssets) {\n    for (const [id, url] of Object.entries(assets)) {\n      this.#loaders.set(id, new PlayerLoader(url));\n    }\n  }\n\n  play(id: PlayerId, volume: number = 1) {\n    const loader = this.#loaders.get(id);\n    if (loader == null) {\n      throw new Error(String(id));\n    }\n    loader\n      .init()\n      .then((player) => {\n        player.volume(volume);\n        player.play();\n      })\n      .catch(catchError);\n  }\n}\n\nclass PlayerLoader {\n  readonly #url: string;\n  #buffer: ArrayBuffer | null = null;\n  #player: Player | null = null;\n\n  constructor(url: string) {\n    this.#url = url;\n    this.#load().catch(catchError);\n  }\n\n  get url() {\n    return this.#url;\n  }\n\n  /**\n   * Stage one: we load sound data, but we don't create players yet\n   * because there was no user gesture and AudioContext is not available.\n   */\n  async #load() {\n    try {\n      const response = await request\n        .use(expectType(\"audio/*\"))\n        .GET(this.#url)\n        .send();\n      this.#buffer = await response.arrayBuffer();\n    } catch (err) {\n      this.#player = nullPlayer;\n      throw err;\n    }\n  }\n\n  /**\n   * Stage two: we convert the loaded sound data into players.\n   * We assume that at this point there was a user gesture\n   * and AudioContext is already available.\n   */\n  async init() {\n    if (this.#buffer != null && this.#player == null) {\n      try {\n        const context = getAudioContext();\n        if (context != null) {\n          const buffer = await context.decodeAudioData(this.#buffer);\n          const player = new WebAudioPlayer(context, buffer);\n          this.#buffer = null;\n          this.#player = player;\n        } else {\n          this.#buffer = null;\n          this.#player = nullPlayer;\n        }\n      } catch (err) {\n        this.#buffer = null;\n        this.#player = nullPlayer;\n        throw err;\n      }\n    }\n    return this.#player ?? nullPlayer;\n  }\n}\n\nfunction catchError(err: any) {\n  console.error(err);\n}\n","import { randomSample } from \"@keybr/rand\";\nimport {\n  type PlayerId,\n  PlayerLibrary,\n  type SoundAssets,\n} from \"./internal/index.ts\";\n\nexport type SoundId = \"click\" | \"blip\";\n\nexport type ThemeConfig = Record<SoundId, readonly string[]>;\n\nexport class Theme {\n  readonly #library: PlayerLibrary;\n  readonly #ids: Record<SoundId, readonly PlayerId[]>;\n\n  constructor(theme: ThemeConfig) {\n    const click = collect(\"click\", theme.click);\n    const blip = collect(\"blip\", theme.blip);\n    this.#library = new PlayerLibrary({ ...click, ...blip });\n    this.#ids = { click: Object.keys(click), blip: Object.keys(blip) };\n  }\n\n  play(id: SoundId, volume: number) {\n    this.#library.play(randomSample(this.#ids[id]), volume);\n  }\n}\n\nfunction collect(id: string, urls: readonly string[]): SoundAssets {\n  const sounds = {} as Record<PlayerId, string>;\n  for (let i = 0; i < urls.length; i++) {\n    sounds[`${id}-${i}`] = urls[i];\n  }\n  return sounds;\n}\n","import blip from \"../../assets/blip.mp3\";\nimport { type ThemeConfig } from \"../sound.ts\";\n\nexport const common = {\n  blip: [blip],\n} as const satisfies Partial<ThemeConfig>;\n","import click from \"../../assets/default-click.mp3\";\nimport { type ThemeConfig } from \"../sound.ts\";\nimport { common } from \"./common.ts\";\n\nexport const defaultTheme = {\n  ...common,\n  click: [click],\n} as const satisfies ThemeConfig;\n","import click1 from \"../../assets/mechanical1-click1.mp3\";\nimport click2 from \"../../assets/mechanical1-click2.mp3\";\nimport click3 from \"../../assets/mechanical1-click3.mp3\";\nimport click4 from \"../../assets/mechanical1-click4.mp3\";\nimport click5 from \"../../assets/mechanical1-click5.mp3\";\nimport click6 from \"../../assets/mechanical1-click6.mp3\";\nimport click7 from \"../../assets/mechanical1-click7.mp3\";\nimport click8 from \"../../assets/mechanical1-click8.mp3\";\nimport click9 from \"../../assets/mechanical1-click9.mp3\";\nimport { type ThemeConfig } from \"../sound.ts\";\nimport { common } from \"./common.ts\";\n\nexport const mechanical1 = {\n  ...common,\n  click: [\n    click1,\n    click2,\n    click3,\n    click4,\n    click5,\n    click6,\n    click7,\n    click8,\n    click9,\n  ],\n} as const satisfies ThemeConfig;\n","import click1 from \"../../assets/mechanical2-click1.mp3\";\nimport click2 from \"../../assets/mechanical2-click2.mp3\";\nimport click3 from \"../../assets/mechanical2-click3.mp3\";\nimport click4 from \"../../assets/mechanical2-click4.mp3\";\nimport click5 from \"../../assets/mechanical2-click5.mp3\";\nimport { type ThemeConfig } from \"../sound.ts\";\nimport { common } from \"./common.ts\";\n\nexport const mechanical2 = {\n  ...common,\n  click: [click1, click2, click3, click4, click5],\n} as const satisfies ThemeConfig;\n","import click1 from \"../../assets/typewriter1-click1.mp3\";\nimport click2 from \"../../assets/typewriter1-click2.mp3\";\nimport click3 from \"../../assets/typewriter1-click3.mp3\";\nimport click4 from \"../../assets/typewriter1-click4.mp3\";\nimport click5 from \"../../assets/typewriter1-click5.mp3\";\nimport click6 from \"../../assets/typewriter1-click6.mp3\";\nimport click7 from \"../../assets/typewriter1-click7.mp3\";\nimport click8 from \"../../assets/typewriter1-click8.mp3\";\nimport click9 from \"../../assets/typewriter1-click9.mp3\";\nimport { type ThemeConfig } from \"../sound.ts\";\nimport { common } from \"./common.ts\";\n\nexport const typewriter1 = {\n  ...common,\n  click: [\n    click1,\n    click2,\n    click3,\n    click4,\n    click5,\n    click6,\n    click7,\n    click8,\n    click9,\n  ],\n} as const satisfies ThemeConfig;\n","import click1 from \"../../assets/typewriter2-click1.mp3\";\nimport click2 from \"../../assets/typewriter2-click2.mp3\";\nimport click3 from \"../../assets/typewriter2-click3.mp3\";\nimport click4 from \"../../assets/typewriter2-click4.mp3\";\nimport click5 from \"../../assets/typewriter2-click5.mp3\";\nimport click6 from \"../../assets/typewriter2-click6.mp3\";\nimport click7 from \"../../assets/typewriter2-click7.mp3\";\nimport click8 from \"../../assets/typewriter2-click8.mp3\";\nimport click9 from \"../../assets/typewriter2-click9.mp3\";\nimport { type ThemeConfig } from \"../sound.ts\";\nimport { common } from \"./common.ts\";\n\nexport const typewriter2 = {\n  ...common,\n  click: [\n    click1,\n    click2,\n    click3,\n    click4,\n    click5,\n    click6,\n    click7,\n    click8,\n    click9,\n  ],\n} as const satisfies ThemeConfig;\n","import { type Settings, useSettings } from \"@keybr/settings\";\nimport { Feedback } from \"@keybr/textinput\";\nimport { useMemo } from \"react\";\nimport { PlaySounds, soundProps, SoundTheme } from \"./settings.ts\";\nimport { Theme } from \"./sound.ts\";\nimport { defaultTheme } from \"./themes/default.ts\";\nimport { mechanical1 } from \"./themes/mechanical1.ts\";\nimport { mechanical2 } from \"./themes/mechanical2.ts\";\nimport { typewriter1 } from \"./themes/typewriter1.ts\";\nimport { typewriter2 } from \"./themes/typewriter2.ts\";\n\nexport function useSoundPlayer() {\n  const { settings } = useSettings();\n  return useMemo(() => makeSoundPlayer(settings), [settings]);\n}\n\nexport function makeSoundPlayer(settings: Settings) {\n  const playSounds = settings.get(soundProps.playSounds);\n  const soundVolume = settings.get(soundProps.soundVolume);\n  const soundTheme = settings.get(soundProps.soundTheme);\n  if (playSounds === PlaySounds.None) {\n    return () => {};\n  }\n  const theme = loadTheme(soundTheme);\n  return (feedback: Feedback) => {\n    if (playSounds === PlaySounds.All) {\n      switch (feedback) {\n        case Feedback.Succeeded:\n        case Feedback.Recovered:\n          theme.play(\"click\", soundVolume);\n          break;\n        case Feedback.Failed:\n          theme.play(\"blip\", soundVolume);\n          break;\n      }\n    }\n    if (playSounds === PlaySounds.ErrorsOnly) {\n      switch (feedback) {\n        case Feedback.Failed:\n          theme.play(\"blip\", soundVolume);\n          break;\n      }\n    }\n  };\n}\n\nconst cache = new Map();\n\nfunction loadTheme(id: SoundTheme) {\n  let theme = cache.get(id);\n  if (theme == null) {\n    cache.set(id, (theme = loadTheme0(id)));\n  }\n  return theme;\n}\n\nfunction loadTheme0(id: SoundTheme) {\n  switch (id) {\n    case SoundTheme.MECHANICAL1:\n      return new Theme(mechanical1);\n    case SoundTheme.MECHANICAL2:\n      return new Theme(mechanical2);\n    case SoundTheme.TYPEWRITER1:\n      return new Theme(typewriter1);\n    case SoundTheme.TYPEWRITER2:\n      return new Theme(typewriter2);\n    default:\n      return new Theme(defaultTheme);\n  }\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"nc1oZcWRbC\";\nexport { _1 as \"cursor\" }\n","import { Attr, CaretShapeStyle } from \"@keybr/textinput\";\nimport { type CSSProperties } from \"react\";\n\nconst cursorStyles = {\n  block: {\n    color: \"var(--textinput-cursor__color)\",\n    backgroundColor: \"var(--textinput-cursor__background-color)\",\n  } satisfies CSSProperties,\n  box: {\n    borderStyle: \"solid\",\n    borderColor: \"var(--textinput-cursor__background-color)\",\n  } satisfies CSSProperties,\n  line: {\n    backgroundColor: \"var(--textinput-cursor__background-color)\",\n  } satisfies CSSProperties,\n  underline: {\n    backgroundColor: \"var(--textinput-cursor__background-color)\",\n  } satisfies CSSProperties,\n} as const;\n\nexport const textItemStyle = {\n  display: \"inline-block\",\n  whiteSpace: \"nowrap\",\n} satisfies CSSProperties;\n\nconst textStyles = {\n  normal: {\n    color: \"var(--textinput__color)\",\n  } satisfies CSSProperties,\n  special: {\n    color: \"var(--textinput--special__color)\",\n  } satisfies CSSProperties,\n  hit: {\n    color: \"var(--textinput--hit__color)\",\n  } satisfies CSSProperties,\n  miss: {\n    color: \"var(--textinput--miss__color)\",\n  } satisfies CSSProperties,\n  garbage: {\n    color: \"var(--textinput__color)\",\n    backgroundColor: \"var(--textinput--miss__color)\",\n  } satisfies CSSProperties,\n} as const;\n\nconst syntaxStyles = {\n  keyword: { color: \"var(--syntax-keyword)\" },\n  string: { color: \"var(--syntax-string)\" },\n  number: { color: \"var(--syntax-number)\" },\n  comment: { color: \"var(--syntax-comment)\" },\n} as Record<string, CSSProperties>;\n\nexport function getCursorStyle(\n  caretShapeStyle: CaretShapeStyle,\n): CSSProperties {\n  switch (caretShapeStyle) {\n    case CaretShapeStyle.Block:\n      return cursorStyles.block;\n    case CaretShapeStyle.Box:\n      return cursorStyles.box;\n    case CaretShapeStyle.Line:\n      return cursorStyles.line;\n    case CaretShapeStyle.Underline:\n      return cursorStyles.underline;\n  }\n}\n\nexport function getTextStyle(\n  {\n    attrs,\n    cls,\n  }: {\n    readonly attrs: number;\n    readonly cls: string | null;\n  },\n  special: boolean,\n): CSSProperties | undefined {\n  switch (attrs) {\n    case Attr.Normal:\n    case Attr.Cursor: {\n      return (\n        syntaxStyles[cls ?? \"\"] ??\n        (special ? textStyles.special : textStyles.normal)\n      );\n    }\n    case Attr.Hit:\n      return textStyles.hit;\n    case Attr.Miss:\n      return textStyles.miss;\n    case Attr.Garbage:\n      return textStyles.garbage;\n  }\n  return undefined;\n}\n","import {\n  Attr,\n  type Char,\n  type TextDisplaySettings,\n  WhitespaceStyle,\n} from \"@keybr/textinput\";\nimport { type CodePoint } from \"@keybr/unicode\";\nimport { type ReactNode } from \"react\";\nimport * as styles from \"./chars.module.less\";\nimport { getTextStyle } from \"./styles.ts\";\n\nexport function renderChars(\n  settings: TextDisplaySettings,\n  chars: readonly Char[],\n): ReactNode[] {\n  const nodes: ReactNode[] = [];\n  type Span = { chars: CodePoint[]; attrs: number; cls: string | null };\n  let span: Span = { chars: [], attrs: 0, cls: null };\n  const pushSpan = (nextSpan: Span) => {\n    if (span.chars.length > 0) {\n      nodes.push(\n        <span\n          key={nodes.length}\n          className={getClassName(span)}\n          style={getTextStyle(span, /* special= */ false)}\n        >\n          {String.fromCodePoint(...span.chars)}\n        </span>,\n      );\n    }\n    span = nextSpan;\n  };\n  for (let i = 0; i < chars.length; i++) {\n    const { codePoint, attrs, cls = null } = chars[i];\n    if (codePoint > 0x0020) {\n      if (span.attrs !== attrs || span.cls !== cls) {\n        pushSpan({ chars: [], attrs, cls });\n      }\n      span.chars.push(codePoint);\n    } else {\n      pushSpan({ chars: [], attrs, cls });\n      nodes.push(\n        <span\n          key={nodes.length}\n          className={getClassName(span)}\n          style={getTextStyle(span, /* special= */ true)}\n        >\n          {specialChar(settings.whitespaceStyle, codePoint)}\n        </span>,\n      );\n    }\n  }\n  pushSpan({ chars: [], attrs: 0, cls: null });\n  return nodes;\n}\n\nfunction specialChar(whitespaceStyle: WhitespaceStyle, codePoint: CodePoint) {\n  switch (codePoint) {\n    case 0x0009:\n      return \"\\uE002\";\n    case 0x000a:\n      return \"\\uE003\";\n    case 0x0020:\n      switch (whitespaceStyle) {\n        case WhitespaceStyle.Bar:\n          return \"\\uE001\";\n        case WhitespaceStyle.Bullet:\n          return \"\\uE000\";\n        default:\n          return \"\\u00A0\";\n      }\n    default:\n      return `U+${codePoint.toString(16).padStart(4, \"0\")}`;\n  }\n}\n\nfunction getClassName({ attrs }: { readonly attrs: Attr }) {\n  return attrs === Attr.Cursor ? styles.cursor : undefined;\n}\n\nconst cursorSelector = `.${styles.cursor}`;\n\nexport function findCursor(container: HTMLElement): HTMLElement | null {\n  return container.querySelector<HTMLElement>(cursorSelector) ?? null;\n}\n","import {\n  CaretMovementStyle,\n  CaretShapeStyle,\n  type TextDisplaySettings,\n} from \"@keybr/textinput\";\nimport {\n  Component,\n  createRef,\n  type CSSProperties,\n  type ReactNode,\n} from \"react\";\nimport { findCursor } from \"./chars.tsx\";\nimport { getCursorStyle } from \"./styles.ts\";\n\nexport class Cursor extends Component<{\n  readonly settings: TextDisplaySettings;\n  readonly children: ReactNode;\n}> {\n  readonly #containerRef = createRef<HTMLDivElement>();\n  readonly #cursorRef = createRef<HTMLSpanElement>();\n  #initial = true;\n  #animation: Animation | null = null;\n\n  override componentDidMount() {\n    this.#position();\n  }\n\n  override componentDidUpdate() {\n    this.#position();\n  }\n\n  override componentWillUnmount() {\n    if (this.#animation != null) {\n      this.#animation.cancel();\n    }\n  }\n\n  #position() {\n    const container = this.#containerRef.current;\n    const cursor = this.#cursorRef.current;\n    if (container != null && cursor != null) {\n      const char = findCursor(container);\n      if (char != null) {\n        this.#move(cursor, char);\n      } else {\n        this.#hide(cursor);\n      }\n    }\n  }\n\n  #move(cursor: HTMLElement, char: HTMLElement) {\n    const {\n      caretShapeStyle,\n      caretMovementStyle,\n      language: { direction },\n    } = this.props.settings;\n\n    const { style } = cursor;\n\n    const from = window.getComputedStyle(char);\n    style.fontFamily = from.fontFamily;\n    style.fontSize = from.fontSize;\n    style.fontStyle = from.fontStyle;\n    style.fontWeight = from.fontWeight;\n    style.fontVariant = from.fontVariant;\n    style.fontKerning = from.fontKerning;\n    style.lineHeight = from.lineHeight;\n\n    const x = char.offsetLeft;\n    const y = char.parentElement!.offsetTop;\n    const w = char.offsetWidth;\n    const h = char.parentElement!.offsetHeight;\n\n    let left: number;\n    let top: number;\n\n    switch (caretShapeStyle) {\n      case CaretShapeStyle.Block:\n        cursor.textContent = char.textContent;\n        style.display = \"block\";\n        style.borderWidth = \"\";\n        style.width = \"\";\n        style.height = \"\";\n        left = x;\n        top = y;\n        break;\n\n      case CaretShapeStyle.Box:\n        cursor.textContent = \"\";\n        style.display = \"block\";\n        style.borderWidth = \"1px\";\n        style.width = `${w + 4}px`;\n        style.height = `${h + 4}px`;\n        left = x - 2;\n        top = y - 2;\n        break;\n\n      case CaretShapeStyle.Line:\n        cursor.textContent = \"\";\n        style.display = \"block\";\n        style.borderWidth = \"\";\n        style.width = \"2px\";\n        style.height = `${h}px`;\n        switch (direction) {\n          case \"ltr\":\n            left = x - 2;\n            break;\n          case \"rtl\":\n            left = x + w;\n            break;\n        }\n        top = y;\n        break;\n\n      case CaretShapeStyle.Underline:\n        cursor.textContent = \"\";\n        style.display = \"block\";\n        style.borderWidth = \"\";\n        style.width = `${w}px`;\n        style.height = \"2px\";\n        left = x;\n        top = y + h - 2;\n        break;\n    }\n\n    const fromLeft = cursor.offsetLeft;\n    const fromTop = cursor.offsetTop;\n\n    style.left = `${left}px`;\n    style.top = `${top}px`;\n\n    if (this.#initial || caretMovementStyle !== CaretMovementStyle.Smooth) {\n      if (this.#animation != null) {\n        this.#animation.cancel();\n        this.#animation = null;\n      }\n    } else {\n      if (this.#animation != null) {\n        this.#animation.cancel();\n        this.#animation = null;\n      } else {\n        this.#animation = cursor.animate(\n          [\n            {\n              left: `${fromLeft}px`,\n              top: `${fromTop}px`,\n            },\n            {\n              left: `${left}px`,\n              top: `${top}px`,\n            },\n          ],\n          {\n            duration: wpmToDuration(120),\n            iterations: 1,\n            easing: \"linear\",\n          },\n        );\n        const clear = () => {\n          this.#animation = null;\n        };\n        this.#animation.onfinish = clear;\n        this.#animation.oncancel = clear;\n        this.#animation.onremove = clear;\n      }\n    }\n\n    this.#initial = false;\n  }\n\n  #hide(cursor: HTMLElement) {\n    const { style } = cursor;\n\n    cursor.textContent = \"\";\n\n    style.display = \"none\";\n    style.left = \"\";\n    style.top = \"\";\n    style.width = \"\";\n    style.height = \"\";\n\n    this.#initial = true;\n  }\n\n  override render(): ReactNode {\n    return (\n      <div ref={this.#containerRef} style={containerStyle}>\n        <span\n          ref={this.#cursorRef}\n          style={{\n            ...cursorStyle,\n            ...getCursorStyle(this.props.settings.caretShapeStyle),\n          }}\n        />\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nconst containerStyle = {\n  display: \"block\",\n  position: \"relative\",\n} satisfies CSSProperties;\n\nconst cursorStyle = {\n  display: \"block\",\n  position: \"absolute\",\n  left: 0,\n  top: 0,\n  width: 0,\n  height: 0,\n} satisfies CSSProperties;\n\nfunction wpmToDuration(wpm: number): number {\n  return Math.round(1000 / ((wpm * 5) / 60));\n}\n","import {\n  type Char,\n  charArraysAreEqual,\n  type Line,\n  type LineList,\n  type TextDisplaySettings,\n  textDisplaySettings,\n} from \"@keybr/textinput\";\nimport { clsx } from \"clsx\";\nimport {\n  type ComponentType,\n  type CSSProperties,\n  memo,\n  type ReactNode,\n} from \"react\";\nimport { renderChars } from \"./chars.tsx\";\nimport { Cursor } from \"./Cursor.tsx\";\nimport { textItemStyle } from \"./styles.ts\";\nimport * as styles from \"./TextLines.module.less\";\n\nexport type TextLineSize = \"X0\" | \"X1\" | \"X2\" | \"X3\";\n\nexport const TextLines = memo(function TextLines({\n  settings = textDisplaySettings,\n  lines,\n  wrap = true,\n  size = \"X0\",\n  lineTemplate: LineTemplate,\n  cursor,\n  focus,\n}: {\n  readonly lines: LineList;\n  readonly settings?: TextDisplaySettings;\n  readonly wrap?: boolean;\n  readonly size?: TextLineSize;\n  readonly lineTemplate?: ComponentType<any>;\n  readonly cursor: boolean;\n  readonly focus: boolean;\n}): ReactNode {\n  const className = clsx(\n    styles.line,\n    wrap ? styles.line_wrap : styles.line_nowrap,\n    focus ? styles.text_focus : styles.text_blur,\n    size === \"X0\" && styles.size_X0,\n    size === \"X1\" && styles.size_X1,\n    size === \"X2\" && styles.size_X2,\n    size === \"X3\" && styles.size_X3,\n  );\n  const children = lines.lines.map(({ text, chars, ...props }: Line) =>\n    LineTemplate != null ? (\n      <LineTemplate key={text} {...props}>\n        <TextLine\n          key={text}\n          settings={settings}\n          chars={chars}\n          className={className}\n          style={settings.font.cssProperties}\n        />\n      </LineTemplate>\n    ) : (\n      <TextLine\n        key={text}\n        settings={settings}\n        chars={chars}\n        className={className}\n        style={settings.font.cssProperties}\n      />\n    ),\n  );\n  return cursor ? <Cursor settings={settings}>{children}</Cursor> : children;\n});\n\nconst TextLine = memo(\n  function TextLine({\n    settings,\n    chars,\n    className,\n    style,\n  }: {\n    readonly settings: TextDisplaySettings;\n    readonly chars: readonly Char[];\n    readonly className: string;\n    readonly style: CSSProperties;\n  }): ReactNode {\n    const items: Char[][] = [];\n    let itemChars: Char[] = [];\n    let ws = false;\n    for (let i = 0; i < chars.length; i++) {\n      const char = chars[i];\n      switch (char.codePoint) {\n        case 0x0009:\n        case 0x000a:\n        case 0x0020:\n          ws = true;\n          break;\n        default:\n          if (ws) {\n            if (itemChars.length > 0) {\n              items.push(itemChars);\n              itemChars = [];\n            }\n            ws = false;\n          }\n          break;\n      }\n      itemChars.push(char);\n    }\n    if (itemChars.length > 0) {\n      items.push(itemChars);\n      itemChars = [];\n    }\n    return (\n      <div\n        className={className}\n        style={style}\n        dir={settings.language.direction}\n      >\n        {items.map((chars, index) => (\n          <TextItem key={index} settings={settings} chars={chars} />\n        ))}\n      </div>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.settings === nextProps.settings &&\n    charArraysAreEqual(prevProps.chars, nextProps.chars) && // deep equality\n    prevProps.className === nextProps.className,\n);\n\nconst TextItem = memo(\n  function TextItem({\n    settings,\n    chars,\n  }: {\n    readonly settings: TextDisplaySettings;\n    readonly chars: readonly Char[];\n  }): ReactNode {\n    return <span style={textItemStyle}>{renderChars(settings, chars)}</span>;\n  },\n  (prevProps, nextProps) =>\n    prevProps.settings === nextProps.settings &&\n    charArraysAreEqual(prevProps.chars, nextProps.chars), // deep equality\n);\n","// extracted by mini-css-extract-plugin\nvar _1 = \"BXHaqdRzA4\";\nvar _2 = \"jwzmAi3cFu\";\nvar _3 = \"QFnXOg3I3h\";\nvar _4 = \"kYHw0ywlCg\";\nvar _5 = \"e8_uyABSpM\";\nvar _6 = \"aKT65EnEgy\";\nvar _7 = \"djmqCGmGcl\";\nvar _8 = \"XGCWiqpkYl\";\nvar _9 = \"SMkTYldyzD\";\nexport { _1 as \"line\", _2 as \"line_nowrap\", _3 as \"line_wrap\", _4 as \"size_X0\", _5 as \"size_X1\", _6 as \"size_X2\", _7 as \"size_X3\", _8 as \"text_blur\", _9 as \"text_focus\" }\n","import { type LineList, type TextDisplaySettings } from \"@keybr/textinput\";\nimport { type ReactNode } from \"react\";\nimport { TextLines, type TextLineSize } from \"./TextLines.tsx\";\n\nexport function StaticText({\n  settings,\n  lines,\n  wrap,\n  size,\n  cursor = false,\n  focus = true,\n}: {\n  readonly settings?: TextDisplaySettings;\n  readonly lines: LineList;\n  readonly wrap?: boolean;\n  readonly size?: TextLineSize;\n  readonly cursor?: boolean;\n  readonly focus?: boolean;\n}): ReactNode {\n  return (\n    <TextLines\n      settings={settings}\n      lines={lines}\n      wrap={wrap}\n      size={size}\n      cursor={cursor}\n      focus={focus}\n    />\n  );\n}\n","import { Tasks } from \"@keybr/lang\";\nimport {\n  type Char,\n  type TextDisplaySettings,\n  TextInput,\n} from \"@keybr/textinput\";\nimport { type ReactNode, useEffect, useMemo, useState } from \"react\";\nimport { StaticText } from \"./StaticText.tsx\";\nimport { type TextLineSize } from \"./TextLines.tsx\";\n\nexport function AnimatedText({\n  settings,\n  text,\n  wrap,\n  size,\n}: {\n  readonly settings: TextDisplaySettings;\n  readonly text: string;\n  readonly wrap?: boolean;\n  readonly size?: TextLineSize;\n}): ReactNode {\n  const chars = useAnimatedTextState(text);\n  return (\n    <StaticText\n      settings={settings}\n      lines={{ text, lines: [{ text, chars }] }}\n      cursor={true}\n      wrap={wrap}\n      size={size}\n    />\n  );\n}\n\nfunction useAnimatedTextState(text: string): readonly Char[] {\n  const textInput = useMemo(\n    () =>\n      new TextInput(text, {\n        stopOnError: false,\n        forgiveErrors: false,\n        spaceSkipsWords: false,\n      }),\n    [text],\n  );\n  const [chars, setChars] = useState<readonly Char[]>([]);\n  useEffect(() => {\n    setChars(textInput.chars);\n    const tasks = new Tasks();\n    tasks.repeated(500, () => {\n      if (textInput.completed) {\n        textInput.reset();\n      } else {\n        textInput.appendChar(0, textInput.at(textInput.pos).codePoint, 0);\n      }\n      setChars(textInput.chars);\n    });\n    return () => {\n      tasks.cancelAll();\n    };\n  }, [textInput]);\n  return chars;\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"JW91bysY2P\";\nvar _2 = \"pWvJjM4Zn9\";\nvar _3 = \"uKFykFQdcQ\";\nexport { _1 as \"messageArea\", _2 as \"messageText\", _3 as \"root\" }\n","import { type LineList, type TextDisplaySettings } from \"@keybr/textinput\";\nimport {\n  type IInputEvent,\n  type IKeyboardEvent,\n  ModifierState,\n  TextEvents,\n} from \"@keybr/textinput-events\";\nimport {\n  type Focusable,\n  useHotkeys,\n  useWindowEvent,\n  type ZoomableProps,\n} from \"@keybr/widget\";\nimport {\n  type BaseSyntheticEvent,\n  type ComponentType,\n  type ReactNode,\n  type RefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport * as styles from \"./TextArea.module.less\";\nimport { TextLines, type TextLineSize } from \"./TextLines.tsx\";\n\nexport function TextArea({\n  settings,\n  lines,\n  wrap,\n  size,\n  lineTemplate,\n  demo,\n  moving,\n  focusRef,\n  onFocus,\n  onBlur,\n  onKeyDown,\n  onKeyUp,\n  onInput,\n}: {\n  readonly settings: TextDisplaySettings;\n  readonly lines: LineList;\n  readonly wrap?: boolean;\n  readonly size?: TextLineSize;\n  readonly lineTemplate?: ComponentType<any>;\n  readonly demo?: boolean;\n  readonly moving?: boolean;\n  readonly focusRef?: RefObject<Focusable>;\n  readonly onFocus?: () => void;\n  readonly onBlur?: () => void;\n  readonly onKeyDown?: (event: IKeyboardEvent) => void;\n  readonly onKeyUp?: (event: IKeyboardEvent) => void;\n  readonly onInput?: (event: IInputEvent) => void;\n} & ZoomableProps): ReactNode {\n  const ref = useRef<HTMLDivElement>(null);\n  const innerRef = useRef<Focusable>(null);\n  useImperativeHandle(focusRef, () => ({\n    focus() {\n      innerRef.current?.focus();\n    },\n    blur() {\n      innerRef.current?.blur();\n    },\n  }));\n  const [focus, setFocus] = useState(false);\n  useEffect(() => {\n    const element = ref.current;\n    if (element != null) {\n      setElementCursor(element, !moving && focus ? \"none\" : \"default\");\n    }\n  });\n  useWindowEvent(\"mousemove\", () => {\n    const element = ref.current;\n    if (element != null) {\n      setElementCursor(element, \"default\");\n    }\n  });\n  useHotkeys({\n    [\"Enter\"]: () => {\n      innerRef.current?.focus();\n    },\n  });\n  const handleFocus = useCallback(() => {\n    setFocus(true);\n    onFocus?.();\n  }, [onFocus]);\n  const handleBlur = useCallback(() => {\n    setFocus(false);\n    onBlur?.();\n  }, [onBlur]);\n  const handleClick = (event: BaseSyntheticEvent): void => {\n    innerRef.current?.focus();\n    event.preventDefault();\n  };\n  return (\n    <div ref={ref} className={styles.root} onClick={handleClick}>\n      <TextEvents\n        focusRef={innerRef}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onKeyDown={onKeyDown}\n        onKeyUp={onKeyUp}\n        onInput={onInput}\n      />\n      <TextLines\n        settings={settings}\n        lines={lines}\n        wrap={wrap}\n        size={size}\n        lineTemplate={lineTemplate}\n        cursor={!demo && focus}\n        focus={demo || focus}\n      />\n      {!demo && focus && ModifierState.capsLock && (\n        <div className={styles.messageArea}>\n          <div className={styles.messageText}>\n            <FormattedMessage\n              id=\"textArea.capsLock.message\"\n              defaultMessage=\"Caps Lock is on\"\n            />\n          </div>\n        </div>\n      )}\n      {demo || focus || (\n        <div className={styles.messageArea}>\n          <div className={styles.messageText}>\n            <FormattedMessage\n              id=\"textArea.focus.message\"\n              defaultMessage=\"Click or press Enter to activate...\"\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction setElementCursor(element: HTMLDivElement, cursor: string): void {\n  const { style } = element;\n  style.cursor = cursor;\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"Rszo4T5KKS\";\nexport { _1 as \"exampleText\" }\n","import { KeyboardOptions, useKeyboard } from \"@keybr/keyboard\";\nimport { Tasks } from \"@keybr/lang\";\nimport { Settings, useSettings } from \"@keybr/settings\";\nimport {\n  CaretMovementStyle,\n  CaretShapeStyle,\n  Feedback,\n  Font,\n  textDisplayProps,\n  textInputProps,\n  toTextDisplaySettings,\n  WhitespaceStyle,\n} from \"@keybr/textinput\";\nimport {\n  makeSoundPlayer,\n  PlaySounds,\n  soundProps,\n  SoundTheme,\n} from \"@keybr/textinput-sounds\";\nimport {\n  CheckBox,\n  Description,\n  Explainer,\n  Field,\n  FieldList,\n  FieldSet,\n  Icon,\n  IconButton,\n  OptionList,\n  RadioBox,\n  Range,\n} from \"@keybr/widget\";\nimport { mdiPlayCircleOutline, mdiStopCircleOutline } from \"@mdi/js\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { AnimatedText } from \"./AnimatedText.tsx\";\nimport * as styles from \"./TypingSettings.module.less\";\n\nexport function TypingSettings() {\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <FieldSet\n        legend={formatMessage({\n          id: \"settings.typingOptions.legend\",\n          defaultMessage: \"Typing Options\",\n        })}\n      >\n        <Explainer>\n          <Description>\n            <FormattedMessage\n              id=\"settings.typingAssists.description\"\n              defaultMessage=\"These are the typing assists which help your preserve your concentration and keep the flow by automatically correcting your errors.\"\n            />\n          </Description>\n        </Explainer>\n        <StopOnErrorProp />\n        <ForgiveErrorsProp />\n        <SpaceSkipsWordsProp />\n      </FieldSet>\n      <FieldSet\n        legend={formatMessage({\n          id: \"settings.textAppearance.legend\",\n          defaultMessage: \"Text Appearance\",\n        })}\n      >\n        <ExampleText />\n        <FontProp />\n        <WhitespaceProp />\n        <CursorShapeProp />\n        <CursorMovementProp />\n        <SoundsProp />\n        <SoundsThemeProp />\n      </FieldSet>\n    </>\n  );\n}\n\nfunction ExampleText() {\n  const { settings } = useSettings();\n  const keyboard = useKeyboard();\n  return (\n    <div className={styles.exampleText}>\n      <AnimatedText\n        settings={toTextDisplaySettings(settings)}\n        text={keyboard.getExampleText()}\n      />\n    </div>\n  );\n}\n\nfunction StopOnErrorProp() {\n  const { formatMessage } = useIntl();\n  const { settings, updateSettings } = useSettings();\n  return (\n    <>\n      <FieldList>\n        <Field>\n          <CheckBox\n            label={formatMessage({\n              id: \"settings.stopCursorOnError.label\",\n              defaultMessage: \"Stop cursor on error\",\n            })}\n            checked={settings.get(textInputProps.stopOnError)}\n            onChange={(value) => {\n              updateSettings(settings.set(textInputProps.stopOnError, value));\n            }}\n          />\n        </Field>\n      </FieldList>\n      <Explainer>\n        <Description>\n          <FormattedMessage\n            id=\"settings.stopCursorOnError.description\"\n            defaultMessage=\"If enabled, the text cursor stops advancing until the right key is pressed at the current position. If disabled, all errors will be accumulated in the text input field and must be cleared with the delete key.\"\n          />\n        </Description>\n      </Explainer>\n    </>\n  );\n}\n\nfunction ForgiveErrorsProp() {\n  const { formatMessage } = useIntl();\n  const { settings, updateSettings } = useSettings();\n  return (\n    <>\n      <FieldList>\n        <Field>\n          <CheckBox\n            label={formatMessage({\n              id: \"settings.forgiveErrors.label\",\n              defaultMessage: \"Forgive errors\",\n            })}\n            checked={settings.get(textInputProps.forgiveErrors)}\n            onChange={(value) => {\n              updateSettings(settings.set(textInputProps.forgiveErrors, value));\n            }}\n          />\n        </Field>\n      </FieldList>\n      <Explainer>\n        <Description>\n          <FormattedMessage\n            id=\"settings.forgiveErrors.description\"\n            defaultMessage=\"If enabled, the text input field will forgive some kinds of errors by automatically fixing them. These are errors such as typing a wrong character or skipping a character.\"\n          />\n        </Description>\n      </Explainer>\n    </>\n  );\n}\n\nfunction SpaceSkipsWordsProp() {\n  const { formatMessage } = useIntl();\n  const { settings, updateSettings } = useSettings();\n  return (\n    <>\n      <FieldList>\n        <Field>\n          <CheckBox\n            label={formatMessage({\n              id: \"settings.spaceSkipsWords.label\",\n              defaultMessage: \"Space skips words\",\n            })}\n            checked={settings.get(textInputProps.spaceSkipsWords)}\n            onChange={(value) => {\n              updateSettings(\n                settings.set(textInputProps.spaceSkipsWords, value),\n              );\n            }}\n          />\n        </Field>\n      </FieldList>\n      <Explainer>\n        <Description>\n          <FormattedMessage\n            id=\"settings.spaceSkipsWords.description\"\n            defaultMessage=\"If enabled, pressing the space key in the middle of a word will skip the remaining characters of the word and position cursor at the beginning of the next word.\"\n          />\n        </Description>\n      </Explainer>\n    </>\n  );\n}\n\nfunction FontProp() {\n  const { settings, updateSettings } = useSettings();\n  const { language } = KeyboardOptions.from(settings);\n  const fonts = Font.select(language);\n  const font = Font.find(fonts, settings.get(textDisplayProps.font));\n  return (\n    <FieldList>\n      <Field size={10}>\n        <FormattedMessage id=\"settings.font.label\" defaultMessage=\"Font:\" />\n      </Field>\n      <Field>\n        <OptionList\n          options={fonts.map((item) => ({\n            value: item.id,\n            name: <span style={item.cssProperties}>{item.name}</span>,\n          }))}\n          value={font.id}\n          onSelect={(id) => {\n            updateSettings(\n              settings.set(textDisplayProps.font, Font.ALL.get(id)),\n            );\n          }}\n        />\n      </Field>\n    </FieldList>\n  );\n}\n\nfunction WhitespaceProp() {\n  const { formatMessage } = useIntl();\n  const { settings, updateSettings } = useSettings();\n  return (\n    <FieldList>\n      <Field size={10}>\n        <FormattedMessage\n          id=\"settings.whitespace.label\"\n          defaultMessage=\"Whitespace:\"\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.whitespace.noWhitespaceValue\",\n            defaultMessage: \"No whitespace\",\n          })}\n          name=\"whitespace-style\"\n          checked={\n            settings.get(textDisplayProps.whitespaceStyle) ===\n            WhitespaceStyle.Space\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.whitespaceStyle,\n                WhitespaceStyle.Space,\n              ),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.whitespace.barWhitespaceValue\",\n            defaultMessage: \"Bar whitespace\",\n          })}\n          name=\"whitespace-style\"\n          checked={\n            settings.get(textDisplayProps.whitespaceStyle) ===\n            WhitespaceStyle.Bar\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.whitespaceStyle,\n                WhitespaceStyle.Bar,\n              ),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.whitespace.bulletWhitespaceValue\",\n            defaultMessage: \"Bullet whitespace\",\n          })}\n          name=\"whitespace-style\"\n          checked={\n            settings.get(textDisplayProps.whitespaceStyle) ===\n            WhitespaceStyle.Bullet\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.whitespaceStyle,\n                WhitespaceStyle.Bullet,\n              ),\n            );\n          }}\n        />\n      </Field>\n    </FieldList>\n  );\n}\n\nfunction CursorShapeProp() {\n  const { formatMessage } = useIntl();\n  const { settings, updateSettings } = useSettings();\n  return (\n    <FieldList>\n      <Field size={10}>\n        <FormattedMessage\n          id=\"settings.cursorShape.label\"\n          defaultMessage=\"Cursor shape:\"\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.cursorShape.blockCursorValue\",\n            defaultMessage: \"Block cursor\",\n          })}\n          name=\"cursor-shape-style\"\n          checked={\n            settings.get(textDisplayProps.caretShapeStyle) ===\n            CaretShapeStyle.Block\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.caretShapeStyle,\n                CaretShapeStyle.Block,\n              ),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.cursorShape.boxCursorValue\",\n            defaultMessage: \"Box cursor\",\n          })}\n          name=\"cursor-shape-style\"\n          checked={\n            settings.get(textDisplayProps.caretShapeStyle) ===\n            CaretShapeStyle.Box\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.caretShapeStyle,\n                CaretShapeStyle.Box,\n              ),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.cursorShape.lineCursorValue\",\n            defaultMessage: \"Line cursor\",\n          })}\n          name=\"cursor-shape-style\"\n          checked={\n            settings.get(textDisplayProps.caretShapeStyle) ===\n            CaretShapeStyle.Line\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.caretShapeStyle,\n                CaretShapeStyle.Line,\n              ),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.cursorShape.underlineCursorValue\",\n            defaultMessage: \"Underline cursor\",\n          })}\n          name=\"cursor-shape-style\"\n          checked={\n            settings.get(textDisplayProps.caretShapeStyle) ===\n            CaretShapeStyle.Underline\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.caretShapeStyle,\n                CaretShapeStyle.Underline,\n              ),\n            );\n          }}\n        />\n      </Field>\n    </FieldList>\n  );\n}\n\nfunction CursorMovementProp() {\n  const { formatMessage } = useIntl();\n  const { settings, updateSettings } = useSettings();\n  return (\n    <FieldList>\n      <Field size={10}>\n        <FormattedMessage\n          id=\"settings.cursorMovement.label\"\n          defaultMessage=\"Cursor movement:\"\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.cursorMovement.jumpingCursorValue\",\n            defaultMessage: \"Jumping cursor\",\n          })}\n          name=\"cursor-movement-style\"\n          checked={\n            settings.get(textDisplayProps.caretMovementStyle) ===\n            CaretMovementStyle.Jumping\n          }\n          onSelect={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.caretMovementStyle,\n                CaretMovementStyle.Jumping,\n              ),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.cursorMovement.smoothCursorValue\",\n            defaultMessage: \"Smooth cursor\",\n          })}\n          name=\"cursor-movement-style\"\n          checked={\n            settings.get(textDisplayProps.caretMovementStyle) ===\n            CaretMovementStyle.Smooth\n          }\n          onChange={() => {\n            updateSettings(\n              settings.set(\n                textDisplayProps.caretMovementStyle,\n                CaretMovementStyle.Smooth,\n              ),\n            );\n          }}\n        />\n      </Field>\n    </FieldList>\n  );\n}\n\nfunction SoundsProp() {\n  const { formatMessage } = useIntl();\n  const { settings, updateSettings } = useSettings();\n  return (\n    <FieldList>\n      <Field size={10}>\n        <FormattedMessage\n          id=\"settings.playSounds.label\"\n          defaultMessage=\"Play sounds:\"\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.sounds.noSoundsValue\",\n            defaultMessage: \"No Sounds\",\n          })}\n          name=\"play-sounds\"\n          checked={settings.get(soundProps.playSounds) === PlaySounds.None}\n          onSelect={() => {\n            updateSettings(\n              settings.set(soundProps.playSounds, PlaySounds.None),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.sounds.errorSoundsOnlyValue\",\n            defaultMessage: \"Error Sounds Only\",\n          })}\n          name=\"play-sounds\"\n          checked={\n            settings.get(soundProps.playSounds) === PlaySounds.ErrorsOnly\n          }\n          onChange={() => {\n            updateSettings(\n              settings.set(soundProps.playSounds, PlaySounds.ErrorsOnly),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <RadioBox\n          label={formatMessage({\n            id: \"settings.sounds.allSoundsValue\",\n            defaultMessage: \"All Sounds\",\n          })}\n          name=\"play-sounds\"\n          checked={settings.get(soundProps.playSounds) === PlaySounds.All}\n          onChange={() => {\n            updateSettings(settings.set(soundProps.playSounds, PlaySounds.All));\n          }}\n        />\n      </Field>\n      <Field>\n        <FormattedMessage\n          id=\"settings.soundVolume.label\"\n          defaultMessage=\"Volume:\"\n        />\n      </Field>\n      <Field>\n        <Range\n          min={0}\n          max={100}\n          step={1}\n          value={Math.round(settings.get(soundProps.soundVolume) * 100)}\n          onChange={(value) => {\n            updateSettings(settings.set(soundProps.soundVolume, value / 100));\n          }}\n        />\n      </Field>\n    </FieldList>\n  );\n}\n\nfunction SoundsThemeProp() {\n  const { settings, updateSettings } = useSettings();\n  return (\n    <FieldList>\n      <Field size={10}>\n        <FormattedMessage\n          id=\"settings.soundTheme.label\"\n          defaultMessage=\"Sound Theme:\"\n        />\n      </Field>\n      <Field>\n        <OptionList\n          options={SoundTheme.ALL.map((item) => ({\n            value: item.id,\n            name: item.name,\n          }))}\n          value={settings.get(soundProps.soundTheme).id}\n          onSelect={(id) => {\n            updateSettings(\n              settings.set(soundProps.soundTheme, SoundTheme.ALL.get(id)),\n            );\n          }}\n        />\n      </Field>\n      <Field>\n        <SoundThemePreview />\n      </Field>\n    </FieldList>\n  );\n}\n\nfunction SoundThemePreview() {\n  const { settings } = useSettings();\n  const soundVolume = settings.get(soundProps.soundVolume);\n  const soundTheme = settings.get(soundProps.soundTheme);\n  const player = useMemo(() => {\n    return makeSoundPlayer(\n      new Settings()\n        .set(soundProps.playSounds, PlaySounds.All)\n        .set(soundProps.soundVolume, soundVolume)\n        .set(soundProps.soundTheme, soundTheme),\n    );\n  }, [soundVolume, soundTheme]);\n  const [playing, setPlaying] = useState(false);\n  useEffect(() => {\n    const tasks = new Tasks();\n    if (playing) {\n      tasks.repeated(300, () => {\n        player(Feedback.Succeeded);\n      });\n    }\n    return () => {\n      tasks.cancelAll();\n    };\n  }, [player, playing]);\n  return (\n    <IconButton\n      icon={\n        <Icon shape={playing ? mdiStopCircleOutline : mdiPlayCircleOutline} />\n      }\n      onClick={() => {\n        setPlaying(!playing);\n      }}\n    />\n  );\n}\n"],"names":["initialized","modifiers","ModifierState","capsLock","includes","numLock","initialize","window","addEventListener","event","getModifiers","filter","id","getModifierState","isTextInput","TimeToType","Map","add","type","code","key","this","set","down","get","timeStamp","delete","measure","size","clear","duration","emulateLayout","settings","keyboard","target","layout","emulate","emulation","Forward","timeToType","onKeyDown","mapped","codePoint","fixKey","onInput","inputType","onKeyUp","forwardEmulation","Reverse","fixCode","reverseEmulation","characters","getCharacters","String","fromCodePoint","getCodePoint","from","toKeyModifier","length","combo","getCombo","codePointAt","mapEvent","timeStampOf","TypeError","performance","now","InputHandler","setCallbacks","callbacks","setInput","input","focus","blur","handleFocus","handleBlur","handleKeyboard","handleInput","handleComposition","removeEventListener","value","onFocus","onBlur","KeyboardEvent","isTrusted","repeat","preventDefault","InputEvent","data","TextEvents","memo","focusRef","inputRef","useRef","handler","handlerRef","current","useInputHandler","useImperativeHandle","useEffect","style","divStyle","ref","autoCapitalize","autoCorrect","spellCheck","inputStyle","position","insetInlineStart","insetBlockStart","inlineSize","blockSize","overflow","display","margin","padding","border","outline","addKey","keys","Set","deleteKey","useDepressedKeys","depressedKeys","setDepressedKeys","useState","listener","PlaySounds","SoundTheme","name","static","DEFAULT","MECHANICAL1","MECHANICAL2","TYPEWRITER1","TYPEWRITER2","toString","toJSON","soundProps","playSounds","None","soundVolume","min","max","soundTheme","ALL","context","getAudioContext","AudioContext","nullPlayer","play","offset","stop","volume","WebAudioPlayer","constructor","buffer","createGain","connect","destination","source","createBufferSource","onended","start","gain","PlayerLibrary","assets","url","Object","entries","PlayerLoader","loader","Error","init","then","player","catch","catchError","response","use","GET","send","arrayBuffer","err","decodeAudioData","console","error","Theme","theme","click","collect","blip","urls","sounds","i","common","defaultTheme","mechanical1","mechanical2","typewriter1","typewriter2","useSoundPlayer","useMemo","makeSoundPlayer","cache","loadTheme0","loadTheme","feedback","All","Succeeded","Recovered","Failed","ErrorsOnly","_1","cursorStyles","color","backgroundColor","borderStyle","borderColor","textItemStyle","whiteSpace","textStyles","normal","special","hit","miss","garbage","syntaxStyles","keyword","string","number","comment","getCursorStyle","caretShapeStyle","Block","Box","Line","Underline","getTextStyle","attrs","cls","Normal","Cursor","Hit","Miss","Garbage","renderChars","chars","nodes","span","pushSpan","nextSpan","push","className","getClassName","specialChar","whitespaceStyle","Bar","Bullet","padStart","undefined","cursorSelector","Component","createRef","componentDidMount","componentDidUpdate","componentWillUnmount","cancel","container","cursor","char","querySelector","findCursor","caretMovementStyle","language","direction","props","getComputedStyle","fontFamily","fontSize","fontStyle","fontWeight","fontVariant","fontKerning","lineHeight","x","offsetLeft","y","parentElement","offsetTop","w","offsetWidth","h","offsetHeight","left","top","textContent","borderWidth","width","height","fromLeft","fromTop","Smooth","animate","wpm","Math","round","iterations","easing","onfinish","oncancel","onremove","render","containerStyle","cursorStyle","children","TextLines","lines","wrap","lineTemplate","LineTemplate","clsx","map","text","TextLine","font","cssProperties","items","itemChars","ws","dir","index","TextItem","prevProps","nextProps","StaticText","AnimatedText","textInput","stopOnError","forgiveErrors","spaceSkipsWords","setChars","tasks","repeated","completed","reset","appendChar","at","pos","cancelAll","useAnimatedTextState","TextArea","demo","moving","innerRef","setFocus","element","setElementCursor","useCallback","onClick","TypingSettings","formatMessage","useIntl","legend","Explainer","Description","StopOnErrorProp","ForgiveErrorsProp","SpaceSkipsWordsProp","ExampleText","FontProp","WhitespaceProp","CursorShapeProp","CursorMovementProp","SoundsProp","SoundsThemeProp","getExampleText","updateSettings","FieldList","CheckBox","label","checked","onChange","fonts","select","find","OptionList","options","item","onSelect","RadioBox","Space","Jumping","Range","step","SoundThemePreview","playing","setPlaying","IconButton","icon","Icon","I","shape","mdi"],"sourceRoot":""}