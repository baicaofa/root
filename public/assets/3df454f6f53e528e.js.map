{"version":3,"file":"3df454f6f53e528e.js","mappings":"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","sources":["webpack://keybr.com/./packages/keybr-content-books/lib/load.ts","webpack://keybr.com/./packages/keybr-content-books/lib/BookContentLoader.tsx","webpack://keybr.com/./packages/keybr-content-words/lib/load.ts","webpack://keybr.com/./packages/keybr-content-words/lib/WordListLoader.tsx","webpack://keybr.com/./packages/page-typing-test/lib/session/types.ts","webpack://keybr.com/./packages/page-typing-test/lib/session/duration.ts","webpack://keybr.com/./packages/page-typing-test/lib/session/replaystate.ts","webpack://keybr.com/./packages/page-typing-test/lib/session/session.ts","webpack://keybr.com/./packages/page-typing-test/lib/settings.ts","webpack://keybr.com/./packages/page-typing-test/lib/components/Replay.module.less?ff18","webpack://keybr.com/./packages/page-typing-test/lib/components/ReplayProgress.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/Replay.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/ReportScreen.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/ReportScreen.module.less?244d","webpack://keybr.com/./packages/page-typing-test/lib/components/settings/text/BookSettings.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/settings/text/CommonWordsSettings.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/settings/text/PseudoWordsSettings.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/settings/TextGeneratorSettings.tsx","webpack://keybr.com/./packages/page-typing-test/lib/generators/book.ts","webpack://keybr.com/./packages/page-typing-test/lib/generators/pseudowords.ts","webpack://keybr.com/./packages/page-typing-test/lib/generators/commonwords.ts","webpack://keybr.com/./packages/page-typing-test/lib/generators/TextGeneratorLoader.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/LineTemplate.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/LineTemplate.module.less?b992","webpack://keybr.com/./packages/page-typing-test/lib/components/TestProgress.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/TestProgress.module.less?fe9e","webpack://keybr.com/./packages/page-typing-test/lib/components/TestScreen.module.less?e6b5","webpack://keybr.com/./packages/page-typing-test/lib/components/Toolbar.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/Toolbar.module.less?0f18","webpack://keybr.com/./packages/page-typing-test/lib/components/TestScreen.tsx","webpack://keybr.com/./packages/page-typing-test/lib/views.tsx","webpack://keybr.com/./packages/page-typing-test/lib/components/SettingsScreen.tsx","webpack://keybr.com/./packages/page-typing-test/lib/TypingTestPage.tsx","webpack://keybr.com/./packages/keybr-pages-browser/lib/pages/typing-test.tsx","webpack://keybr.com/./packages/keybr-phonetic-model-loader/lib/loader.ts","webpack://keybr.com/./packages/keybr-phonetic-model-loader/lib/assets.ts","webpack://keybr.com/./packages/keybr-phonetic-model-loader/lib/PhoneticModelLoader.tsx"],"sourcesContent":["import { Book, type Content } from \"@keybr/content\";\n\nexport async function loadContent(book: Book): Promise<Content> {\n  switch (book) {\n    case Book.EN_ALICE_WONDERLAND:\n      return (\n        await import(\n          /* webpackChunkName: \"book-en-alice-wonderland\" */\n          \"./data/en-alice-wonderland.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default as any;\n    case Book.EN_JEKYLL_HYDE:\n      return (\n        await import(\n          /* webpackChunkName: \"book-en-jekyll-hyde\" */\n          \"./data/en-jekyll-hyde.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default as any;\n    case Book.EN_CALL_WILD:\n      return (\n        await import(\n          /* webpackChunkName: \"book-en-call-wild\" */\n          \"./data/en-call-wild.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default as any;\n    default:\n      throw new Error();\n  }\n}\n","import { type Book, type BookContent } from \"@keybr/content\";\nimport { catchError } from \"@keybr/debug\";\nimport { type ReactNode, useEffect, useState } from \"react\";\nimport { loadContent } from \"./load.ts\";\n\nexport function BookContentLoader({\n  book,\n  children,\n  fallback,\n}: {\n  readonly book: Book;\n  readonly children: (result: BookContent) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  return (\n    <Loader key={book.id} book={book} fallback={fallback}>\n      {children}\n    </Loader>\n  );\n}\n\nfunction Loader({\n  book,\n  children,\n  fallback,\n}: {\n  readonly book: Book;\n  readonly children: (result: BookContent) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  const result = useLoader(book);\n  if (result == null) {\n    return fallback;\n  } else {\n    return children(result);\n  }\n}\n\nfunction useLoader(book: Book): BookContent | null {\n  const [bookContent, setBookContent] = useState<BookContent | null>(null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    loadContent(book)\n      .then((content) => {\n        if (!didCancel) {\n          setBookContent({ book, content });\n        }\n      })\n      .catch(catchError);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [book]);\n\n  return bookContent;\n}\n","import { type WordList } from \"@keybr/content\";\nimport { Language } from \"@keybr/keyboard\";\n\nexport async function loadWordList(language: Language): Promise<WordList> {\n  switch (language) {\n    case Language.AR:\n      return (\n        await import(\n          /* webpackChunkName: \"words-ar\" */ \"./data/words-ar.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.BE:\n      return (\n        await import(\n          /* webpackChunkName: \"words-be\" */ \"./data/words-be.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.CS:\n      return (\n        await import(\n          /* webpackChunkName: \"words-cs\" */ \"./data/words-cs.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.DE:\n      return (\n        await import(\n          /* webpackChunkName: \"words-de\" */ \"./data/words-de.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.EL:\n      return (\n        await import(\n          /* webpackChunkName: \"words-el\" */ \"./data/words-el.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.EN:\n      return (\n        await import(\n          /* webpackChunkName: \"words-en\" */ \"./data/words-en.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.ES:\n      return (\n        await import(\n          /* webpackChunkName: \"words-es\" */ \"./data/words-es.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.FA:\n      return (\n        await import(\n          /* webpackChunkName: \"words-fa\" */ \"./data/words-fa.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.FR:\n      return (\n        await import(\n          /* webpackChunkName: \"words-fr\" */ \"./data/words-fr.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.HE:\n      return (\n        await import(\n          /* webpackChunkName: \"words-he\" */ \"./data/words-he.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.HR:\n      return (\n        await import(\n          /* webpackChunkName: \"words-hr\" */ \"./data/words-hr.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.HU:\n      return (\n        await import(\n          /* webpackChunkName: \"words-hu\" */ \"./data/words-hu.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.IT:\n      return (\n        await import(\n          /* webpackChunkName: \"words-it\" */ \"./data/words-it.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.LT:\n      return (\n        await import(\n          /* webpackChunkName: \"words-lt\" */ \"./data/words-lt.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.NB:\n      return (\n        await import(\n          /* webpackChunkName: \"words-nb\" */ \"./data/words-nb.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.NL:\n      return (\n        await import(\n          /* webpackChunkName: \"words-nl\" */ \"./data/words-nl.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.PL:\n      return (\n        await import(\n          /* webpackChunkName: \"words-pl\" */ \"./data/words-pl.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.PT:\n      return (\n        await import(\n          /* webpackChunkName: \"words-pt\" */ \"./data/words-pt.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.RO:\n      return (\n        await import(\n          /* webpackChunkName: \"words-ro\" */ \"./data/words-ro.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.RU:\n      return (\n        await import(\n          /* webpackChunkName: \"words-ru\" */ \"./data/words-ru.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.SL:\n      return (\n        await import(\n          /* webpackChunkName: \"words-sl\" */ \"./data/words-sl.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.SV:\n      return (\n        await import(\n          /* webpackChunkName: \"words-sv\" */ \"./data/words-sv.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.TH:\n      return (\n        await import(\n          /* webpackChunkName: \"words-th\" */ \"./data/words-th.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.TR:\n      return (\n        await import(\n          /* webpackChunkName: \"words-tr\" */ \"./data/words-tr.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    case Language.UK:\n      return (\n        await import(\n          /* webpackChunkName: \"words-uk\" */ \"./data/words-uk.json\",\n          { with: { type: \"json\" } }\n        )\n      ).default;\n    default:\n      throw new Error();\n  }\n}\n","import { type WordList } from \"@keybr/content\";\nimport { catchError } from \"@keybr/debug\";\nimport { type Language } from \"@keybr/keyboard\";\nimport { type ReactNode, useEffect, useState } from \"react\";\nimport { loadWordList } from \"./load.ts\";\n\nexport function WordListLoader({\n  language,\n  children,\n  fallback,\n}: {\n  readonly language: Language;\n  readonly children: (result: WordList) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  return (\n    <Loader key={language.id} language={language} fallback={fallback}>\n      {children}\n    </Loader>\n  );\n}\n\nfunction Loader({\n  language,\n  children,\n  fallback,\n}: {\n  readonly language: Language;\n  readonly children: (result: WordList) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  const result = useLoader(language);\n  if (result == null) {\n    return fallback;\n  } else {\n    return children(result);\n  }\n}\n\nfunction useLoader(language: Language): WordList | null {\n  const [wordList, setWordList] = useState<WordList | null>(null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    loadWordList(language)\n      .then((wordList) => {\n        if (!didCancel) {\n          setWordList(wordList);\n        }\n      })\n      .catch(catchError);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [language]);\n\n  return wordList;\n}\n","import {\n  type Line,\n  type LineList,\n  type Stats,\n  type Step,\n  type TextDisplaySettings,\n  type TextInputSettings,\n} from \"@keybr/textinput\";\nimport { type AnyEvent } from \"@keybr/textinput-events\";\n\nexport enum DurationType {\n  Time = 1,\n  Length = 2,\n}\n\nexport type Duration = {\n  readonly type: DurationType;\n  readonly value: number;\n};\n\nexport type Progress = {\n  /** Time passed in millis. */\n  readonly time: number;\n  /** Chars inputted. */\n  readonly length: number;\n  /** Progress made, [0, 1]. */\n  readonly progress: number;\n  /** Typing speed so far. */\n  readonly speed: number;\n};\n\nexport type SessionSettings = {\n  readonly duration: Duration;\n  readonly textInput: TextInputSettings;\n  readonly textDisplay: TextDisplaySettings;\n  readonly numLines: number;\n  readonly numCols: number;\n};\n\nexport type SessionLine = Line & {\n  readonly index: number;\n  readonly mark: unknown;\n  readonly text: string;\n  readonly progress: Progress | null;\n};\n\nexport type SessionLines = LineList<SessionLine>;\n\nexport type TestResult = {\n  readonly stats: Stats;\n  readonly steps: readonly Step[];\n  readonly events: readonly AnyEvent[];\n};\n","import { computeSpeed, type Step } from \"@keybr/textinput\";\nimport { type Duration, DurationType, type Progress } from \"./types.ts\";\n\nexport function timeDuration(time: number): Duration {\n  return { type: DurationType.Time, value: time };\n}\n\nexport function lengthDuration(length: number): Duration {\n  return { type: DurationType.Length, value: length };\n}\n\nexport const duration_15_seconds = timeDuration(15_000);\nexport const duration_30_seconds = timeDuration(30_000);\nexport const duration_60_seconds = timeDuration(60_000);\nexport const duration_100_chars = lengthDuration(100);\nexport const duration_500_chars = lengthDuration(500);\nexport const duration_1000_chars = lengthDuration(1000);\n\nexport type NamedDuration = {\n  readonly label: string;\n  readonly duration: Duration;\n};\n\nexport const durations: readonly NamedDuration[] = [\n  { label: \"15 seconds\", duration: duration_15_seconds },\n  { label: \"30 seconds\", duration: duration_30_seconds },\n  { label: \"one minute\", duration: duration_60_seconds },\n  { label: \"100 characters\", duration: duration_100_chars },\n  { label: \"500 characters\", duration: duration_500_chars },\n  { label: \"1000 characters\", duration: duration_1000_chars },\n];\n\nexport function computeProgress(\n  duration: Duration,\n  steps: readonly Step[],\n): { progress: Progress; completed: boolean } {\n  const { length } = steps;\n  let time = 0;\n  let progress = 0;\n  let speed = 0;\n  let completed = false;\n  if (length > 0) {\n    const head = steps[0];\n    const curr = steps[length - 1];\n    time = curr.timeStamp - head.timeStamp;\n    speed = computeSpeed(length, time);\n    switch (duration.type) {\n      case DurationType.Time: {\n        progress = time / duration.value;\n        completed = time >= duration.value;\n        break;\n      }\n      case DurationType.Length: {\n        progress = length / duration.value;\n        completed = length >= duration.value;\n        break;\n      }\n    }\n  }\n  return {\n    progress: {\n      time,\n      length,\n      progress,\n      speed,\n    },\n    completed,\n  };\n}\n","import { type KeyId } from \"@keybr/keyboard\";\nimport { Timer } from \"@keybr/lang\";\nimport {\n  computeSpeed,\n  type Step,\n  TextInput,\n  type TextInputSettings,\n} from \"@keybr/textinput\";\nimport { addKey, type AnyEvent, deleteKey } from \"@keybr/textinput-events\";\nimport { type Progress } from \"./types.ts\";\n\nexport type State = \"starting\" | \"running\" | \"finished\";\n\nexport class ReplayState {\n  readonly #settings: TextInputSettings;\n  readonly #lines: readonly string[];\n  readonly #events: readonly AnyEvent[];\n  readonly #progress: ReplayProgress;\n  #state!: State;\n  #timer!: Timer;\n  #lineIndex!: number;\n  #eventIndex!: number;\n  #textInput!: TextInput;\n  #depressedKeys!: KeyId[];\n\n  constructor(\n    settings: TextInputSettings,\n    steps: readonly Step[],\n    events: readonly AnyEvent[],\n  ) {\n    this.#settings = settings;\n    this.#lines = splitLines(steps);\n    this.#events = shiftTimeStamps(events);\n    this.#progress = new ReplayProgress(steps);\n    this.reset(\"starting\");\n  }\n\n  reset(state: State = \"starting\") {\n    this.#progress.reset();\n    this.#state = state;\n    this.#timer = new Timer();\n    this.#lineIndex = 0;\n    this.#eventIndex = 0;\n    this.#textInput = this.#makeTextInput();\n    this.#depressedKeys = [];\n  }\n\n  get progress() {\n    return this.#progress;\n  }\n\n  get state() {\n    return this.#state;\n  }\n\n  get delay() {\n    switch (this.#state) {\n      case \"starting\":\n        return 3000;\n      case \"finished\":\n        return 3000;\n    }\n    const event = this.#events[this.#eventIndex];\n    return Math.max(0, event.timeStamp - this.#timer.elapsed);\n  }\n\n  step() {\n    switch (this.#state) {\n      case \"starting\":\n        this.reset(\"running\");\n        return;\n      case \"finished\":\n        this.reset(\"starting\");\n        return;\n    }\n    const event = this.#events[this.#eventIndex];\n    switch (event.type) {\n      case \"input\":\n        this.#textInput.onInput(event);\n        if (this.#textInput.completed) {\n          this.#lineIndex += 1;\n          if (this.#lineIndex < this.#lines.length) {\n            this.#textInput = this.#makeTextInput();\n          }\n        }\n        break;\n      case \"keydown\":\n        this.#depressedKeys = addKey(this.#depressedKeys, event.code);\n        break;\n      case \"keyup\":\n        this.#depressedKeys = deleteKey(this.#depressedKeys, event.code);\n        break;\n    }\n    this.#eventIndex += 1;\n    if (this.#events.length === this.#eventIndex) {\n      this.#state = \"finished\";\n    }\n  }\n\n  get chars() {\n    return this.#textInput.chars;\n  }\n\n  get lines() {\n    return this.#textInput.lines;\n  }\n\n  get depressedKeys() {\n    return this.#depressedKeys;\n  }\n\n  #makeTextInput() {\n    return new TextInput(this.#lines[this.#lineIndex], this.#settings, () => {\n      this.#progress.bump();\n    });\n  }\n}\n\nexport class ReplayProgress implements Progress {\n  readonly #steps: readonly Step[];\n  #index!: number;\n  #elapsed!: number;\n  #timer!: Timer;\n  #last!: number;\n  #speed!: number;\n\n  constructor(steps: readonly Step[]) {\n    this.#steps = [...steps];\n    this.reset();\n  }\n\n  reset() {\n    this.#index = 0;\n    this.#elapsed = 0;\n    this.#timer = new Timer();\n    this.#last = 0;\n    this.#speed = 0;\n  }\n\n  get time() {\n    if (this.#index === this.#steps.length) {\n      return (this.#last = this.#elapsed);\n    } else {\n      return (this.#last = Math.max(\n        this.#last,\n        this.#elapsed + this.#timer.elapsed,\n      ));\n    }\n  }\n\n  get length() {\n    return this.#steps.length;\n  }\n\n  get progress() {\n    return this.#index;\n  }\n\n  get speed() {\n    return this.#speed;\n  }\n\n  bump() {\n    const head = this.#steps[0];\n    const curr = this.#steps[this.#index];\n    this.#index += 1;\n    this.#elapsed = curr.timeStamp - head.timeStamp;\n    this.#timer = new Timer();\n    this.#speed = computeSpeed(this.#index, this.#elapsed);\n  }\n}\n\nfunction shiftTimeStamps(events: readonly AnyEvent[]) {\n  const result: AnyEvent[] = [];\n  let timeStamp = 0;\n  for (const event of events) {\n    if (result.length === 0) {\n      timeStamp = event.timeStamp;\n    }\n    result.push({ ...event, timeStamp: event.timeStamp - timeStamp });\n  }\n  return result;\n}\n\nfunction splitLines(steps: readonly Step[], limit: number = 50) {\n  const lines: string[] = [];\n  let line = \"\";\n  let ws = false;\n  for (let i = 0; i < steps.length; i++) {\n    const { codePoint } = steps[i];\n    if (codePoint === 0x0020) {\n      line += String.fromCodePoint(codePoint);\n      ws = true;\n    } else {\n      if (ws) {\n        if (line.length >= limit) {\n          lines.push(line);\n          line = \"\";\n        }\n      }\n      line += String.fromCodePoint(codePoint);\n      ws = false;\n    }\n  }\n  if (line.length > 0) {\n    lines.push(line);\n  }\n  return lines;\n}\n","import {\n  type Feedback,\n  splitStyledText,\n  type Step,\n  TextInput,\n} from \"@keybr/textinput\";\nimport {\n  type AnyEvent,\n  type IInputEvent,\n  type IKeyboardEvent,\n} from \"@keybr/textinput-events\";\nimport { type TextGenerator } from \"../generators/index.ts\";\nimport { computeProgress } from \"./duration.ts\";\nimport {\n  type Progress,\n  type SessionLine,\n  type SessionLines,\n  type SessionSettings,\n} from \"./types.ts\";\n\nexport class Session {\n  static readonly emptyLines = {\n    text: \"\",\n    lines: [],\n  } satisfies SessionLines;\n  static readonly emptyProgress = {\n    time: 0,\n    length: 0,\n    progress: 0,\n    speed: 0,\n  } satisfies Progress;\n\n  /** A list of events to replay. */\n  #events: AnyEvent[] = [];\n  /** The currently visible lines. */\n  #lines!: SessionLine[];\n  /** The index of the edited line. */\n  #activeLine!: number;\n  /** The text input for the edited line. */\n  #textInput!: TextInput;\n  /** The steps accumulated from all lines. */\n  #steps!: Step[];\n  /** Generates unique React element keys. */\n  #index = 0;\n\n  constructor(\n    readonly settings: SessionSettings,\n    readonly generator: TextGenerator,\n  ) {\n    this.#lines = [];\n    this.#activeLine = 0;\n    this.#steps = [];\n    while (this.#lines.length < this.settings.numLines) {\n      this.#appendLine();\n    }\n    this.#setActiveLine();\n  }\n\n  getEvents(): readonly AnyEvent[] {\n    return this.#events;\n  }\n\n  getLines(): SessionLines {\n    return { text: \"\", lines: this.#lines };\n  }\n\n  getSteps(): readonly Step[] {\n    return this.#steps;\n  }\n\n  handleKeyDown = (event: IKeyboardEvent) => {\n    this.#addEvent(event);\n  };\n\n  handleKeyUp = (event: IKeyboardEvent) => {\n    this.#addEvent(event);\n  };\n\n  handleInput = (\n    event: IInputEvent,\n  ): {\n    feedback: Feedback;\n    progress: Progress;\n    completed: boolean;\n  } => {\n    this.#addEvent(event);\n    const feedback = this.#textInput.onInput(event);\n    const { progress, completed } = computeProgress(\n      this.settings.duration,\n      this.#steps,\n    );\n    this.#updateActiveLine(progress);\n    if (this.#textInput.completed) {\n      if (this.#activeLine < this.#lines.length - 3) {\n        this.#activeLine += 1;\n      } else {\n        this.#lines.shift();\n        this.#appendLine();\n      }\n      this.#setActiveLine();\n    }\n    return { feedback, progress, completed };\n  };\n\n  #addEvent(event: AnyEvent) {\n    this.#events.push(event);\n  }\n\n  #appendLine() {\n    const mark = this.generator.mark();\n    const text = this.#generateLine();\n    const chars = splitStyledText(text);\n    const index = (this.#index += 1);\n    this.#lines.push({\n      mark,\n      index,\n      text,\n      chars,\n      progress: null,\n    });\n  }\n\n  #setActiveLine() {\n    const { text } = this.#lines[this.#activeLine];\n    this.#textInput = new TextInput(text, this.settings.textInput, (step) => {\n      this.#steps.push(step);\n    });\n    this.#updateActiveLine();\n  }\n\n  #updateActiveLine(progress: Progress | null = null) {\n    const { mark, index, text } = this.#lines[this.#activeLine];\n    const { chars } = this.#textInput;\n    this.#lines[this.#activeLine] = {\n      mark,\n      index,\n      text,\n      chars,\n      progress,\n    };\n  }\n\n  #generateLine() {\n    const {\n      settings: { numCols },\n      generator,\n    } = this;\n    let line = \"\";\n    while (true) {\n      const mark = generator.mark();\n      const word = generator.nextWord();\n      if (line.length > 0 && line.length + word.length + 1 > numCols) {\n        generator.reset(mark);\n        break;\n      }\n      line += `${word} `;\n    }\n    return line;\n  }\n}\n","import { Book } from \"@keybr/content\";\nimport { Language } from \"@keybr/keyboard\";\nimport {\n  enumProp,\n  itemProp,\n  numberProp,\n  type Settings,\n  useSettings,\n} from \"@keybr/settings\";\nimport {\n  type TextDisplaySettings,\n  type TextInputSettings,\n  toTextDisplaySettings,\n  toTextInputSettings,\n} from \"@keybr/textinput\";\nimport { useMemo } from \"react\";\nimport {\n  type Duration,\n  duration_15_seconds,\n  DurationType,\n} from \"./session/index.ts\";\n\nexport enum TextSourceType {\n  CommonWords = 1,\n  PseudoWords = 2,\n  Book = 3,\n}\n\nexport type CommonWordsSource = {\n  readonly type: TextSourceType.CommonWords;\n  readonly language: Language;\n  readonly wordListSize: number;\n};\n\nexport type PseudoWordsSource = {\n  readonly type: TextSourceType.PseudoWords;\n  readonly language: Language;\n};\n\nexport type BookSource = {\n  readonly type: TextSourceType.Book;\n  readonly book: Book;\n  readonly paragraphIndex: number;\n};\n\nexport type TextSource = CommonWordsSource | PseudoWordsSource | BookSource;\n\nexport const typingTestProps = {\n  type: enumProp(\n    \"typingTest.textSource.type\",\n    TextSourceType,\n    TextSourceType.CommonWords,\n  ),\n  language: itemProp(\n    \"typingTest.textSource.language\",\n    Language.ALL,\n    Language.EN,\n  ),\n  wordList: {\n    wordListSize: numberProp(\"typingTest.wordList.wordListSize\", 1000, {\n      min: 10,\n      max: 1000,\n    }),\n  } as const,\n  book: itemProp(\"typingTest.book\", Book.ALL, Book.EN_ALICE_WONDERLAND),\n  bookParagraphIndex: numberProp(\"typingTest.book.paragraphIndex\", 0, {\n    min: 0,\n    max: 1000,\n  }),\n  duration: {\n    type: enumProp(\"typingTest.duration.type\", DurationType, DurationType.Time),\n    value: numberProp(\"typingTest.duration.value\", 0),\n  } as const,\n} as const;\n\nexport function toDuration(settings: Settings): Duration {\n  const type = settings.get(typingTestProps.duration.type);\n  const value = settings.get(typingTestProps.duration.value);\n  if (value === 0) {\n    return duration_15_seconds;\n  } else {\n    return { type, value };\n  }\n}\n\nexport function toTextSource(settings: Settings): TextSource {\n  switch (settings.get(typingTestProps.type)) {\n    case TextSourceType.CommonWords:\n      return {\n        type: TextSourceType.CommonWords,\n        language: settings.get(typingTestProps.language),\n        wordListSize: settings.get(typingTestProps.wordList.wordListSize),\n      };\n    case TextSourceType.PseudoWords:\n      return {\n        type: TextSourceType.PseudoWords,\n        language: settings.get(typingTestProps.language),\n      };\n    case TextSourceType.Book:\n      return {\n        type: TextSourceType.Book,\n        book: settings.get(typingTestProps.book),\n        paragraphIndex: settings.get(typingTestProps.bookParagraphIndex),\n      };\n    default:\n      throw new Error();\n  }\n}\n\nexport type CompositeSettings = {\n  readonly duration: Duration;\n  readonly textSource: TextSource;\n  readonly textInput: TextInputSettings;\n  readonly textDisplay: TextDisplaySettings;\n};\n\nexport function toCompositeSettings(settings: Settings): CompositeSettings {\n  const duration = toDuration(settings);\n  const textSource = toTextSource(settings);\n  const textInput = toTextInputSettings(settings);\n  const textDisplay = {\n    ...toTextDisplaySettings(settings),\n    language: languageOf(textSource),\n  };\n  return {\n    duration,\n    textSource,\n    textInput,\n    textDisplay,\n  };\n}\n\nexport function useCompositeSettings(): CompositeSettings {\n  const { settings } = useSettings();\n  return useMemo(() => toCompositeSettings(settings), [settings]);\n}\n\nfunction languageOf(textSource: TextSource): Language {\n  switch (textSource.type) {\n    case TextSourceType.CommonWords:\n      return textSource.language;\n    case TextSourceType.PseudoWords:\n      return textSource.language;\n    case TextSourceType.Book:\n      return textSource.book.language;\n  }\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"DFiMaSObFb\";\nvar _2 = \"Q6yVe564ZQ\";\nexport { _1 as \"root\", _2 as \"text\" }\n","import { useIntlNumbers } from \"@keybr/intl\";\nimport { useFormatter } from \"@keybr/lesson-ui\";\nimport {\n  AnimationFrames,\n  formatDuration,\n  NameValue,\n  Para,\n} from \"@keybr/widget\";\nimport { useEffect, useState } from \"react\";\nimport { type ReplayState } from \"../session/index.ts\";\n\nexport function ReplayProgress({ stepper }: { readonly stepper: ReplayState }) {\n  const { formatInteger } = useIntlNumbers();\n  const { formatSpeed } = useFormatter();\n  const {\n    progress: { progress, length, speed },\n    time,\n  } = useReplayProgress(stepper);\n  return (\n    <Para align=\"center\">\n      <NameValue\n        name=\"Progress\"\n        value={`${formatInteger(progress)}/${formatInteger(length)}`}\n      />\n      <NameValue\n        name=\"Time\"\n        value={formatDuration(time, { showMillis: true })}\n      />\n      <NameValue name=\"Speed\" value={formatSpeed(speed)} />\n    </Para>\n  );\n}\n\nfunction useReplayProgress(stepper: ReplayState) {\n  const { state, progress } = stepper;\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    setTime(0);\n    const frames = new AnimationFrames();\n    frames.start(() => {\n      if (state === \"running\" || state === \"finished\") {\n        setTime(progress.time);\n      }\n    });\n    return () => {\n      frames.cancel();\n    };\n  }, [state, progress]);\n  return { progress, time };\n}\n","import { type KeyId, useKeyboard } from \"@keybr/keyboard\";\nimport { KeyLayer, VirtualKeyboard } from \"@keybr/keyboard-ui\";\nimport { Tasks } from \"@keybr/lang\";\nimport {\n  type LineList,\n  type Step,\n  type TextInputSettings,\n} from \"@keybr/textinput\";\nimport { type AnyEvent } from \"@keybr/textinput-events\";\nimport { StaticText } from \"@keybr/textinput-ui\";\nimport { Box, useDocumentVisibility } from \"@keybr/widget\";\nimport { type ReactNode, useEffect, useMemo, useState } from \"react\";\nimport { ReplayState, Session, type TestResult } from \"../session/index.ts\";\nimport { useCompositeSettings } from \"../settings.ts\";\nimport * as styles from \"./Replay.module.less\";\nimport { ReplayProgress } from \"./ReplayProgress.tsx\";\n\nexport function Replay({\n  result: { steps, events },\n}: {\n  readonly result: TestResult;\n}): ReactNode {\n  const keyboard = useKeyboard();\n  const { textInput, textDisplay } = useCompositeSettings();\n  const { stepper, lines, depressedKeys } = useReplayState(\n    textInput,\n    steps,\n    events,\n  );\n  return (\n    <div className={styles.root}>\n      <ReplayProgress stepper={stepper} />\n      <Box className={styles.text} alignItems=\"center\" justifyContent=\"center\">\n        <StaticText settings={textDisplay} lines={lines} cursor={true} />\n      </Box>\n      <VirtualKeyboard keyboard={keyboard} height=\"16rem\">\n        <KeyLayer depressedKeys={depressedKeys} />\n      </VirtualKeyboard>\n    </div>\n  );\n}\n\nfunction useReplayState(\n  settings: TextInputSettings,\n  steps: readonly Step[],\n  events: readonly AnyEvent[],\n) {\n  const stepper = useMemo(\n    () => new ReplayState(settings, steps, events),\n    [settings, steps, events],\n  );\n  const visible = useDocumentVisibility();\n  const [lines, setLines] = useState<LineList>(Session.emptyLines);\n  const [depressedKeys, setDepressedKeys] = useState<KeyId[]>([]);\n  useEffect(() => {\n    const tasks = new Tasks();\n    const step = () => {\n      stepper.step();\n      setLines(stepper.lines);\n      setDepressedKeys(stepper.depressedKeys);\n      tasks.delayed(stepper.delay, step);\n    };\n    if (visible) {\n      stepper.reset();\n      setLines(stepper.lines);\n      setDepressedKeys(stepper.depressedKeys);\n      tasks.delayed(stepper.delay, step);\n    }\n    return () => {\n      tasks.cancelAll();\n    };\n  }, [stepper, visible]);\n  return { stepper, lines, depressedKeys };\n}\n","import {\n  AccuracyHistogram,\n  makeAccuracyDistribution,\n  makeSpeedDistribution,\n  SpeedHistogram,\n  TimeToTypeHistogram,\n} from \"@keybr/chart\";\nimport { useIntlNumbers } from \"@keybr/intl\";\nimport { useFormatter } from \"@keybr/lesson-ui\";\nimport { Screen } from \"@keybr/pages-shared\";\nimport {\n  Box,\n  Button,\n  Field,\n  FieldList,\n  formatDuration,\n  Icon,\n  Kbd,\n  Name,\n  NameValue,\n  Para,\n  Spacer,\n  useHotkeys,\n  useView,\n  Value,\n} from \"@keybr/widget\";\nimport { mdiSkipNext } from \"@mdi/js\";\nimport { type ReactNode } from \"react\";\nimport { type TestResult } from \"../session/index.ts\";\nimport { views } from \"../views.tsx\";\nimport { Replay } from \"./Replay.tsx\";\nimport * as styles from \"./ReportScreen.module.less\";\n\nexport function ReportScreen({ result }: { readonly result: TestResult }) {\n  const { setView } = useView(views);\n  const { formatNumber, formatPercents } = useIntlNumbers();\n  const { speedUnit, formatSpeed } = useFormatter();\n\n  const handleNext = () => setView(\"test\");\n\n  useHotkeys({\n    [\"Enter\"]: handleNext,\n  });\n\n  const { time, speed, length, errors, accuracy } = result.stats;\n\n  const dSpeed = makeSpeedDistribution();\n  const dAccuracy = makeAccuracyDistribution();\n  const pSpeed = dSpeed.cdf(speed);\n  const pAccuracy = dAccuracy.cdf(dAccuracy.scale(accuracy));\n\n  return (\n    <Screen>\n      <Box alignItems=\"center\" justifyContent=\"center\">\n        <Indicator\n          name=\"Speed\"\n          value={\n            <Metric\n              value={formatSpeed(speed, { unit: false })}\n              unit={speedUnit.id}\n            />\n          }\n        />\n        <Separator />\n        <Indicator\n          name=\"Accuracy\"\n          value={\n            <Metric value={`${formatNumber(accuracy * 100, 2)}`} unit=\"%\" />\n          }\n        />\n      </Box>\n\n      <Para align=\"center\">\n        <NameValue name=\"Characters\" value={formatNumber(length)} />\n        <NameValue name=\"Errors\" value={formatNumber(errors)} />\n        <NameValue\n          name=\"Time\"\n          value={formatDuration(time, { showMillis: true })}\n        />\n      </Para>\n\n      <Box alignItems=\"center\" justifyContent=\"center\">\n        <SpeedHistogram\n          distribution={dSpeed}\n          thresholds={[{ label: \"Speed\", value: speed }]}\n          width=\"45rem\"\n          height=\"15rem\"\n        />\n      </Box>\n\n      <Para align=\"center\">\n        <Name>\n          Faster than <Value value={formatPercents(pSpeed)} /> of all other\n          people.\n        </Name>{\" \"}\n        <Name>\n          You are in the top <Value value={formatPercents(top(pSpeed))} />.\n        </Name>\n      </Para>\n\n      <Box alignItems=\"center\" justifyContent=\"center\">\n        <AccuracyHistogram\n          distribution={dAccuracy}\n          thresholds={[{ label: \"Accuracy\", value: accuracy }]}\n          width=\"45rem\"\n          height=\"15rem\"\n        />\n      </Box>\n\n      <Para align=\"center\">\n        <Name>\n          More accurate than <Value value={formatPercents(pAccuracy)} /> of all\n          other people.\n        </Name>{\" \"}\n        <Name>\n          You are in the top <Value value={formatPercents(top(pAccuracy))} />.\n        </Name>\n      </Para>\n\n      <Box alignItems=\"center\" justifyContent=\"center\">\n        <TimeToTypeHistogram\n          steps={result.steps}\n          width=\"45rem\"\n          height=\"15rem\"\n        />\n      </Box>\n\n      <Para align=\"center\">Time to type a character histogram.</Para>\n\n      <Spacer size={3} />\n\n      <Replay result={result} />\n\n      <Spacer size={3} />\n\n      <FieldList>\n        <Field.Filler />\n        <Field>\n          <Button\n            label=\"Next test\"\n            icon={<Icon shape={mdiSkipNext} />}\n            onClick={handleNext}\n          />\n        </Field>\n        <Field.Filler />\n      </FieldList>\n\n      <Para align=\"center\">\n        Press <Kbd>Enter</Kbd> to start a new test.\n      </Para>\n    </Screen>\n  );\n}\n\nfunction Indicator({\n  name,\n  value,\n}: {\n  readonly name: ReactNode;\n  readonly value: ReactNode;\n}) {\n  return (\n    <div className={styles.indicator}>\n      <div className={styles.indicatorValue}>\n        <Value>{value}</Value>\n      </div>\n      <div className={styles.indicatorName}>\n        <Name>{name}</Name>\n      </div>\n    </div>\n  );\n}\n\nfunction Metric({\n  value,\n  unit,\n}: {\n  readonly value: ReactNode;\n  readonly unit: ReactNode;\n}) {\n  return (\n    <>\n      <span className={styles.valueLabel}>{value}</span>\n      <span className={styles.unitLabel}>{unit}</span>\n    </>\n  );\n}\n\nfunction Separator() {\n  return <div className={styles.separator} />;\n}\n\nfunction top(value: number) {\n  return Math.max(0, 1 - value); // Takes care of negative zero.\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"zMm2Qt4CJ_\";\nvar _2 = \"HmlU2uOlUt\";\nvar _3 = \"BsUqtZMQxo\";\nvar _4 = \"W61bRKQyv9\";\nvar _5 = \"CPbZuJqaNO\";\nvar _6 = \"a5K98u4jos\";\nexport { _1 as \"indicator\", _2 as \"indicatorName\", _3 as \"indicatorValue\", _4 as \"separator\", _5 as \"unitLabel\", _6 as \"valueLabel\" }\n","import {\n  type BookContent,\n  BookPreview,\n  BookSelector,\n  flattenContent,\n  ParagraphPreview,\n  ParagraphSelector,\n} from \"@keybr/content\";\nimport { BookContentLoader } from \"@keybr/content-books\";\nimport { useSettings } from \"@keybr/settings\";\nimport { FieldSet, Para } from \"@keybr/widget\";\nimport { type ReactNode, useMemo } from \"react\";\nimport { typingTestProps } from \"../../../settings.ts\";\n\nexport function BookSettings(): ReactNode {\n  const { settings } = useSettings();\n  return (\n    <BookContentLoader book={settings.get(typingTestProps.book)}>\n      {(bookContent) => <Content bookContent={bookContent} />}\n    </BookContentLoader>\n  );\n}\n\nfunction Content({\n  bookContent,\n}: {\n  readonly bookContent: BookContent;\n}): ReactNode {\n  const { settings, updateSettings } = useSettings();\n  const paragraphs = useMemo(\n    () => flattenContent(bookContent.content),\n    [bookContent],\n  );\n  const book = settings.get(typingTestProps.book);\n  const paragraphIndex = settings.get(typingTestProps.bookParagraphIndex);\n  return (\n    <FieldSet legend=\"Book paragraphs\">\n      <Para>Type the content of a book.</Para>\n\n      <BookSelector\n        book={book}\n        onChange={(book) => {\n          updateSettings(\n            settings\n              .set(typingTestProps.book, book)\n              .set(typingTestProps.bookParagraphIndex, 0),\n          );\n        }}\n      />\n\n      <BookPreview {...bookContent} />\n\n      <ParagraphSelector\n        paragraphs={paragraphs}\n        paragraphIndex={paragraphIndex}\n        onChange={(paragraphIndex) => {\n          updateSettings(\n            settings.set(typingTestProps.bookParagraphIndex, paragraphIndex),\n          );\n        }}\n      />\n\n      <ParagraphPreview\n        paragraphs={paragraphs}\n        paragraphIndex={paragraphIndex}\n      />\n    </FieldSet>\n  );\n}\n","import { type WordList, wordListStats } from \"@keybr/content\";\nimport { WordListLoader } from \"@keybr/content-words\";\nimport { useIntlDisplayNames, useIntlNumbers } from \"@keybr/intl\";\nimport { Language } from \"@keybr/keyboard\";\nimport { useSettings } from \"@keybr/settings\";\nimport {\n  Field,\n  FieldList,\n  FieldSet,\n  NameValue,\n  OptionList,\n  Para,\n  Range,\n  TextField,\n} from \"@keybr/widget\";\nimport { type ReactNode } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { typingTestProps } from \"../../../settings.ts\";\n\nexport function CommonWordsSettings(): ReactNode {\n  const { settings } = useSettings();\n  return (\n    <WordListLoader language={settings.get(typingTestProps.language)}>\n      {(wordList) => (\n        <Content\n          wordList={wordList.slice(\n            0,\n            settings.get(typingTestProps.wordList.wordListSize),\n          )}\n        />\n      )}\n    </WordListLoader>\n  );\n}\n\nfunction Content({ wordList }: { readonly wordList: WordList }): ReactNode {\n  const { settings, updateSettings } = useSettings();\n  const { formatMessage } = useIntl();\n  const { formatLanguageName } = useIntlDisplayNames();\n  const { formatNumber } = useIntlNumbers();\n  const { wordCount, avgWordLength } = wordListStats(wordList);\n  return (\n    <FieldSet legend=\"Common words\">\n      <Para>Type the common words.</Para>\n\n      <FieldList>\n        <Field>\n          {formatMessage({\n            id: \"keyboard.language.label\",\n            defaultMessage: \"Language:\",\n          })}\n        </Field>\n\n        <Field>\n          <OptionList\n            options={Language.ALL.map((item) => ({\n              value: item.id,\n              name: formatLanguageName(item.id),\n            }))}\n            value={String(settings.get(typingTestProps.language))}\n            onSelect={(id) => {\n              updateSettings(\n                settings.set(typingTestProps.language, Language.ALL.get(id)),\n              );\n            }}\n          />\n        </Field>\n      </FieldList>\n\n      <FieldList>\n        <Field>\n          {formatMessage({\n            id: \"settings.wordListSize.label\",\n            defaultMessage: \"Word list size:\",\n          })}\n        </Field>\n        <Field>\n          <Range\n            size={16}\n            min={typingTestProps.wordList.wordListSize.min}\n            max={typingTestProps.wordList.wordListSize.max}\n            step={1}\n            value={settings.get(typingTestProps.wordList.wordListSize)}\n            onChange={(value) => {\n              updateSettings(\n                settings.set(typingTestProps.wordList.wordListSize, value),\n              );\n            }}\n          />\n        </Field>\n      </FieldList>\n\n      <Para>\n        <TextField\n          type=\"textarea\"\n          value={wordList.join(\", \")}\n          readOnly={true}\n        />\n      </Para>\n\n      <FieldList>\n        <Field>\n          <NameValue\n            name={formatMessage({\n              id: \"textStats.numUniqueWords\",\n              defaultMessage: \"Unique words\",\n            })}\n            value={formatNumber(wordCount)}\n          />\n        </Field>\n        <Field>\n          <NameValue\n            name={formatMessage({\n              id: \"textStats.averageWordLength\",\n              defaultMessage: \"Average word length\",\n            })}\n            value={formatNumber(avgWordLength, 2)}\n          />\n        </Field>\n      </FieldList>\n    </FieldSet>\n  );\n}\n","import { useIntlDisplayNames } from \"@keybr/intl\";\nimport { Language } from \"@keybr/keyboard\";\nimport { Alphabet, Filter, type PhoneticModel } from \"@keybr/phonetic-model\";\nimport { PhoneticModelLoader } from \"@keybr/phonetic-model-loader\";\nimport { useSettings } from \"@keybr/settings\";\nimport { Field, FieldList, FieldSet, OptionList, Para } from \"@keybr/widget\";\nimport { type ReactNode } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { typingTestProps } from \"../../../settings.ts\";\n\nexport function PseudoWordsSettings(): ReactNode {\n  const { settings } = useSettings();\n  return (\n    <PhoneticModelLoader language={settings.get(typingTestProps.language)}>\n      {(model) => <Content model={model} />}\n    </PhoneticModelLoader>\n  );\n}\n\nfunction Content({ model }: { readonly model: PhoneticModel }): ReactNode {\n  const { settings, updateSettings } = useSettings();\n  const { formatMessage } = useIntl();\n  const { formatLanguageName } = useIntlDisplayNames();\n  const words = [];\n  for (let i = 0; i < 50; i++) {\n    words.push(model.nextWord(Filter.empty));\n  }\n  return (\n    <FieldSet legend=\"Pseudo words\">\n      <Para>\n        Type pseudo words generated by an algorithm according to the phonetic\n        rules of your language.\n      </Para>\n\n      <FieldList>\n        <Field>\n          {formatMessage({\n            id: \"keyboard.language.label\",\n            defaultMessage: \"Language:\",\n          })}\n        </Field>\n\n        <Field>\n          <OptionList\n            options={Language.ALL.map((item) => ({\n              value: item.id,\n              name: formatLanguageName(item.id),\n            }))}\n            value={String(settings.get(typingTestProps.language))}\n            onSelect={(id) => {\n              updateSettings(\n                settings.set(typingTestProps.language, Language.ALL.get(id)),\n              );\n            }}\n          />\n        </Field>\n      </FieldList>\n\n      <FieldList>\n        <Field>Alphabet:</Field>\n        <Field>\n          <Alphabet model={model} />\n        </Field>\n      </FieldList>\n\n      <FieldList>\n        <Field>Example:</Field>\n        <Field>\n          <em>{words.join(\" \")}</em>\n        </Field>\n      </FieldList>\n    </FieldSet>\n  );\n}\n","import { useSettings } from \"@keybr/settings\";\nimport { Field, FieldList, FieldSet, Para, RadioBox } from \"@keybr/widget\";\nimport { type ReactNode } from \"react\";\nimport { TextSourceType, typingTestProps } from \"../../settings.ts\";\nimport { BookSettings } from \"./text/BookSettings.tsx\";\nimport { CommonWordsSettings } from \"./text/CommonWordsSettings.tsx\";\nimport { PseudoWordsSettings } from \"./text/PseudoWordsSettings.tsx\";\n\nexport function TextGeneratorSettings(): ReactNode {\n  const { settings, updateSettings } = useSettings();\n  return (\n    <>\n      <FieldSet legend=\"Text Settings\">\n        <Para>Choose what text to type in the test.</Para>\n\n        <FieldList>\n          <Field>\n            <RadioBox\n              label=\"Common words\"\n              name=\"text-source\"\n              value=\"text-source-common-words\"\n              checked={\n                settings.get(typingTestProps.type) ===\n                TextSourceType.CommonWords\n              }\n              onSelect={() => {\n                updateSettings(\n                  settings.set(\n                    typingTestProps.type,\n                    TextSourceType.CommonWords,\n                  ),\n                );\n              }}\n            />\n          </Field>\n          <Field>\n            <RadioBox\n              label=\"Pseudo words\"\n              name=\"text-source\"\n              value=\"text-source-pseudo-words\"\n              checked={\n                settings.get(typingTestProps.type) ===\n                TextSourceType.PseudoWords\n              }\n              onSelect={() => {\n                updateSettings(\n                  settings.set(\n                    typingTestProps.type,\n                    TextSourceType.PseudoWords,\n                  ),\n                );\n              }}\n            />\n          </Field>\n          <Field>\n            <RadioBox\n              label=\"Book paragraphs\"\n              name=\"text-source\"\n              value=\"text-source-book\"\n              checked={\n                settings.get(typingTestProps.type) === TextSourceType.Book\n              }\n              onSelect={() => {\n                updateSettings(\n                  settings.set(typingTestProps.type, TextSourceType.Book),\n                );\n              }}\n            />\n          </Field>\n        </FieldList>\n      </FieldSet>\n\n      {settings.get(typingTestProps.type) === TextSourceType.CommonWords && (\n        <CommonWordsSettings />\n      )}\n      {settings.get(typingTestProps.type) === TextSourceType.PseudoWords && (\n        <PseudoWordsSettings />\n      )}\n      {settings.get(typingTestProps.type) === TextSourceType.Book && (\n        <BookSettings />\n      )}\n    </>\n  );\n}\n","import {\n  type BookContent,\n  flattenContent,\n  splitParagraph,\n} from \"@keybr/content\";\nimport { clamp } from \"@keybr/lang\";\nimport { type TextGenerator } from \"./types.ts\";\n\ntype BookSettings = {\n  readonly paragraphIndex: number;\n};\n\ntype Mark = {\n  readonly paragraphIndex: number;\n  readonly wordIndex: number;\n};\n\nexport class BookParagraphsGenerator implements TextGenerator<Mark> {\n  readonly #paragraphs: readonly string[];\n  #paragraphIndex: number;\n  #words: readonly string[] = [];\n  #wordIndex: number = 0;\n\n  constructor(settings: BookSettings, { content }: BookContent) {\n    const paragraphs = flattenContent(content);\n    const paragraphIndex = clamp(settings.paragraphIndex, 0, paragraphs.length);\n    this.#paragraphs = paragraphs;\n    this.#paragraphIndex = paragraphIndex;\n    this.#words = splitParagraph(paragraphs[paragraphIndex]);\n    this.#wordIndex = 0;\n  }\n\n  mark(): Mark {\n    return {\n      paragraphIndex: this.#paragraphIndex,\n      wordIndex: this.#wordIndex,\n    };\n  }\n\n  reset({ paragraphIndex, wordIndex }: Mark): void {\n    this.#paragraphIndex = paragraphIndex;\n    this.#words = splitParagraph(this.#paragraphs[this.#paragraphIndex]);\n    this.#wordIndex = wordIndex;\n  }\n\n  nextWord(): string {\n    if (this.#wordIndex >= this.#words.length) {\n      this.#paragraphIndex += 1;\n      if (this.#paragraphIndex >= this.#paragraphs.length) {\n        this.#paragraphIndex = 0;\n      }\n      this.#words = splitParagraph(this.#paragraphs[this.#paragraphIndex]);\n      this.#wordIndex = 0;\n    }\n    const word = this.#words[this.#wordIndex];\n    this.#wordIndex += 1;\n    return word;\n  }\n}\n","import { Filter, type PhoneticModel } from \"@keybr/phonetic-model\";\nimport { LCG, type RNGStream } from \"@keybr/rand\";\nimport { type TextGenerator } from \"./types.ts\";\n\ntype Mark = {\n  readonly mark: unknown;\n};\n\nexport class PseudoWordsGenerator implements TextGenerator<Mark> {\n  readonly #model: PhoneticModel;\n  readonly #rng: RNGStream;\n\n  constructor(model: PhoneticModel, rng: RNGStream = LCG(1)) {\n    this.#model = model;\n    this.#rng = rng;\n  }\n\n  nextWord(): string {\n    return this.#model.nextWord(Filter.empty, this.#rng);\n  }\n\n  mark(): Mark {\n    return { mark: this.#rng.mark() };\n  }\n\n  reset({ mark }: Mark): void {\n    this.#rng.reset(mark);\n  }\n}\n","import { type WordList } from \"@keybr/content\";\nimport { LCG, randomSample, type RNGStream } from \"@keybr/rand\";\nimport { type TextGenerator } from \"./types.ts\";\n\ntype CommonWordsSettings = {\n  readonly wordListSize: number;\n};\n\ntype Mark = {\n  readonly mark: unknown;\n};\n\nexport class CommonWordsGenerator implements TextGenerator<Mark> {\n  readonly #wordList: WordList;\n  readonly #rng: RNGStream;\n\n  constructor(\n    { wordListSize }: CommonWordsSettings,\n    wordList: WordList,\n    rng: RNGStream = LCG(1),\n  ) {\n    this.#wordList = [...wordList].splice(0, wordListSize);\n    this.#rng = rng;\n  }\n\n  nextWord(): string {\n    return randomSample(this.#wordList, this.#rng);\n  }\n\n  mark(): Mark {\n    return { mark: this.#rng.mark() };\n  }\n\n  reset({ mark }: Mark): void {\n    this.#rng.reset(mark);\n  }\n}\n","import { BookContentLoader } from \"@keybr/content-books\";\nimport { WordListLoader } from \"@keybr/content-words\";\nimport { PhoneticModelLoader } from \"@keybr/phonetic-model-loader\";\nimport { LCG } from \"@keybr/rand\";\nimport { type ReactNode } from \"react\";\nimport { TextSourceType, useCompositeSettings } from \"../settings.ts\";\nimport { BookParagraphsGenerator } from \"./book.ts\";\nimport { CommonWordsGenerator } from \"./commonwords.ts\";\nimport { PseudoWordsGenerator } from \"./pseudowords.ts\";\nimport { type TextGenerator } from \"./types.ts\";\n\nexport function TextGeneratorLoader({\n  children,\n}: {\n  readonly children: (generator: TextGenerator) => ReactNode;\n}): ReactNode {\n  const { textSource } = useCompositeSettings();\n  switch (textSource.type) {\n    case TextSourceType.CommonWords:\n      return (\n        <WordListLoader language={textSource.language}>\n          {(wordList) =>\n            children(new CommonWordsGenerator(textSource, wordList, rng()))\n          }\n        </WordListLoader>\n      );\n    case TextSourceType.PseudoWords:\n      return (\n        <PhoneticModelLoader language={textSource.language}>\n          {(model) => children(new PseudoWordsGenerator(model, rng()))}\n        </PhoneticModelLoader>\n      );\n    case TextSourceType.Book:\n      return (\n        <BookContentLoader book={textSource.book}>\n          {(bookContent) =>\n            children(new BookParagraphsGenerator(textSource, bookContent))\n          }\n        </BookContentLoader>\n      );\n  }\n}\n\nfunction rng() {\n  return LCG(Date.now());\n}\n","import { memo, type ReactNode } from \"react\";\nimport { type SessionLine } from \"../session/index.ts\";\nimport * as styles from \"./LineTemplate.module.less\";\n\nexport const LineTemplate = memo(function LineTemplate({\n  children,\n  progress,\n}: {\n  readonly children: ReactNode;\n} & SessionLine) {\n  return <div className={styles.line}>{children}</div>;\n});\n","// extracted by mini-css-extract-plugin\nvar _1 = \"CMsOCpa4jp\";\nexport { _1 as \"line\" }\n","import { useIntlNumbers } from \"@keybr/intl\";\nimport { useFormatter } from \"@keybr/lesson-ui\";\nimport { formatDuration, Value, withDeferred } from \"@keybr/widget\";\nimport { memo } from \"react\";\nimport { type Progress } from \"../session/index.ts\";\nimport * as styles from \"./TestProgress.module.less\";\n\nexport const TestProgress0 = memo(function TestProgress({\n  progress: { length, time, progress, speed },\n}: {\n  readonly progress: Progress;\n}) {\n  const { formatInteger, formatPercents } = useIntlNumbers();\n  const { formatSpeed } = useFormatter();\n  return (\n    <div className={styles.root}>\n      <div\n        className={styles.bar}\n        style={{ inlineSize: `${progress * 100}%` }}\n      />\n      <div className={styles.info}>\n        <Value value={formatDuration(time, { showMillis: true })} />\n        {\" / \"}\n        <Value value={formatInteger(length)} />\n        {\" / \"}\n        <Value\n          value={formatPercents(progress, {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })}\n        />\n        {\" / \"}\n        <Value value={formatSpeed(speed)} />\n      </div>\n    </div>\n  );\n});\n\nexport const TestProgress = withDeferred(TestProgress0);\n","// extracted by mini-css-extract-plugin\nvar _1 = \"BEWioHbUt9\";\nvar _2 = \"_7frZdMv8m\";\nvar _3 = \"BEng8tEQdI\";\nexport { _1 as \"bar\", _2 as \"info\", _3 as \"root\" }\n","// extracted by mini-css-extract-plugin\nvar _1 = \"uzg6Z_e1yp\";\nexport { _1 as \"text\" }\n","import { useSettings } from \"@keybr/settings\";\nimport { Field, FieldList, Icon, IconButton, LinkButton } from \"@keybr/widget\";\nimport { mdiCog } from \"@mdi/js\";\nimport { clsx } from \"clsx\";\nimport { memo, type ReactNode } from \"react\";\nimport { durations } from \"../session/index.ts\";\nimport { toCompositeSettings, typingTestProps } from \"../settings.ts\";\nimport * as styles from \"./Toolbar.module.less\";\n\nexport const Toolbar = memo(function Toolbar({\n  onChange,\n  onConfigure,\n}: {\n  readonly onChange: () => void;\n  readonly onConfigure: () => void;\n}): ReactNode {\n  return (\n    <FieldList>\n      <Field.Filler />\n      <Field>\n        <DurationSwitcher onChange={onChange} />\n      </Field>\n      <Field>\n        <IconButton icon={<Icon shape={mdiCog} />} onClick={onConfigure} />\n      </Field>\n      <Field.Filler />\n    </FieldList>\n  );\n});\n\nexport const DurationSwitcher = memo(function DurationSwitcher({\n  onChange,\n}: {\n  readonly onChange: () => void;\n}) {\n  const { settings, updateSettings } = useSettings();\n  const compositeSettings = toCompositeSettings(settings);\n  const children: ReactNode[] = [];\n  for (let index = 0; index < durations.length; index++) {\n    const { duration, label } = durations[index];\n    if (index > 0) {\n      children.push(<span key={children.length}>{\" | \"}</span>);\n    }\n    children.push(\n      <LinkButton\n        key={children.length}\n        className={clsx(\n          styles.item,\n          duration.type === compositeSettings.duration.type &&\n            duration.value === compositeSettings.duration.value &&\n            styles.item_active,\n        )}\n        onClick={() => {\n          updateSettings(\n            settings\n              .set(typingTestProps.duration.type, duration.type)\n              .set(typingTestProps.duration.value, duration.value),\n          );\n          onChange();\n        }}\n      >\n        {label}\n      </LinkButton>,\n    );\n  }\n  return <>{children}</>;\n});\n","// extracted by mini-css-extract-plugin\nvar _1 = \"Ttt4IkpHzR\";\nvar _2 = \"f25EDsyiCy\";\nexport { _1 as \"item\", _2 as \"item_active\" }\n","import { Screen } from \"@keybr/pages-shared\";\nimport { type LineList, makeStats } from \"@keybr/textinput\";\nimport { useSoundPlayer } from \"@keybr/textinput-sounds\";\nimport { TextArea } from \"@keybr/textinput-ui\";\nimport { Box, type Focusable, Spacer, useView } from \"@keybr/widget\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  type TextGenerator,\n  TextGeneratorLoader,\n} from \"../generators/index.ts\";\nimport { Session, type TestResult } from \"../session/index.ts\";\nimport { type CompositeSettings, useCompositeSettings } from \"../settings.ts\";\nimport { views } from \"../views.tsx\";\nimport { LineTemplate } from \"./LineTemplate.tsx\";\nimport { TestProgress } from \"./TestProgress.tsx\";\nimport * as styles from \"./TestScreen.module.less\";\nimport { Toolbar } from \"./Toolbar.tsx\";\n\nexport function TestScreen() {\n  return (\n    <TextGeneratorLoader>\n      {(generator) => (\n        <Controller generator={generator} mark={generator.mark()} />\n      )}\n    </TextGeneratorLoader>\n  );\n}\n\nfunction Controller({\n  generator,\n  mark,\n}: {\n  readonly generator: TextGenerator;\n  readonly mark: unknown;\n}) {\n  const { setView } = useView(views);\n  const settings = useCompositeSettings();\n  const focusRef = useRef<Focusable>(null);\n  const player = useSoundPlayer();\n  const [session, setSession] = useState(() => nextTest(settings, generator));\n  const [lines, setLines] = useState<LineList>(Session.emptyLines);\n  const [progress, setProgress] = useState(Session.emptyProgress);\n  useEffect(() => {\n    generator.reset(mark);\n    const session = nextTest(settings, generator);\n    setSession(session);\n    setLines(session.getLines());\n  }, [settings, generator, mark]);\n  return (\n    <Screen>\n      <Toolbar\n        onConfigure={() => {\n          setView(\"settings\");\n        }}\n        onChange={() => {\n          focusRef.current?.focus();\n        }}\n      />\n      <Spacer size={10} />\n      <Box alignItems=\"center\" justifyContent=\"center\">\n        <div className={styles.text}>\n          <TextArea\n            focusRef={focusRef}\n            settings={settings.textDisplay}\n            lines={lines}\n            wrap={false}\n            onFocus={() => {\n              generator.reset(mark);\n              const session = nextTest(settings, generator);\n              setSession(session);\n              setLines(session.getLines());\n            }}\n            onKeyDown={session.handleKeyDown}\n            onKeyUp={session.handleKeyUp}\n            onInput={(event) => {\n              const { feedback, progress, completed } =\n                session.handleInput(event);\n              setLines(session.getLines());\n              setProgress(progress);\n              player(feedback);\n              if (completed) {\n                setView(\"report\", { result: makeResult(session) });\n              }\n            }}\n            lineTemplate={LineTemplate}\n          />\n          <TestProgress progress={progress} />\n        </div>\n      </Box>\n    </Screen>\n  );\n}\n\nfunction nextTest(settings: CompositeSettings, generator: TextGenerator) {\n  return new Session({ ...settings, numLines: 5, numCols: 55 }, generator);\n}\n\nfunction makeResult(session: Session): TestResult {\n  const steps = session.getSteps();\n  const events = session.getEvents();\n  return {\n    stats: makeStats(steps),\n    steps,\n    events,\n  };\n}\n","import { ReportScreen } from \"./components/ReportScreen.tsx\";\nimport { SettingsScreen } from \"./components/SettingsScreen.tsx\";\nimport { TestScreen } from \"./components/TestScreen.tsx\";\n\nexport const views = {\n  test: TestScreen,\n  report: ReportScreen,\n  settings: SettingsScreen,\n} as const;\n","import { Screen } from \"@keybr/pages-shared\";\nimport { TypingSettings } from \"@keybr/textinput-ui\";\nimport {\n  Button,\n  ExplainerBoundary,\n  Field,\n  FieldList,\n  Icon,\n  Tab,\n  TabList,\n  useView,\n} from \"@keybr/widget\";\nimport { mdiCheckCircle } from \"@mdi/js\";\nimport { useState } from \"react\";\nimport { views } from \"../views.tsx\";\nimport { TextGeneratorSettings } from \"./settings/TextGeneratorSettings.tsx\";\n\nexport function SettingsScreen() {\n  const { setView } = useView(views);\n  const [tabIndex, setTabIndex] = useState(0);\n\n  return (\n    <Screen>\n      <ExplainerBoundary defaultVisible={false}>\n        <TabList\n          selectedIndex={tabIndex}\n          onSelect={(tabIndex) => {\n            setTabIndex(tabIndex);\n          }}\n        >\n          <Tab label=\"Text\">\n            <TextGeneratorSettings />\n          </Tab>\n\n          <Tab label=\"Typing\">\n            <TypingSettings />\n          </Tab>\n        </TabList>\n\n        <FieldList>\n          <Field.Filler />\n          <Field>\n            <Button\n              icon={<Icon shape={mdiCheckCircle} />}\n              label=\"Done\"\n              onClick={() => {\n                setView(\"test\");\n              }}\n            />\n          </Field>\n        </FieldList>\n      </ExplainerBoundary>\n    </Screen>\n  );\n}\n","import { ViewSwitch } from \"@keybr/widget\";\nimport { views } from \"./views.tsx\";\n\nexport function TypingTestPage() {\n  return <ViewSwitch views={views} />;\n}\n","import { KeyboardProvider } from \"@keybr/keyboard\";\nimport { TypingTestPage } from \"@keybr/page-typing-test\";\nimport { ResultLoader } from \"@keybr/result-loader\";\n\nexport default function Page() {\n  return (\n    <ResultLoader>\n      <KeyboardProvider>\n        <TypingTestPage />\n      </KeyboardProvider>\n    </ResultLoader>\n  );\n}\n","import { type Language } from \"@keybr/keyboard\";\nimport {\n  censor,\n  makePhoneticModel,\n  type PhoneticModel,\n} from \"@keybr/phonetic-model\";\nimport { expectType, request } from \"@keybr/request\";\nimport { modelAssetPath } from \"./assets.ts\";\n\nexport const loaderImpl: PhoneticModel.Loader = async (\n  language: Language,\n): Promise<PhoneticModel> => {\n  const response = await request\n    .use(expectType(\"application/octet-stream\"))\n    .GET(modelAssetPath(language))\n    .send();\n  const body = await response.arrayBuffer();\n  const model = makePhoneticModel(language, new Uint8Array(body));\n  return censor(model);\n};\n","import { Language } from \"@keybr/keyboard\";\nimport AR from \"@keybr/phonetic-model/assets/model-ar.data\";\nimport BE from \"@keybr/phonetic-model/assets/model-be.data\";\nimport CS from \"@keybr/phonetic-model/assets/model-cs.data\";\nimport DE from \"@keybr/phonetic-model/assets/model-de.data\";\nimport EL from \"@keybr/phonetic-model/assets/model-el.data\";\nimport EN from \"@keybr/phonetic-model/assets/model-en.data\";\nimport ES from \"@keybr/phonetic-model/assets/model-es.data\";\nimport FA from \"@keybr/phonetic-model/assets/model-fa.data\";\nimport FR from \"@keybr/phonetic-model/assets/model-fr.data\";\nimport HE from \"@keybr/phonetic-model/assets/model-he.data\";\nimport HR from \"@keybr/phonetic-model/assets/model-hr.data\";\nimport HU from \"@keybr/phonetic-model/assets/model-hu.data\";\nimport IT from \"@keybr/phonetic-model/assets/model-it.data\";\nimport LT from \"@keybr/phonetic-model/assets/model-lt.data\";\nimport NB from \"@keybr/phonetic-model/assets/model-nb.data\";\nimport NL from \"@keybr/phonetic-model/assets/model-nl.data\";\nimport PL from \"@keybr/phonetic-model/assets/model-pl.data\";\nimport PT from \"@keybr/phonetic-model/assets/model-pt.data\";\nimport RO from \"@keybr/phonetic-model/assets/model-ro.data\";\nimport RU from \"@keybr/phonetic-model/assets/model-ru.data\";\nimport SL from \"@keybr/phonetic-model/assets/model-sl.data\";\nimport SV from \"@keybr/phonetic-model/assets/model-sv.data\";\nimport TH from \"@keybr/phonetic-model/assets/model-th.data\";\nimport TR from \"@keybr/phonetic-model/assets/model-tr.data\";\nimport UK from \"@keybr/phonetic-model/assets/model-uk.data\";\n\nexport function modelAssetPath(language: Language): string {\n  switch (language) {\n    case Language.AR:\n      return AR;\n    case Language.BE:\n      return BE;\n    case Language.CS:\n      return CS;\n    case Language.DE:\n      return DE;\n    case Language.EL:\n      return EL;\n    case Language.EN:\n      return EN;\n    case Language.ES:\n      return ES;\n    case Language.FA:\n      return FA;\n    case Language.FR:\n      return FR;\n    case Language.HE:\n      return HE;\n    case Language.HR:\n      return HR;\n    case Language.HU:\n      return HU;\n    case Language.IT:\n      return IT;\n    case Language.LT:\n      return LT;\n    case Language.NB:\n      return NB;\n    case Language.NL:\n      return NL;\n    case Language.PL:\n      return PL;\n    case Language.PT:\n      return PT;\n    case Language.RO:\n      return RO;\n    case Language.RU:\n      return RU;\n    case Language.SL:\n      return SL;\n    case Language.SV:\n      return SV;\n    case Language.TH:\n      return TH;\n    case Language.TR:\n      return TR;\n    case Language.UK:\n      return UK;\n    default:\n      throw new Error();\n  }\n}\n","import { catchError } from \"@keybr/debug\";\nimport { type Language } from \"@keybr/keyboard\";\nimport { LoadingProgress } from \"@keybr/pages-shared\";\nimport {\n  type PhoneticModel,\n  PhoneticModelContext,\n} from \"@keybr/phonetic-model\";\nimport { type ReactNode, useEffect, useState } from \"react\";\nimport { loaderImpl } from \"./loader.ts\";\n\nexport function PhoneticModelLoader({\n  language,\n  children,\n  fallback = <LoadingProgress />,\n}: {\n  readonly language: Language;\n  readonly children: (result: PhoneticModel) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  return (\n    <Loader key={language.id} language={language} fallback={fallback}>\n      {children}\n    </Loader>\n  );\n}\n\nexport namespace PhoneticModelLoader {\n  export let loader: PhoneticModel.Loader = loaderImpl;\n}\n\nfunction Loader({\n  language,\n  children,\n  fallback,\n}: {\n  readonly language: Language;\n  readonly children: (result: PhoneticModel) => ReactNode;\n  readonly fallback?: ReactNode;\n}): ReactNode {\n  const result = useLoader(language);\n  if (result == null) {\n    return fallback;\n  } else {\n    return (\n      <PhoneticModelContext.Provider value={result}>\n        {children(result)}\n      </PhoneticModelContext.Provider>\n    );\n  }\n}\n\nfunction useLoader(language: Language): PhoneticModel | null {\n  const [result, setResult] = useState<PhoneticModel | null>(null);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    PhoneticModelLoader.loader(language)\n      .then((result) => {\n        if (!didCancel) {\n          setResult(result);\n        }\n      })\n      .catch(catchError);\n\n    return () => {\n      didCancel = true;\n    };\n  }, [language]);\n\n  return result;\n}\n"],"names":["async","loadContent","book","EN_ALICE_WONDERLAND","default","EN_JEKYLL_HYDE","EN_CALL_WILD","Error","BookContentLoader","children","fallback","Loader","id","result","bookContent","setBookContent","useState","useEffect","didCancel","then","content","catch","useLoader","loadWordList","language","AR","BE","CS","DE","EL","EN","ES","FA","FR","HE","HR","HU","IT","LT","NB","NL","PL","PT","RO","RU","SL","SV","TH","TR","UK","WordListLoader","wordList","setWordList","DurationType","timeDuration","time","type","Time","value","lengthDuration","length","Length","duration_15_seconds","duration_30_seconds","duration_60_seconds","duration_100_chars","duration_500_chars","duration_1000_chars","durations","label","duration","ReplayState","constructor","settings","steps","events","this","limit","lines","line","ws","i","codePoint","String","fromCodePoint","push","splitLines","timeStamp","event","shiftTimeStamps","ReplayProgress","reset","state","progress","delay","Math","max","elapsed","step","onInput","completed","code","chars","depressedKeys","bump","speed","head","curr","Session","generator","static","text","numLines","getEvents","getLines","getSteps","handleKeyDown","handleKeyUp","handleInput","feedback","computeProgress","shift","mark","index","textInput","numCols","word","nextWord","TextSourceType","typingTestProps","CommonWords","ALL","wordListSize","min","bookParagraphIndex","toCompositeSettings","get","toDuration","textSource","PseudoWords","Book","paragraphIndex","toTextSource","textDisplay","languageOf","useCompositeSettings","useMemo","stepper","formatInteger","formatSpeed","setTime","frames","start","cancel","useReplayProgress","Para","align","NameValue","name","showMillis","Replay","keyboard","visible","setLines","emptyLines","setDepressedKeys","tasks","delayed","cancelAll","useReplayState","className","Box","alignItems","justifyContent","cursor","height","Indicator","Metric","unit","Separator","BookSettings","Content","updateSettings","paragraphs","legend","onChange","set","CommonWordsSettings","slice","formatMessage","useIntl","formatLanguageName","formatNumber","wordCount","avgWordLength","FieldList","OptionList","options","map","item","onSelect","Range","size","TextField","join","readOnly","PseudoWordsSettings","model","words","empty","TextGeneratorSettings","RadioBox","checked","BookParagraphsGenerator","wordIndex","PseudoWordsGenerator","rng","CommonWordsGenerator","splice","TextGeneratorLoader","Date","now","LineTemplate","memo","TestProgress0","formatPercents","style","inlineSize","minimumFractionDigits","maximumFractionDigits","TestProgress","Toolbar","onConfigure","Filler","DurationSwitcher","IconButton","icon","Icon","I","shape","mdi","onClick","compositeSettings","LinkButton","clsx","Controller","setView","views","focusRef","useRef","player","session","setSession","nextTest","setProgress","emptyProgress","current","focus","Spacer","wrap","onFocus","onKeyDown","onKeyUp","makeResult","lineTemplate","stats","test","report","speedUnit","handleNext","errors","accuracy","dSpeed","dAccuracy","pSpeed","cdf","pAccuracy","scale","distribution","thresholds","width","Button","Kbd","tabIndex","setTabIndex","ExplainerBoundary","defaultVisible","TabList","selectedIndex","TypingTestPage","ViewSwitch","Page","loaderImpl","response","use","GET","modelAssetPath","send","body","arrayBuffer","Uint8Array","PhoneticModelLoader","setResult","loader","Provider"],"sourceRoot":""}